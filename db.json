{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar1.jpg","path":"img/avatar1.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/tag-bg1.jpg","path":"img/tag-bg1.jpg","modified":1,"renderable":0},{"_id":"source/img/archive-bg.jpg","path":"img/archive-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/archive-bg1.jpg","path":"img/archive-bg1.jpg","modified":1,"renderable":0},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502781350864},{"_id":"source/CNAME","hash":"5e6529699e9b6251244a06180a4495c189c58f69","modified":1502781350814},{"_id":"themes/huxblog/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1502781350864},{"_id":"themes/huxblog/_config.yml","hash":"3c458e042f452e22ad3aa87001bc30970f5aa077","modified":1502781350866},{"_id":"source/about/index.md","hash":"7a324a6284b14b0e59f18adf7d083b9f1a16f226","modified":1502781350832},{"_id":"source/archives/index.md","hash":"55ba44f5a1fca8b85f3791e1c4e694f633ecb0c6","modified":1502781350834},{"_id":"source/_posts/201705Behavior.md","hash":"39679b0a2fbea57f072198f9af93b797ff8a25d1","modified":1502781350818},{"_id":"source/_posts/201706IOC1.md","hash":"a7500c1678ee4518dfcf152c782ebdc8bdd8c799","modified":1502781350824},{"_id":"source/_posts/201706IOC2.md","hash":"c1dad6f588b2619089f57ce6f319b4cd2f2d4f4a","modified":1502781350827},{"_id":"source/_posts/201705StatusBar.md","hash":"6408e5ade878b63204698326a7a2ee0857ef8309","modified":1502781350820},{"_id":"source/_posts/201708PlayPauseView.md","hash":"a2b4c7cf6f91b78bd4b5dbbfab41aeb1c6e81036","modified":1502781350830},{"_id":"source/img/avatar.jpg","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1502781350847},{"_id":"source/img/avatar1.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1502781350849},{"_id":"source/img/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1502781350850},{"_id":"source/tags/index.md","hash":"d0fe7d2cbcfb92c01c18b229d1101bd2d1713222","modified":1502781350860},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1502781350868},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1502781350870},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1502781350870},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1502781350872},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1502781350874},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1502781350875},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1502781350877},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1502781350879},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1502781350881},{"_id":"themes/huxblog/layout/404.ejs","hash":"c9b488d74c21fe9f35f642a5d19a138099ddf8a8","modified":1502781350887},{"_id":"themes/huxblog/layout/about.ejs","hash":"0671d30031c2c64dc4d8ef8a3b7632ddce38c6d1","modified":1502781350934},{"_id":"themes/huxblog/layout/archives.ejs","hash":"75665b1537a56be6f227fd05ca21ae0e7af82e6e","modified":1502781350943},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1502781350936},{"_id":"themes/huxblog/layout/index.ejs","hash":"fe992342f8f96f87521c78cc3a164ff01086aa9b","modified":1502781350948},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1502781350970},{"_id":"themes/huxblog/layout/layout.ejs","hash":"a98fcc3a80f9e9cdedf3a613ff402806f8de7218","modified":1502781350972},{"_id":"themes/huxblog/layout/page.ejs","hash":"b38e42a4bd0364755d341c4897a46a3acd62a0fd","modified":1502781350991},{"_id":"themes/huxblog/layout/post.ejs","hash":"63a269d180a78e72e2ff5853ab579cf59ac943fa","modified":1502781351015},{"_id":"themes/huxblog/layout/tags.ejs","hash":"3b5cb37b097895e6045b4dca91b8d4e39535f806","modified":1502781351021},{"_id":"source/img/tag-bg.jpg","hash":"4a43bfa6b69c79a6ef90bd852fe5756d241733cd","modified":1502781350855},{"_id":"source/img/tag-bg1.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1502781350858},{"_id":"source/img/archive-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1502781350841},{"_id":"source/img/archive-bg1.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1502781350845},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"d10a76be4eee202d237a58714215e567e8f6889d","modified":1502781350910},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"40d885fe82dc350f16698565440ddced47aeda3b","modified":1502781350915},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1502781350923},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1502781350925},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1502781351031},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1502781351036},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"50e36726c65ec8c6428ccbc375bcab79f76f2bc8","modified":1502781351034},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1502781351043},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1502781351051},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1502781351053},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1502781351055},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1502781351086},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1502781351085},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1502781351087},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1502781351138},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1502781351138},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1502781350853},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"d2333a926ae25bbd3056814f13fec0843468e49e","modified":1502781351028},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1502781351047},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1502781351069},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1502781351137},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1502781351025},{"_id":"themes/huxblog/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1502781351112},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1502781350838},{"_id":"public/atom.xml","hash":"57488ab3905c400c0ab8195b0a0e7cefe38faa4f","modified":1502781363539},{"_id":"public/search.xml","hash":"b2a66abc5b45f82b94dca8aefa32e0144eb5f768","modified":1502781363590},{"_id":"public/archives/index.html","hash":"2528db90b2079fef8f6bbee15ef9cd5c0e9b53f7","modified":1502781363604},{"_id":"public/tags/index.html","hash":"e989462ad273b3e0ff228e931f04e38d5956b912","modified":1502781363604},{"_id":"public/i_dont_wanna_use_default_archives/index.html","hash":"87d5160148fbb19fe13e2e5ac16a333623443066","modified":1502781363604},{"_id":"public/i_dont_wanna_use_default_archives/2017/index.html","hash":"54da21547a7619f573b2ebf202eacdb1b65cf4c3","modified":1502781363604},{"_id":"public/i_dont_wanna_use_default_archives/2017/03/index.html","hash":"b3771c44daef03405445f21e620260e9ea08a64d","modified":1502781363604},{"_id":"public/i_dont_wanna_use_default_archives/2017/04/index.html","hash":"c3d37b692c84ea6c0d626a8bf8045d48abf039a4","modified":1502781363605},{"_id":"public/i_dont_wanna_use_default_archives/2017/05/index.html","hash":"85ebef4e8702b0120d68a63839905f635ad7f5af","modified":1502781363605},{"_id":"public/i_dont_wanna_use_default_archives/2017/08/index.html","hash":"45e66e86f70fad4b0a16cc43b1b9e3848b67413f","modified":1502781363605},{"_id":"public/tags/Android-手势交互/index.html","hash":"9c7d9e26f3f3a30d9558643b2f3320cb1fe12c94","modified":1502781363605},{"_id":"public/tags/Android-解析/index.html","hash":"983314aec94a7b6951618265d6e840086f202b8b","modified":1502781363605},{"_id":"public/tags/Android-自定义View/index.html","hash":"1351649666c5609e402d3a40c9110486d57c8207","modified":1502781363605},{"_id":"public/tags/Android-Tips/index.html","hash":"30b4a471e43ea48c5cdbc1d58f84ce43cf473426","modified":1502781363605},{"_id":"public/about/index.html","hash":"72de77f30a75ce434d3334fe892833a67ee4ddec","modified":1502781363605},{"_id":"public/2017/08/12/201708PlayPauseView/index.html","hash":"2b08a8ee490989a6ff35e5dc38fc133ef5b5eeae","modified":1502781363606},{"_id":"public/2017/05/10/201706IOC2/index.html","hash":"a65bbf0e77e2ae27c0d842a6a3d252bd8bf6a398","modified":1502781363607},{"_id":"public/2017/05/09/201706IOC1/index.html","hash":"b6b9a82485095894b2a57a3ef7eda1d325fa660e","modified":1502781363607},{"_id":"public/2017/04/14/201705Behavior/index.html","hash":"c4224d30d8e1cf2bde830e6a50fcfbace01bcb34","modified":1502781363607},{"_id":"public/2017/03/30/201705StatusBar/index.html","hash":"405410dc617081ee0d2b3d5b83d3b0a8a306dc92","modified":1502781363607},{"_id":"public/index.html","hash":"000dc3210bc4deb22c93fb8505691acba5fae516","modified":1502781363608},{"_id":"public/CNAME","hash":"5e6529699e9b6251244a06180a4495c189c58f69","modified":1502781363612},{"_id":"public/img/avatar.jpg","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1502781363612},{"_id":"public/img/avatar1.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1502781363612},{"_id":"public/img/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1502781363612},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1502781363612},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1502781363612},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1502781363612},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1502781363613},{"_id":"public/img/tag-bg.jpg","hash":"4a43bfa6b69c79a6ef90bd852fe5756d241733cd","modified":1502781363825},{"_id":"public/img/tag-bg1.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1502781363825},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1502781363827},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1502781363832},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1502781363832},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1502781363832},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1502781363832},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1502781363832},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1502781363832},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1502781363832},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1502781363832},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1502781363832},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502781363832},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1502781363832},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1502781363832},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1502781363832},{"_id":"public/img/archive-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1502781363832},{"_id":"public/img/archive-bg1.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1502781363833},{"_id":"public/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1502781363835},{"_id":"public/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1502781363838}],"Category":[],"Data":[],"Page":[{"title":"Archives","layout":"archives","description":"There are all my archives.","header-img":"img/archive-bg.jpg","_content":"","source":"archives/index.md","raw":"---\ntitle: \"Archives\"\nlayout: \"archives\"\ndescription: \"There are all my archives.\"\nheader-img: \"img/archive-bg.jpg\"\n---\n","date":"2017-08-15T07:15:50.834Z","updated":"2017-08-15T07:15:50.834Z","path":"archives/index.html","comments":1,"_id":"cj6d9812w0000ho9zrh9g1ukk","content":"","excerpt":"","more":""},{"title":"About","layout":"about","date":"2017-05-29T16:00:00.000Z","description":"世界微尘里，吾宁爱与憎。","header-img":"img/about-bg.jpg","comments":1,"_content":"\n\n> Android Developer\n> 安安静静的敲代码是一件很享受的事。\n\n## Info\n\n- Lauzy\n- Android 开发者一枚\n- 毕业于NUPT\n- 电影爱好者：希区柯克、马丁斯科塞斯……\n- 最近喜欢美剧：Got、绝命毒师、硅谷……\n- 皇马球迷、最爱水爷拉莫斯 \n- Learning and sharing\n\n## Contact\n\nEmail：freedompaladin@gmail.com (Spare：lauzy@lauzy.cc)\nSina Weibo: [http://www.weibo.com/freedompal](http://www.weibo.com/freedompal)\n\n\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: \"About\"\nlayout: \"about\"\ndate: 2017-05-30\ndescription: \"世界微尘里，吾宁爱与憎。\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n\n> Android Developer\n> 安安静静的敲代码是一件很享受的事。\n\n## Info\n\n- Lauzy\n- Android 开发者一枚\n- 毕业于NUPT\n- 电影爱好者：希区柯克、马丁斯科塞斯……\n- 最近喜欢美剧：Got、绝命毒师、硅谷……\n- 皇马球迷、最爱水爷拉莫斯 \n- Learning and sharing\n\n## Contact\n\nEmail：freedompaladin@gmail.com (Spare：lauzy@lauzy.cc)\nSina Weibo: [http://www.weibo.com/freedompal](http://www.weibo.com/freedompal)\n\n\n\n\n\n\n\n\n\n","updated":"2017-08-15T07:15:50.832Z","path":"about/index.html","_id":"cj6d981300002ho9zxxzv3gpc","content":"<blockquote>\n<p>Android Developer<br>安安静静的敲代码是一件很享受的事。</p>\n</blockquote>\n<h2 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info\"></a>Info</h2><ul>\n<li>Lauzy</li>\n<li>Android 开发者一枚</li>\n<li>毕业于NUPT</li>\n<li>电影爱好者：希区柯克、马丁斯科塞斯……</li>\n<li>最近喜欢美剧：Got、绝命毒师、硅谷……</li>\n<li>皇马球迷、最爱水爷拉莫斯 </li>\n<li>Learning and sharing</li>\n</ul>\n<h2 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h2><p>Email：freedompaladin@gmail.com (Spare：lauzy@lauzy.cc)<br>Sina Weibo: <a href=\"http://www.weibo.com/freedompal\" target=\"_blank\" rel=\"external\">http://www.weibo.com/freedompal</a></p>\n","excerpt":"","more":"<blockquote>\n<p>Android Developer<br>安安静静的敲代码是一件很享受的事。</p>\n</blockquote>\n<h2 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info\"></a>Info</h2><ul>\n<li>Lauzy</li>\n<li>Android 开发者一枚</li>\n<li>毕业于NUPT</li>\n<li>电影爱好者：希区柯克、马丁斯科塞斯……</li>\n<li>最近喜欢美剧：Got、绝命毒师、硅谷……</li>\n<li>皇马球迷、最爱水爷拉莫斯 </li>\n<li>Learning and sharing</li>\n</ul>\n<h2 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h2><p>Email：freedompaladin@gmail.com (Spare：lauzy@lauzy.cc)<br>Sina Weibo: <a href=\"http://www.weibo.com/freedompal\">http://www.weibo.com/freedompal</a></p>\n"},{"layout":"tags","title":"Tags","description":"Find the tag you need.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Find the tag you need.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-08-15T07:15:50.860Z","updated":"2017-08-15T07:15:50.860Z","path":"tags/index.html","comments":1,"_id":"cj6d981350005ho9zkl0cbshr","content":"","excerpt":"","more":""}],"Post":[{"title":"LBehavior","date":"2017-04-14T08:25:46.000Z","_content":"\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","source":"_posts/201705Behavior.md","raw":"---\ntitle: LBehavior\ndate: 2017-04-14 16:25:46\ntags: \n\t- Android 手势交互\n---\n\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","slug":"201705Behavior","published":1,"updated":"2017-08-15T07:15:50.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6d9812x0001ho9z4pbx2c7y","content":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width=\"270\" height=\"450\" alt=\"效果图1\"><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width=\"270\" height=\"450\" alt=\"效果图2\"></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\" target=\"_blank\" rel=\"external\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\" target=\"_blank\" rel=\"external\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">layoutDependsOn</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">true<span class=\"keyword\">return</span> dependency <span class=\"keyword\">instanceof</span> AppBarLayout;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDependentViewChanged</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">trueoffsetChildAsNeeded(parent， child， dependency);</div><div class=\"line\">true<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断是否垂直滑动</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 触发滑动嵌套滚动之前调用的方法</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">   * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">   * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View(实现NestedScrollingChild接口)</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dx                滑动的X轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dy                滑动的Y轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </span></span></div><div class=\"line\"><span class=\"keyword\">int</span> dx， <span class=\"keyword\">int</span> dy， <span class=\"keyword\">int</span>[] consumed) &#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 滑动嵌套滚动时触发的方法</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">    * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxConsumed        TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyConsumed        TargetView消费的Y轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxUnconsumed      未被TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，</div><div class=\"line\"> *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </span></span></div><div class=\"line\">true<span class=\"keyword\">int</span> dxConsumed， <span class=\"keyword\">int</span> dyConsumed， <span class=\"keyword\">int</span> dxUnconsumed， <span class=\"keyword\">int</span> dyUnconsumed) &#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout， child， target， </div><div class=\"line\">truetruedxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断垂直滑动</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (isInit) &#123;<span class=\"comment\">// 设置标记，防止new Anim导致的parent和child坐标变化</span></div><div class=\"line\">           mCommonAnim = <span class=\"keyword\">new</span> LTitleBehaviorAnim(child);</div><div class=\"line\">           isInit = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy, <span class=\"keyword\">int</span>[] consumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mCommonAnim != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mCommonAnim.setDuration(mDuration);</div><div class=\"line\">           mCommonAnim.setInterpolator(mInterpolator);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dxConsumed, <span class=\"keyword\">int</span> dyConsumed, <span class=\"keyword\">int</span> dxUnconsumed, <span class=\"keyword\">int</span> dyUnconsumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class=\"line\">true<span class=\"keyword\">if</span> (dyConsumed &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (isHide) &#123;</div><div class=\"line\">               mCommonAnim.show();</div><div class=\"line\">               isHide = <span class=\"keyword\">false</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dyConsumed &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!isHide) &#123;</div><div class=\"line\">               mCommonAnim.hide();</div><div class=\"line\">               isHide = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LBottomBehaviorAnim</span><span class=\"params\">(View bottomView)</span> </span>&#123;</div><div class=\"line\">       mBottomView = bottomView;</div><div class=\"line\">       mOriginalY = mBottomView.getY();<span class=\"comment\">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//显示</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hide</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//隐藏</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(Math.abs(dyConsumed) &gt; minScrollY)&#123;</div><div class=\"line\">true...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mTotalScrollY += dyConsumed;<span class=\"comment\">//累加消费的距离</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (Math.abs(dyConsumed) &gt; minScrollY || Math.abs(mTotalScrollY) &gt; scrollYDistance) &#123;</div><div class=\"line\">true...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">       mTotalScrollY = <span class=\"number\">0</span>;<span class=\"comment\">//动画执行完毕后重置</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CommonBehavior <span class=\"title\">from</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       ViewGroup.LayoutParams params = view.getLayoutParams();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> CoordinatorLayout.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view is not a child of CoordinatorLayout\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(behavior <span class=\"keyword\">instanceof</span> CommonBehavior)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (CommonBehavior) behavior;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>然后可以设置对象的属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setDuration</span><span class=\"params\">(<span class=\"keyword\">int</span> duration)</span> </span>&#123;</div><div class=\"line\">       mDuration = duration;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setInterpolator</span><span class=\"params\">(Interpolator interpolator)</span> </span>&#123;</div><div class=\"line\">       mInterpolator = interpolator;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setMinScrollY</span><span class=\"params\">(<span class=\"keyword\">int</span> minScrollY)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.minScrollY = minScrollY;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setScrollYDistance</span><span class=\"params\">(<span class=\"keyword\">int</span> scrollYDistance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.scrollYDistance = scrollYDistance;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">true    ...</div><div class=\"line\">true    maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">   dependencies &#123;</div><div class=\"line\">    compile <span class=\"string\">'com.github.Lauzy:LBehavior:1.0.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\" target=\"_blank\" rel=\"external\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">CommonBehavior.from(mFloatingActionButton)</div><div class=\"line\">true.setMinScrollY(<span class=\"number\">20</span>)</div><div class=\"line\">true.setScrollYDistance(<span class=\"number\">100</span>)</div><div class=\"line\">true.setDuration(<span class=\"number\">1000</span>)</div><div class=\"line\">true.setInterpolator(<span class=\"keyword\">new</span> LinearOutSlowInInterpolator());</div></pre></td></tr></table></figure>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>。</p>\n","excerpt":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>","more":"<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">layoutDependsOn</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">true<span class=\"keyword\">return</span> dependency <span class=\"keyword\">instanceof</span> AppBarLayout;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDependentViewChanged</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">trueoffsetChildAsNeeded(parent， child， dependency);</div><div class=\"line\">true<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断是否垂直滑动</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * 触发滑动嵌套滚动之前调用的方法</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">   * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">   * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View(实现NestedScrollingChild接口)</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dx                滑动的X轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dy                滑动的Y轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </div><div class=\"line\"><span class=\"keyword\">int</span> dx， <span class=\"keyword\">int</span> dy， <span class=\"keyword\">int</span>[] consumed)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 滑动嵌套滚动时触发的方法</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">    * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxConsumed        TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyConsumed        TargetView消费的Y轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxUnconsumed      未被TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，</div><div class=\"line\"> *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </div><div class=\"line\">true<span class=\"keyword\">int</span> dxConsumed， <span class=\"keyword\">int</span> dyConsumed， <span class=\"keyword\">int</span> dxUnconsumed， <span class=\"keyword\">int</span> dyUnconsumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout， child， target， </div><div class=\"line\">truetruedxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断垂直滑动</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (isInit) &#123;<span class=\"comment\">// 设置标记，防止new Anim导致的parent和child坐标变化</span></div><div class=\"line\">           mCommonAnim = <span class=\"keyword\">new</span> LTitleBehaviorAnim(child);</div><div class=\"line\">           isInit = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy, <span class=\"keyword\">int</span>[] consumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mCommonAnim != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mCommonAnim.setDuration(mDuration);</div><div class=\"line\">           mCommonAnim.setInterpolator(mInterpolator);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dxConsumed, <span class=\"keyword\">int</span> dyConsumed, <span class=\"keyword\">int</span> dxUnconsumed, <span class=\"keyword\">int</span> dyUnconsumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class=\"line\">true<span class=\"keyword\">if</span> (dyConsumed &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (isHide) &#123;</div><div class=\"line\">               mCommonAnim.show();</div><div class=\"line\">               isHide = <span class=\"keyword\">false</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dyConsumed &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!isHide) &#123;</div><div class=\"line\">               mCommonAnim.hide();</div><div class=\"line\">               isHide = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LBottomBehaviorAnim</span><span class=\"params\">(View bottomView)</span> </span>&#123;</div><div class=\"line\">       mBottomView = bottomView;</div><div class=\"line\">       mOriginalY = mBottomView.getY();<span class=\"comment\">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//显示</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hide</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//隐藏</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(Math.abs(dyConsumed) &gt; minScrollY)&#123;</div><div class=\"line\">true...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mTotalScrollY += dyConsumed;<span class=\"comment\">//累加消费的距离</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (Math.abs(dyConsumed) &gt; minScrollY || Math.abs(mTotalScrollY) &gt; scrollYDistance) &#123;</div><div class=\"line\">true...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">       mTotalScrollY = <span class=\"number\">0</span>;<span class=\"comment\">//动画执行完毕后重置</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CommonBehavior <span class=\"title\">from</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       ViewGroup.LayoutParams params = view.getLayoutParams();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> CoordinatorLayout.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view is not a child of CoordinatorLayout\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(behavior <span class=\"keyword\">instanceof</span> CommonBehavior)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (CommonBehavior) behavior;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>然后可以设置对象的属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setDuration</span><span class=\"params\">(<span class=\"keyword\">int</span> duration)</span> </span>&#123;</div><div class=\"line\">       mDuration = duration;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setInterpolator</span><span class=\"params\">(Interpolator interpolator)</span> </span>&#123;</div><div class=\"line\">       mInterpolator = interpolator;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setMinScrollY</span><span class=\"params\">(<span class=\"keyword\">int</span> minScrollY)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.minScrollY = minScrollY;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setScrollYDistance</span><span class=\"params\">(<span class=\"keyword\">int</span> scrollYDistance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.scrollYDistance = scrollYDistance;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">true    ...</div><div class=\"line\">true    maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">   dependencies &#123;</div><div class=\"line\">    compile <span class=\"string\">'com.github.Lauzy:LBehavior:1.0.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">CommonBehavior.from(mFloatingActionButton)</div><div class=\"line\">true.setMinScrollY(<span class=\"number\">20</span>)</div><div class=\"line\">true.setScrollYDistance(<span class=\"number\">100</span>)</div><div class=\"line\">true.setDuration(<span class=\"number\">1000</span>)</div><div class=\"line\">true.setInterpolator(<span class=\"keyword\">new</span> LinearOutSlowInInterpolator());</div></pre></td></tr></table></figure>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>。</p>"},{"title":"Java注解、反射，安卓IOC（二）","date":"2017-05-09T16:00:00.000Z","_content":"\n在项目开发中，大部分 Android 开发者都使用过 ButterKnife 这个通过注解简化代码的框架。部分 Android 开发者也使用过 xUtils 这种快速开发的框架。\n两者均使用到了注解。在上一篇 [Java注解、反射，安卓IOC（一）](http://lauzy.me/2017/05/09/201706IOC1/) 中我们知道了注解及反射的用法。本篇会分别介绍下其实现机制。\n\n## 运行时注解\n\n首先我们自己简单实现类似 xUtils 这种运行时注解框架。\n\n###  绑定 View 控件\n\n创建注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)//运行时注解\n@Target(ElementType.FIELD)//Target为属性\npublic @interface FindView {\n    int value() default -1;\n}\n\n```\n\nView解析代码：\n\n```java\n\npublic class ViewInject {\n\n    public static void bind(Activity activity) {\n        inject(new ViewFinder(activity), activity);\n    }\n\n    public static void bind(View view) {\n        inject(new ViewFinder(view), view);\n    }\n\n    public static void bind(View view, Object obj) {\n        inject(new ViewFinder(view), obj);\n    }\n\n    private static void inject(ViewFinder finder, Object obj) {\n        injectFields(finder, obj);\n        injectMethods(finder, obj);\n    }\n\n    private static void injectFields(ViewFinder finder, Object obj) {\n        Class<?> clazz = obj.getClass();\n        Field[] fields = clazz.getDeclaredFields();//获取所有变量\n        for (Field field : fields) {\n            if (field.isAnnotationPresent(FindView.class)) {\n                FindView findView = field.getAnnotation(FindView.class);//获取注解\n                if (findView.value() < 0) {\n                    throw new IllegalArgumentException(\"The id can't be -1.\");\n                } else {\n                    View view = finder.findViewById(findView.value());\n                    try {\n                        field.setAccessible(true);//破坏封装\n                        field.set(obj, view); //设置属性\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n\n```\n\n主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的 ID 赋值给指定方法并调用。\n\n\n### 绑定 OnClick 事件\n\n创建注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD) //Target为方法\npublic @interface OnClick {\n    int[] id();\n}\n\n```\n\nOnClick 事件注入：\n\n```java\n\nprivate static void injectMethods(ViewFinder finder, final Object obj) {\n    Method[] methods = obj.getClass().getDeclaredMethods();\n    for (final Method method : methods) {\n        if (method.isAnnotationPresent(OnClick.class)) {\n            OnClick onClick = method.getAnnotation(OnClick.class);\n            if (onClick.id().length != 0) {\n                for (int i : onClick.id()) {\n                    View view = finder.findViewById(i);\n                    method.setAccessible(true);\n                    view.setOnClickListener(new View.OnClickListener() {\n                        @Override\n                        public void onClick(View v) {\n                            try {\n                                method.invoke(obj, v);\n                            } catch (IllegalAccessException e) {\n                                e.printStackTrace();\n                            } catch (InvocationTargetException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n\n```\n\n主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的 ID ，将注解的 ID 赋值给 findViewById 方法，然后在 setOnClickListener 调用 method 方法。\n\n在 Activity 中的使用：\n\n```java\n\npublic class IocActivity extends AppCompatActivity {\n\n    @FindView(R.id.txt_ioc_test)\n    private TextView mTxtTest;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_ioc);\n        ViewInject.bind(this);\n        mTxtTest.setText(\"测试\");\n    }\n\n    @OnClick(id = {R.id.btn_ioc_test, R.id.btn_ioc_test2})\n    public void onClick(View view) {\n        switch (view.getId()) {\n            case R.id.btn_ioc_test:\n                Toast.makeText(this, \"Click1\", Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.btn_ioc_test2:\n                Toast.makeText(this, \"Click2\", Toast.LENGTH_SHORT).show();\n                break;\n        }\n    }\n}\n\n```\n\n以上为运行时注解的简单实现，即 xUtils 使用的注解方法。但是这种方法因为通过一系列反射获取属性、方法等，对性能会有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。\n\n## 编译时注解\n\nButterKnife 源码解析网上已经有很多不错的文章了，例如这篇 [ButterKnife源码分析](http://www.jianshu.com/p/0f3f4f7ca505) 讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在 Android Studio 中的使用。\n\n首先介绍下大概的项目结构，如下图所示：\n\n<img src = \"http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png\"/>\n\n- annotation module: Java library  - 定义一系列注解。\n- injetc module: Android library  - 定义注解的接口及调用方法。\n- compiler module: Java library  - 自定义编译时注解 AbstractProcessor 在编译期间生成 java 代码。\n- app: 使用方法。\n\n本篇文章主要为介绍及学习，所以此处仅实现 setContentView 的编译时注解。\n\n1、声明注解\n\n```java\n\n@Retention(RetentionPolicy.CLASS) //编译时注解\n@Target(ElementType.TYPE) //修饰类\npublic @interface ContentView {\n    int value();\n}\n\n```\n\n2、声明外界接口及方法\n\n声明接口：\n```java\n\npublic interface ContentInjector<T> {\n    void injectContent(T obj, Activity activity); //此处仅用 Activity 参数即可实现文章的 demo\n}\n\n```\n\n提供方法：\n\n```java\n\npublic class ContentViewInject {\n    public static void bind(Activity activity) {//绑定\n        injectContentView(activity);\n    }\n    private static void injectContentView(Activity activity) {\n        Class<? extends Activity> clazz = activity.getClass();\n        try {\n            ContentInjector injector = (ContentInjector) Class.forName(clazz.getName()\n                    + \"$$ViewBinder\").newInstance();\n            injector.injectContent(activity, activity);\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n以上代码为简单使用，butterknife 中的 UnBinder 解绑，使用 Map 缓存等暂不考虑。\n此处的 Class.forName(\"\") 以及 class.newInstance() 会对性能略有影响，butterknife 在此进行了 map 缓存优化。\n\n3、自定义 AbstractProcessor，此处需将 module 设置为 Java library 才可继承 AbstractProcessor。\n\n```java\n\n@AutoService(Processor.class)\n@SupportedSourceVersion(value = SourceVersion.RELEASE_7)\npublic class ContentViewInjectProcessor extends AbstractProcessor {\n\n\n\t//可用 @SupportedAnnotationTypes(\"com.lauzy.ContentView\") 注解 ContentViewInjectProcessor 代替\n\t@Override\n    public Set<String> getSupportedAnnotationTypes() {\n        Set<String> supportTypes = new LinkedHashSet<>();\n        supportTypes.add(ContentView.class.getCanonicalName());\n        return supportTypes;\n    }\n\n    @Override\n    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        String packageName;\n        String className;\n        //遍历每个被 ContentView 修饰的 class 文件\n        for (Element element : roundEnvironment.getElementsAnnotatedWith(ContentView.class)) {\n            if (element.getKind() == ElementKind.CLASS) {\n                TypeElement typeElement = (TypeElement) element;\n                PackageElement packageEle = (PackageElement) element.getEnclosingElement();\n                packageName = packageEle.getQualifiedName().toString();//获取包名\n                //因为是 ElementKind.CLASS 类型，所以可以直接强制转换，获取类名\n                className = typeElement.getSimpleName().toString();\n\n                int layoutId = typeElement.getAnnotation(ContentView.class).value();//获取注解的 id\n\t\t\t\t\n\t\t\t\t//拼接 Jav a类的字符串\n                StringBuilder builder = new StringBuilder();\n                builder.append(\"package \").append(packageName).append(\";\\n\");\n                builder.append(\"import android.view.View;\\n\");\n                builder.append(\"import android.app.Activity;\\n\");\n                builder.append(\"import com.freedom.lauzy.inject.ContentInjector;\\n\");\n                builder.append('\\n');\n\n                builder.append(\"public class \").append(className + \"$$ViewBinder\");\n                builder.append(\"<T extends \").append(className).append(\">\");\n                builder.append(\" implements ContentInjector<T>\");\n                builder.append(\" {\\n\");\n                builder.append(\"@Override\\n\")\n                        .append(\"public void injectContent(final T source, Activity activity) {\\n\");\n                builder.append(\"    ((Activity) source).setContentView(\" + layoutId);\n                builder.append(\");\\n\");\n                builder.append(\"}\\n\\n}\\n\");\n\n\n\t\t\t\t//写入 Java 文件\n                try {\n                    JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(\n                            packageName + \".\" + className + \"$$ViewBinder\",\n                            typeElement);\n                    Writer writer = fileObject.openWriter();\n                    writer.write(builder.toString());\n                    writer.flush();\n                    writer.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.out.println(\"error\");\n                }\n            }\n        }\n        return true;\n    }\n}\n\n```\n\nbutterknife 中使用了 [javapoet](https://github.com/square/javapoet) 生成 Java 代码文件\n\n此 module 的 gradle 配置如下：\n```java\n\napply plugin: 'java'\n\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    compile 'com.google.auto.service:auto-service:1.0-rc2' // google 的生成源代码库\n    compile project(':annotation')\n}\n\nsourceCompatibility = \"1.7\"\ntargetCompatibility = \"1.7\"\n\n```\n\n4、app 使用\n\napp 的 gradle 配置如下：\n```java\n\ndependencies {\n\t...\n    annotationProcessor project(':compiler')\n    compile project(':annotation')\n    compile project(':inject')\n}\n\n```\n\nactivity 中使用：\n\n```java\n\n@ContentView(R.layout.activity_ioc)\npublic class IocActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ContentViewInject.bind(this);\n    }\n}\n\n```\n\n这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个\nIocActivity$$ViewBinder 的 Java 文件，代码如下：\n\n```java\n\npackage com.lauzy.freedom.lauzycode.IOC;\nimport android.app.Activity;\nimport com.freedom.lauzy.inject.ContentInjector;\n\npublic class IocActivity$$ViewBinder<T extends IocActivity> implements ContentInjector<T> {\n@Override\npublic void injectContent(final T source, Activity activity) {\n    ((Activity) source).setContentView(2130968606);\n}\n}\n\n```\n\n可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。\n\n注意事项：\n\n1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。\n需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，\n文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。\n\n如下图所示：\n<img src = \"http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png\"/>\n\n2、本文使用 annotationProcessor 的注解处理器代替 [android-apt](https://bitbucket.org/hvisser/android-apt) ，Google 内置的注解处理器，建议使用。\n\n### 分析\n\n编译时注解的优点 ：在于对性能影响很小的情况下，大量简化程序员的代码，像 butterknife 在首次查找类的时候对性能稍有影响，其他情况下影响微乎其微。\n编译时注解的缺点 ：build 过程生成更多的代码，增加了类和方法的数量；对性能影响很小，但是多少会有的。\n\n本人认为编译时注解在优化代码，提高效率方面是有很大优势的，远远大于其缺点。\n\n本篇文章主要是分析及梳理大致的实现方式，仅为学习使用，所有代码均托管在 [我的Github](https://github.com/Lauzy/LauzyCode) 上。","source":"_posts/201706IOC2.md","raw":"---\ntitle: Java注解、反射，安卓IOC（二）\ndate: 2017-05-10\ntags: \n    - Android 解析\n---\n\n在项目开发中，大部分 Android 开发者都使用过 ButterKnife 这个通过注解简化代码的框架。部分 Android 开发者也使用过 xUtils 这种快速开发的框架。\n两者均使用到了注解。在上一篇 [Java注解、反射，安卓IOC（一）](http://lauzy.me/2017/05/09/201706IOC1/) 中我们知道了注解及反射的用法。本篇会分别介绍下其实现机制。\n\n## 运行时注解\n\n首先我们自己简单实现类似 xUtils 这种运行时注解框架。\n\n###  绑定 View 控件\n\n创建注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)//运行时注解\n@Target(ElementType.FIELD)//Target为属性\npublic @interface FindView {\n    int value() default -1;\n}\n\n```\n\nView解析代码：\n\n```java\n\npublic class ViewInject {\n\n    public static void bind(Activity activity) {\n        inject(new ViewFinder(activity), activity);\n    }\n\n    public static void bind(View view) {\n        inject(new ViewFinder(view), view);\n    }\n\n    public static void bind(View view, Object obj) {\n        inject(new ViewFinder(view), obj);\n    }\n\n    private static void inject(ViewFinder finder, Object obj) {\n        injectFields(finder, obj);\n        injectMethods(finder, obj);\n    }\n\n    private static void injectFields(ViewFinder finder, Object obj) {\n        Class<?> clazz = obj.getClass();\n        Field[] fields = clazz.getDeclaredFields();//获取所有变量\n        for (Field field : fields) {\n            if (field.isAnnotationPresent(FindView.class)) {\n                FindView findView = field.getAnnotation(FindView.class);//获取注解\n                if (findView.value() < 0) {\n                    throw new IllegalArgumentException(\"The id can't be -1.\");\n                } else {\n                    View view = finder.findViewById(findView.value());\n                    try {\n                        field.setAccessible(true);//破坏封装\n                        field.set(obj, view); //设置属性\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n\n```\n\n主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的 ID 赋值给指定方法并调用。\n\n\n### 绑定 OnClick 事件\n\n创建注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD) //Target为方法\npublic @interface OnClick {\n    int[] id();\n}\n\n```\n\nOnClick 事件注入：\n\n```java\n\nprivate static void injectMethods(ViewFinder finder, final Object obj) {\n    Method[] methods = obj.getClass().getDeclaredMethods();\n    for (final Method method : methods) {\n        if (method.isAnnotationPresent(OnClick.class)) {\n            OnClick onClick = method.getAnnotation(OnClick.class);\n            if (onClick.id().length != 0) {\n                for (int i : onClick.id()) {\n                    View view = finder.findViewById(i);\n                    method.setAccessible(true);\n                    view.setOnClickListener(new View.OnClickListener() {\n                        @Override\n                        public void onClick(View v) {\n                            try {\n                                method.invoke(obj, v);\n                            } catch (IllegalAccessException e) {\n                                e.printStackTrace();\n                            } catch (InvocationTargetException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n\n```\n\n主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的 ID ，将注解的 ID 赋值给 findViewById 方法，然后在 setOnClickListener 调用 method 方法。\n\n在 Activity 中的使用：\n\n```java\n\npublic class IocActivity extends AppCompatActivity {\n\n    @FindView(R.id.txt_ioc_test)\n    private TextView mTxtTest;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_ioc);\n        ViewInject.bind(this);\n        mTxtTest.setText(\"测试\");\n    }\n\n    @OnClick(id = {R.id.btn_ioc_test, R.id.btn_ioc_test2})\n    public void onClick(View view) {\n        switch (view.getId()) {\n            case R.id.btn_ioc_test:\n                Toast.makeText(this, \"Click1\", Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.btn_ioc_test2:\n                Toast.makeText(this, \"Click2\", Toast.LENGTH_SHORT).show();\n                break;\n        }\n    }\n}\n\n```\n\n以上为运行时注解的简单实现，即 xUtils 使用的注解方法。但是这种方法因为通过一系列反射获取属性、方法等，对性能会有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。\n\n## 编译时注解\n\nButterKnife 源码解析网上已经有很多不错的文章了，例如这篇 [ButterKnife源码分析](http://www.jianshu.com/p/0f3f4f7ca505) 讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在 Android Studio 中的使用。\n\n首先介绍下大概的项目结构，如下图所示：\n\n<img src = \"http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png\"/>\n\n- annotation module: Java library  - 定义一系列注解。\n- injetc module: Android library  - 定义注解的接口及调用方法。\n- compiler module: Java library  - 自定义编译时注解 AbstractProcessor 在编译期间生成 java 代码。\n- app: 使用方法。\n\n本篇文章主要为介绍及学习，所以此处仅实现 setContentView 的编译时注解。\n\n1、声明注解\n\n```java\n\n@Retention(RetentionPolicy.CLASS) //编译时注解\n@Target(ElementType.TYPE) //修饰类\npublic @interface ContentView {\n    int value();\n}\n\n```\n\n2、声明外界接口及方法\n\n声明接口：\n```java\n\npublic interface ContentInjector<T> {\n    void injectContent(T obj, Activity activity); //此处仅用 Activity 参数即可实现文章的 demo\n}\n\n```\n\n提供方法：\n\n```java\n\npublic class ContentViewInject {\n    public static void bind(Activity activity) {//绑定\n        injectContentView(activity);\n    }\n    private static void injectContentView(Activity activity) {\n        Class<? extends Activity> clazz = activity.getClass();\n        try {\n            ContentInjector injector = (ContentInjector) Class.forName(clazz.getName()\n                    + \"$$ViewBinder\").newInstance();\n            injector.injectContent(activity, activity);\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n以上代码为简单使用，butterknife 中的 UnBinder 解绑，使用 Map 缓存等暂不考虑。\n此处的 Class.forName(\"\") 以及 class.newInstance() 会对性能略有影响，butterknife 在此进行了 map 缓存优化。\n\n3、自定义 AbstractProcessor，此处需将 module 设置为 Java library 才可继承 AbstractProcessor。\n\n```java\n\n@AutoService(Processor.class)\n@SupportedSourceVersion(value = SourceVersion.RELEASE_7)\npublic class ContentViewInjectProcessor extends AbstractProcessor {\n\n\n\t//可用 @SupportedAnnotationTypes(\"com.lauzy.ContentView\") 注解 ContentViewInjectProcessor 代替\n\t@Override\n    public Set<String> getSupportedAnnotationTypes() {\n        Set<String> supportTypes = new LinkedHashSet<>();\n        supportTypes.add(ContentView.class.getCanonicalName());\n        return supportTypes;\n    }\n\n    @Override\n    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        String packageName;\n        String className;\n        //遍历每个被 ContentView 修饰的 class 文件\n        for (Element element : roundEnvironment.getElementsAnnotatedWith(ContentView.class)) {\n            if (element.getKind() == ElementKind.CLASS) {\n                TypeElement typeElement = (TypeElement) element;\n                PackageElement packageEle = (PackageElement) element.getEnclosingElement();\n                packageName = packageEle.getQualifiedName().toString();//获取包名\n                //因为是 ElementKind.CLASS 类型，所以可以直接强制转换，获取类名\n                className = typeElement.getSimpleName().toString();\n\n                int layoutId = typeElement.getAnnotation(ContentView.class).value();//获取注解的 id\n\t\t\t\t\n\t\t\t\t//拼接 Jav a类的字符串\n                StringBuilder builder = new StringBuilder();\n                builder.append(\"package \").append(packageName).append(\";\\n\");\n                builder.append(\"import android.view.View;\\n\");\n                builder.append(\"import android.app.Activity;\\n\");\n                builder.append(\"import com.freedom.lauzy.inject.ContentInjector;\\n\");\n                builder.append('\\n');\n\n                builder.append(\"public class \").append(className + \"$$ViewBinder\");\n                builder.append(\"<T extends \").append(className).append(\">\");\n                builder.append(\" implements ContentInjector<T>\");\n                builder.append(\" {\\n\");\n                builder.append(\"@Override\\n\")\n                        .append(\"public void injectContent(final T source, Activity activity) {\\n\");\n                builder.append(\"    ((Activity) source).setContentView(\" + layoutId);\n                builder.append(\");\\n\");\n                builder.append(\"}\\n\\n}\\n\");\n\n\n\t\t\t\t//写入 Java 文件\n                try {\n                    JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(\n                            packageName + \".\" + className + \"$$ViewBinder\",\n                            typeElement);\n                    Writer writer = fileObject.openWriter();\n                    writer.write(builder.toString());\n                    writer.flush();\n                    writer.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.out.println(\"error\");\n                }\n            }\n        }\n        return true;\n    }\n}\n\n```\n\nbutterknife 中使用了 [javapoet](https://github.com/square/javapoet) 生成 Java 代码文件\n\n此 module 的 gradle 配置如下：\n```java\n\napply plugin: 'java'\n\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    compile 'com.google.auto.service:auto-service:1.0-rc2' // google 的生成源代码库\n    compile project(':annotation')\n}\n\nsourceCompatibility = \"1.7\"\ntargetCompatibility = \"1.7\"\n\n```\n\n4、app 使用\n\napp 的 gradle 配置如下：\n```java\n\ndependencies {\n\t...\n    annotationProcessor project(':compiler')\n    compile project(':annotation')\n    compile project(':inject')\n}\n\n```\n\nactivity 中使用：\n\n```java\n\n@ContentView(R.layout.activity_ioc)\npublic class IocActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ContentViewInject.bind(this);\n    }\n}\n\n```\n\n这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个\nIocActivity$$ViewBinder 的 Java 文件，代码如下：\n\n```java\n\npackage com.lauzy.freedom.lauzycode.IOC;\nimport android.app.Activity;\nimport com.freedom.lauzy.inject.ContentInjector;\n\npublic class IocActivity$$ViewBinder<T extends IocActivity> implements ContentInjector<T> {\n@Override\npublic void injectContent(final T source, Activity activity) {\n    ((Activity) source).setContentView(2130968606);\n}\n}\n\n```\n\n可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。\n\n注意事项：\n\n1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。\n需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，\n文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。\n\n如下图所示：\n<img src = \"http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png\"/>\n\n2、本文使用 annotationProcessor 的注解处理器代替 [android-apt](https://bitbucket.org/hvisser/android-apt) ，Google 内置的注解处理器，建议使用。\n\n### 分析\n\n编译时注解的优点 ：在于对性能影响很小的情况下，大量简化程序员的代码，像 butterknife 在首次查找类的时候对性能稍有影响，其他情况下影响微乎其微。\n编译时注解的缺点 ：build 过程生成更多的代码，增加了类和方法的数量；对性能影响很小，但是多少会有的。\n\n本人认为编译时注解在优化代码，提高效率方面是有很大优势的，远远大于其缺点。\n\n本篇文章主要是分析及梳理大致的实现方式，仅为学习使用，所有代码均托管在 [我的Github](https://github.com/Lauzy/LauzyCode) 上。","slug":"201706IOC2","published":1,"updated":"2017-08-15T07:15:50.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6d981300003ho9z8efy84un","content":"<p>在项目开发中，大部分 Android 开发者都使用过 ButterKnife 这个通过注解简化代码的框架。部分 Android 开发者也使用过 xUtils 这种快速开发的框架。<br>两者均使用到了注解。在上一篇 <a href=\"http://lauzy.me/2017/05/09/201706IOC1/\" target=\"_blank\" rel=\"external\">Java注解、反射，安卓IOC（一）</a> 中我们知道了注解及反射的用法。本篇会分别介绍下其实现机制。</p>\n<h2 id=\"运行时注解\"><a href=\"#运行时注解\" class=\"headerlink\" title=\"运行时注解\"></a>运行时注解</h2><p>首先我们自己简单实现类似 xUtils 这种运行时注解框架。</p>\n<h3 id=\"绑定-View-控件\"><a href=\"#绑定-View-控件\" class=\"headerlink\" title=\"绑定 View 控件\"></a>绑定 View 控件</h3><p>创建注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)<span class=\"comment\">//运行时注解</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)<span class=\"comment\">//Target为属性</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FindView &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> -1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>View解析代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewInject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bind</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        inject(<span class=\"keyword\">new</span> ViewFinder(activity), activity);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bind</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        inject(<span class=\"keyword\">new</span> ViewFinder(view), view);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bind</span><span class=\"params\">(View view, Object obj)</span> </span>&#123;</div><div class=\"line\">        inject(<span class=\"keyword\">new</span> ViewFinder(view), obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(ViewFinder finder, Object obj)</span> </span>&#123;</div><div class=\"line\">        injectFields(finder, obj);</div><div class=\"line\">        injectMethods(finder, obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectFields</span><span class=\"params\">(ViewFinder finder, Object obj)</span> </span>&#123;</div><div class=\"line\">        Class&lt;?&gt; clazz = obj.getClass();</div><div class=\"line\">        Field[] fields = clazz.getDeclaredFields();<span class=\"comment\">//获取所有变量</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (field.isAnnotationPresent(FindView.class)) &#123;</div><div class=\"line\">                FindView findView = field.getAnnotation(FindView.class);<span class=\"comment\">//获取注解</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (findView.value() &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The id can't be -1.\"</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    View view = finder.findViewById(findView.value());</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        field.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//破坏封装</span></div><div class=\"line\">                        field.set(obj, view); <span class=\"comment\">//设置属性</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的 ID 赋值给指定方法并调用。</p>\n<h3 id=\"绑定-OnClick-事件\"><a href=\"#绑定-OnClick-事件\" class=\"headerlink\" title=\"绑定 OnClick 事件\"></a>绑定 OnClick 事件</h3><p>创建注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD) <span class=\"comment\">//Target为方法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> OnClick &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] id();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>OnClick 事件注入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectMethods</span><span class=\"params\">(ViewFinder finder, <span class=\"keyword\">final</span> Object obj)</span> </span>&#123;</div><div class=\"line\">    Method[] methods = obj.getClass().getDeclaredMethods();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> Method method : methods) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (method.isAnnotationPresent(OnClick.class)) &#123;</div><div class=\"line\">            OnClick onClick = method.getAnnotation(OnClick.class);</div><div class=\"line\">            <span class=\"keyword\">if</span> (onClick.id().length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : onClick.id()) &#123;</div><div class=\"line\">                    View view = finder.findViewById(i);</div><div class=\"line\">                    method.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">                    view.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                method.invoke(obj, v);</div><div class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">                                e.printStackTrace();</div><div class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">                                e.printStackTrace();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的 ID ，将注解的 ID 赋值给 findViewById 方法，然后在 setOnClickListener 调用 method 方法。</p>\n<p>在 Activity 中的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@FindView</span>(R.id.txt_ioc_test)</div><div class=\"line\">    <span class=\"keyword\">private</span> TextView mTxtTest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_ioc);</div><div class=\"line\">        ViewInject.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">        mTxtTest.setText(<span class=\"string\">\"测试\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@OnClick</span>(id = &#123;R.id.btn_ioc_test, R.id.btn_ioc_test2&#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.btn_ioc_test:</div><div class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Click1\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.btn_ioc_test2:</div><div class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Click2\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为运行时注解的简单实现，即 xUtils 使用的注解方法。但是这种方法因为通过一系列反射获取属性、方法等，对性能会有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。</p>\n<h2 id=\"编译时注解\"><a href=\"#编译时注解\" class=\"headerlink\" title=\"编译时注解\"></a>编译时注解</h2><p>ButterKnife 源码解析网上已经有很多不错的文章了，例如这篇 <a href=\"http://www.jianshu.com/p/0f3f4f7ca505\" target=\"_blank\" rel=\"external\">ButterKnife源码分析</a> 讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在 Android Studio 中的使用。</p>\n<p>首先介绍下大概的项目结构，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png\"></p>\n<ul>\n<li>annotation module: Java library  - 定义一系列注解。</li>\n<li>injetc module: Android library  - 定义注解的接口及调用方法。</li>\n<li>compiler module: Java library  - 自定义编译时注解 AbstractProcessor 在编译期间生成 java 代码。</li>\n<li>app: 使用方法。</li>\n</ul>\n<p>本篇文章主要为介绍及学习，所以此处仅实现 setContentView 的编译时注解。</p>\n<p>1、声明注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.CLASS) <span class=\"comment\">//编译时注解</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE) <span class=\"comment\">//修饰类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ContentView &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、声明外界接口及方法</p>\n<p>声明接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ContentInjector</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">injectContent</span><span class=\"params\">(T obj, Activity activity)</span></span>; <span class=\"comment\">//此处仅用 Activity 参数即可实现文章的 demo</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>提供方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewInject</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bind</span><span class=\"params\">(Activity activity)</span> </span>&#123;<span class=\"comment\">//绑定</span></div><div class=\"line\">        injectContentView(activity);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectContentView</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        Class&lt;? extends Activity&gt; clazz = activity.getClass();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ContentInjector injector = (ContentInjector) Class.forName(clazz.getName()</div><div class=\"line\">                    + <span class=\"string\">\"$$ViewBinder\"</span>).newInstance();</div><div class=\"line\">            injector.injectContent(activity, activity);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码为简单使用，butterknife 中的 UnBinder 解绑，使用 Map 缓存等暂不考虑。<br>此处的 Class.forName(“”) 以及 class.newInstance() 会对性能略有影响，butterknife 在此进行了 map 缓存优化。</p>\n<p>3、自定义 AbstractProcessor，此处需将 module 设置为 Java library 才可继承 AbstractProcessor。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@AutoService</span>(Processor.class)</div><div class=\"line\"><span class=\"meta\">@SupportedSourceVersion</span>(value = SourceVersion.RELEASE_7)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewInjectProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">true<span class=\"comment\">//可用 @SupportedAnnotationTypes(\"com.lauzy.ContentView\") 注解 ContentViewInjectProcessor 代替</span></div><div class=\"line\">true<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getSupportedAnnotationTypes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Set&lt;String&gt; supportTypes = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;();</div><div class=\"line\">        supportTypes.add(ContentView.class.getCanonicalName());</div><div class=\"line\">        <span class=\"keyword\">return</span> supportTypes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</div><div class=\"line\">        String packageName;</div><div class=\"line\">        String className;</div><div class=\"line\">        <span class=\"comment\">//遍历每个被 ContentView 修饰的 class 文件</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Element element : roundEnvironment.getElementsAnnotatedWith(ContentView.class)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (element.getKind() == ElementKind.CLASS) &#123;</div><div class=\"line\">                TypeElement typeElement = (TypeElement) element;</div><div class=\"line\">                PackageElement packageEle = (PackageElement) element.getEnclosingElement();</div><div class=\"line\">                packageName = packageEle.getQualifiedName().toString();<span class=\"comment\">//获取包名</span></div><div class=\"line\">                <span class=\"comment\">//因为是 ElementKind.CLASS 类型，所以可以直接强制转换，获取类名</span></div><div class=\"line\">                className = typeElement.getSimpleName().toString();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">int</span> layoutId = typeElement.getAnnotation(ContentView.class).value();<span class=\"comment\">//获取注解的 id</span></div><div class=\"line\">truetruetruetrue</div><div class=\"line\">truetruetruetrue<span class=\"comment\">//拼接 Jav a类的字符串</span></div><div class=\"line\">                StringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">                builder.append(<span class=\"string\">\"package \"</span>).append(packageName).append(<span class=\"string\">\";\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"import android.view.View;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"import android.app.Activity;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"import com.freedom.lauzy.inject.ContentInjector;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">'\\n'</span>);</div><div class=\"line\"></div><div class=\"line\">                builder.append(<span class=\"string\">\"public class \"</span>).append(className + <span class=\"string\">\"$$ViewBinder\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"&lt;T extends \"</span>).append(className).append(<span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\" implements ContentInjector&lt;T&gt;\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\" &#123;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"@Override\\n\"</span>)</div><div class=\"line\">                        .append(<span class=\"string\">\"public void injectContent(final T source, Activity activity) &#123;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"    ((Activity) source).setContentView(\"</span> + layoutId);</div><div class=\"line\">                builder.append(<span class=\"string\">\");\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"&#125;\\n\\n&#125;\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">truetruetruetrue<span class=\"comment\">//写入 Java 文件</span></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(</div><div class=\"line\">                            packageName + <span class=\"string\">\".\"</span> + className + <span class=\"string\">\"$$ViewBinder\"</span>,</div><div class=\"line\">                            typeElement);</div><div class=\"line\">                    Writer writer = fileObject.openWriter();</div><div class=\"line\">                    writer.write(builder.toString());</div><div class=\"line\">                    writer.flush();</div><div class=\"line\">                    writer.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"error\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>butterknife 中使用了 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"external\">javapoet</a> 生成 Java 代码文件</p>\n<p>此 module 的 gradle 配置如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">apply plugin: <span class=\"string\">'java'</span></div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(include: [<span class=\"string\">'*.jar'</span>], dir: <span class=\"string\">'libs'</span>)</span></span></div><div class=\"line\">    compile 'com.google.auto.service:auto-service:1.0-rc2' <span class=\"comment\">// google 的生成源代码库</span></div><div class=\"line\">    compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':annotation'</span>)</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">sourceCompatibility = <span class=\"string\">\"1.7\"</span></div><div class=\"line\">targetCompatibility = <span class=\"string\">\"1.7\"</span></div></pre></td></tr></table></figure></p>\n<p>4、app 使用</p>\n<p>app 的 gradle 配置如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">true...</div><div class=\"line\">    <span class=\"function\">annotationProcessor <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':compiler'</span>)</span></span></div><div class=\"line\">    compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':annotation'</span>)</span></div><div class=\"line\">    compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':inject'</span>)</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>activity 中使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activity_ioc)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        ContentViewInject.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个<br>IocActivity$$ViewBinder 的 Java 文件，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.lauzy.freedom.lauzycode.IOC;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> com.freedom.lauzy.inject.ContentInjector;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocActivity</span>$$<span class=\"title\">ViewBinder</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">IocActivity</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">ContentInjector</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">injectContent</span><span class=\"params\">(<span class=\"keyword\">final</span> T source, Activity activity)</span> </span>&#123;</div><div class=\"line\">    ((Activity) source).setContentView(<span class=\"number\">2130968606</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。</p>\n<p>注意事项：</p>\n<p>1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。<br>需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，<br>文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。</p>\n<p>如下图所示：<br><img src=\"http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png\"></p>\n<p>2、本文使用 annotationProcessor 的注解处理器代替 <a href=\"https://bitbucket.org/hvisser/android-apt\" target=\"_blank\" rel=\"external\">android-apt</a> ，Google 内置的注解处理器，建议使用。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>编译时注解的优点 ：在于对性能影响很小的情况下，大量简化程序员的代码，像 butterknife 在首次查找类的时候对性能稍有影响，其他情况下影响微乎其微。<br>编译时注解的缺点 ：build 过程生成更多的代码，增加了类和方法的数量；对性能影响很小，但是多少会有的。</p>\n<p>本人认为编译时注解在优化代码，提高效率方面是有很大优势的，远远大于其缺点。</p>\n<p>本篇文章主要是分析及梳理大致的实现方式，仅为学习使用，所有代码均托管在 <a href=\"https://github.com/Lauzy/LauzyCode\" target=\"_blank\" rel=\"external\">我的Github</a> 上。</p>\n","excerpt":"","more":"<p>在项目开发中，大部分 Android 开发者都使用过 ButterKnife 这个通过注解简化代码的框架。部分 Android 开发者也使用过 xUtils 这种快速开发的框架。<br>两者均使用到了注解。在上一篇 <a href=\"http://lauzy.me/2017/05/09/201706IOC1/\">Java注解、反射，安卓IOC（一）</a> 中我们知道了注解及反射的用法。本篇会分别介绍下其实现机制。</p>\n<h2 id=\"运行时注解\"><a href=\"#运行时注解\" class=\"headerlink\" title=\"运行时注解\"></a>运行时注解</h2><p>首先我们自己简单实现类似 xUtils 这种运行时注解框架。</p>\n<h3 id=\"绑定-View-控件\"><a href=\"#绑定-View-控件\" class=\"headerlink\" title=\"绑定 View 控件\"></a>绑定 View 控件</h3><p>创建注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)<span class=\"comment\">//运行时注解</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)<span class=\"comment\">//Target为属性</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FindView &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> -1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>View解析代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewInject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bind</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        inject(<span class=\"keyword\">new</span> ViewFinder(activity), activity);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bind</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        inject(<span class=\"keyword\">new</span> ViewFinder(view), view);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bind</span><span class=\"params\">(View view, Object obj)</span> </span>&#123;</div><div class=\"line\">        inject(<span class=\"keyword\">new</span> ViewFinder(view), obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(ViewFinder finder, Object obj)</span> </span>&#123;</div><div class=\"line\">        injectFields(finder, obj);</div><div class=\"line\">        injectMethods(finder, obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectFields</span><span class=\"params\">(ViewFinder finder, Object obj)</span> </span>&#123;</div><div class=\"line\">        Class&lt;?&gt; clazz = obj.getClass();</div><div class=\"line\">        Field[] fields = clazz.getDeclaredFields();<span class=\"comment\">//获取所有变量</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (field.isAnnotationPresent(FindView.class)) &#123;</div><div class=\"line\">                FindView findView = field.getAnnotation(FindView.class);<span class=\"comment\">//获取注解</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (findView.value() &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The id can't be -1.\"</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    View view = finder.findViewById(findView.value());</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        field.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//破坏封装</span></div><div class=\"line\">                        field.set(obj, view); <span class=\"comment\">//设置属性</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的 ID 赋值给指定方法并调用。</p>\n<h3 id=\"绑定-OnClick-事件\"><a href=\"#绑定-OnClick-事件\" class=\"headerlink\" title=\"绑定 OnClick 事件\"></a>绑定 OnClick 事件</h3><p>创建注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD) <span class=\"comment\">//Target为方法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> OnClick &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] id();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>OnClick 事件注入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectMethods</span><span class=\"params\">(ViewFinder finder, <span class=\"keyword\">final</span> Object obj)</span> </span>&#123;</div><div class=\"line\">    Method[] methods = obj.getClass().getDeclaredMethods();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> Method method : methods) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (method.isAnnotationPresent(OnClick.class)) &#123;</div><div class=\"line\">            OnClick onClick = method.getAnnotation(OnClick.class);</div><div class=\"line\">            <span class=\"keyword\">if</span> (onClick.id().length != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : onClick.id()) &#123;</div><div class=\"line\">                    View view = finder.findViewById(i);</div><div class=\"line\">                    method.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">                    view.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                method.invoke(obj, v);</div><div class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">                                e.printStackTrace();</div><div class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">                                e.printStackTrace();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的 ID ，将注解的 ID 赋值给 findViewById 方法，然后在 setOnClickListener 调用 method 方法。</p>\n<p>在 Activity 中的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@FindView</span>(R.id.txt_ioc_test)</div><div class=\"line\">    <span class=\"keyword\">private</span> TextView mTxtTest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_ioc);</div><div class=\"line\">        ViewInject.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">        mTxtTest.setText(<span class=\"string\">\"测试\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@OnClick</span>(id = &#123;R.id.btn_ioc_test, R.id.btn_ioc_test2&#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.btn_ioc_test:</div><div class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Click1\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.btn_ioc_test2:</div><div class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Click2\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为运行时注解的简单实现，即 xUtils 使用的注解方法。但是这种方法因为通过一系列反射获取属性、方法等，对性能会有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。</p>\n<h2 id=\"编译时注解\"><a href=\"#编译时注解\" class=\"headerlink\" title=\"编译时注解\"></a>编译时注解</h2><p>ButterKnife 源码解析网上已经有很多不错的文章了，例如这篇 <a href=\"http://www.jianshu.com/p/0f3f4f7ca505\">ButterKnife源码分析</a> 讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在 Android Studio 中的使用。</p>\n<p>首先介绍下大概的项目结构，如下图所示：</p>\n<p><img src = \"http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png\"/></p>\n<ul>\n<li>annotation module: Java library  - 定义一系列注解。</li>\n<li>injetc module: Android library  - 定义注解的接口及调用方法。</li>\n<li>compiler module: Java library  - 自定义编译时注解 AbstractProcessor 在编译期间生成 java 代码。</li>\n<li>app: 使用方法。</li>\n</ul>\n<p>本篇文章主要为介绍及学习，所以此处仅实现 setContentView 的编译时注解。</p>\n<p>1、声明注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.CLASS) <span class=\"comment\">//编译时注解</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE) <span class=\"comment\">//修饰类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ContentView &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、声明外界接口及方法</p>\n<p>声明接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ContentInjector</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">injectContent</span><span class=\"params\">(T obj, Activity activity)</span></span>; <span class=\"comment\">//此处仅用 Activity 参数即可实现文章的 demo</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>提供方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewInject</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bind</span><span class=\"params\">(Activity activity)</span> </span>&#123;<span class=\"comment\">//绑定</span></div><div class=\"line\">        injectContentView(activity);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectContentView</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        Class&lt;? extends Activity&gt; clazz = activity.getClass();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ContentInjector injector = (ContentInjector) Class.forName(clazz.getName()</div><div class=\"line\">                    + <span class=\"string\">\"$$ViewBinder\"</span>).newInstance();</div><div class=\"line\">            injector.injectContent(activity, activity);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码为简单使用，butterknife 中的 UnBinder 解绑，使用 Map 缓存等暂不考虑。<br>此处的 Class.forName(“”) 以及 class.newInstance() 会对性能略有影响，butterknife 在此进行了 map 缓存优化。</p>\n<p>3、自定义 AbstractProcessor，此处需将 module 设置为 Java library 才可继承 AbstractProcessor。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@AutoService</span>(Processor.class)</div><div class=\"line\"><span class=\"meta\">@SupportedSourceVersion</span>(value = SourceVersion.RELEASE_7)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewInjectProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">true<span class=\"comment\">//可用 @SupportedAnnotationTypes(\"com.lauzy.ContentView\") 注解 ContentViewInjectProcessor 代替</span></div><div class=\"line\">true<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getSupportedAnnotationTypes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Set&lt;String&gt; supportTypes = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;();</div><div class=\"line\">        supportTypes.add(ContentView.class.getCanonicalName());</div><div class=\"line\">        <span class=\"keyword\">return</span> supportTypes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</div><div class=\"line\">        String packageName;</div><div class=\"line\">        String className;</div><div class=\"line\">        <span class=\"comment\">//遍历每个被 ContentView 修饰的 class 文件</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Element element : roundEnvironment.getElementsAnnotatedWith(ContentView.class)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (element.getKind() == ElementKind.CLASS) &#123;</div><div class=\"line\">                TypeElement typeElement = (TypeElement) element;</div><div class=\"line\">                PackageElement packageEle = (PackageElement) element.getEnclosingElement();</div><div class=\"line\">                packageName = packageEle.getQualifiedName().toString();<span class=\"comment\">//获取包名</span></div><div class=\"line\">                <span class=\"comment\">//因为是 ElementKind.CLASS 类型，所以可以直接强制转换，获取类名</span></div><div class=\"line\">                className = typeElement.getSimpleName().toString();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">int</span> layoutId = typeElement.getAnnotation(ContentView.class).value();<span class=\"comment\">//获取注解的 id</span></div><div class=\"line\">truetruetruetrue</div><div class=\"line\">truetruetruetrue<span class=\"comment\">//拼接 Jav a类的字符串</span></div><div class=\"line\">                StringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">                builder.append(<span class=\"string\">\"package \"</span>).append(packageName).append(<span class=\"string\">\";\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"import android.view.View;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"import android.app.Activity;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"import com.freedom.lauzy.inject.ContentInjector;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">'\\n'</span>);</div><div class=\"line\"></div><div class=\"line\">                builder.append(<span class=\"string\">\"public class \"</span>).append(className + <span class=\"string\">\"$$ViewBinder\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"&lt;T extends \"</span>).append(className).append(<span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\" implements ContentInjector&lt;T&gt;\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\" &#123;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"@Override\\n\"</span>)</div><div class=\"line\">                        .append(<span class=\"string\">\"public void injectContent(final T source, Activity activity) &#123;\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"    ((Activity) source).setContentView(\"</span> + layoutId);</div><div class=\"line\">                builder.append(<span class=\"string\">\");\\n\"</span>);</div><div class=\"line\">                builder.append(<span class=\"string\">\"&#125;\\n\\n&#125;\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">truetruetruetrue<span class=\"comment\">//写入 Java 文件</span></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(</div><div class=\"line\">                            packageName + <span class=\"string\">\".\"</span> + className + <span class=\"string\">\"$$ViewBinder\"</span>,</div><div class=\"line\">                            typeElement);</div><div class=\"line\">                    Writer writer = fileObject.openWriter();</div><div class=\"line\">                    writer.write(builder.toString());</div><div class=\"line\">                    writer.flush();</div><div class=\"line\">                    writer.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"error\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>butterknife 中使用了 <a href=\"https://github.com/square/javapoet\">javapoet</a> 生成 Java 代码文件</p>\n<p>此 module 的 gradle 配置如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">apply plugin: <span class=\"string\">'java'</span></div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(include: [<span class=\"string\">'*.jar'</span>], dir: <span class=\"string\">'libs'</span>)</span></div><div class=\"line\">    compile 'com.google.auto.service:auto-service:1.0-rc2' <span class=\"comment\">// google 的生成源代码库</span></div><div class=\"line\">    compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':annotation'</span>)</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">sourceCompatibility </span>= <span class=\"string\">\"1.7\"</span></div><div class=\"line\">targetCompatibility = <span class=\"string\">\"1.7\"</span></div></pre></td></tr></table></figure></p>\n<p>4、app 使用</p>\n<p>app 的 gradle 配置如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">true...</div><div class=\"line\">    <span class=\"function\">annotationProcessor <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':compiler'</span>)</span></div><div class=\"line\">    compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':annotation'</span>)</span></div><div class=\"line\">    compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':inject'</span>)</span></div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>activity 中使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activity_ioc)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        ContentViewInject.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个<br>IocActivity$$ViewBinder 的 Java 文件，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.lauzy.freedom.lauzycode.IOC;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> com.freedom.lauzy.inject.ContentInjector;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocActivity</span>$$<span class=\"title\">ViewBinder</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">IocActivity</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">ContentInjector</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">injectContent</span><span class=\"params\">(<span class=\"keyword\">final</span> T source, Activity activity)</span> </span>&#123;</div><div class=\"line\">    ((Activity) source).setContentView(<span class=\"number\">2130968606</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。</p>\n<p>注意事项：</p>\n<p>1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。<br>需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，<br>文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。</p>\n<p>如下图所示：<br><img src = \"http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png\"/></p>\n<p>2、本文使用 annotationProcessor 的注解处理器代替 <a href=\"https://bitbucket.org/hvisser/android-apt\">android-apt</a> ，Google 内置的注解处理器，建议使用。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>编译时注解的优点 ：在于对性能影响很小的情况下，大量简化程序员的代码，像 butterknife 在首次查找类的时候对性能稍有影响，其他情况下影响微乎其微。<br>编译时注解的缺点 ：build 过程生成更多的代码，增加了类和方法的数量；对性能影响很小，但是多少会有的。</p>\n<p>本人认为编译时注解在优化代码，提高效率方面是有很大优势的，远远大于其缺点。</p>\n<p>本篇文章主要是分析及梳理大致的实现方式，仅为学习使用，所有代码均托管在 <a href=\"https://github.com/Lauzy/LauzyCode\">我的Github</a> 上。</p>\n"},{"title":"Java注解、反射，安卓IOC（一）","date":"2017-05-09T14:43:44.000Z","_content":"\n\n## Java 注解 (Annotation)\n\nJava 注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation 可用于修饰包、类、构造器、方法、变量等。\n\n<!--more-->\n\n### Annotation 类型\n\n此处来一张网上的图 (可在新标签页中放大查看)\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg\" width = \"710\" height = \"670\" alt=\"注解大全\"/>\n\n转自[深入理解Java：注解(Annotation)](http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html)\n\n#### 基本 Annotation\n\nJava中5个基本的注解分别为：\n- @Override  ————  用来限定子类重写父类的方法。\n- @Deprecated  ————  标记已经过时的方法。\n- @SuppressWarnings  ————  抑制编译器的警告。\n- @SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。\n- @FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。\n\n#### 元 Annotation\n\n元Annotation是用来修饰其他注解定义，即注解其他注解。\nJava中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。\n\n1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。\n\n```java \n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Retention {\n    RetentionPolicy value();\n}\n```\n- RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。\n- RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。\n- RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。\n\n2、@Target：指定被修饰的注解能用于哪些程序元素。\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Target {\n    ElementType[] value();\n}\n```\n\n- ElementType.ANNOTATION_TYPE: 修饰Annotation。\n- ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。\n- ElementType.FIELD: 修饰成员变量。\n- ElementType.METHOD: 修饰方法定义。\n- ElementType.PARAMETER: 修饰参数定义。\n- ElementType.CONSTRUCTOR: 修饰构造方法。\n- ElementType.LOCAL_VARIABLE: 修饰局部变量。\n- ElementType.PACKAGE: 修饰包定义。\n\n在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注\n- ElementType.TYPE_PARAMETER:  类型变量\n- ElementType.TYPE_USE:  使用类型的任何语句\n\nTYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：\n\n```java\n@Target(ElementType.TYPE_PARAMETER)\npublic @interface Animal{}\n\npublic class Zoo<@Animal T>{\n\t...\n}\n```\n\nTYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：\n\n```java\n\n定义：\n@Target(ElementType.TYPE_USE)\npublic interface UseTest{}\n\n使用：\n@UseTest String content; 修饰类型，\n此种写法相当于java.lang.@UseTest String content; \n若@UseTest java.lang.String content; 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。\n\nString content = (@UseTest String) obj; //类型转换\nList<@UseTest String> infos = new ArrayList<>();  //泛型\nimplements @UseTest XXXX;  //实现接口\nthrows @UseTest NullPointException;  //声明抛出异常\n\n```\n\n3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。\n\n4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。\n\n5、@Repeatable：重复注解，Java8的新特性。\n\n在Java8之前，重复注解的解决方案代码如下：\n\n```java \n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Student{\n\tString name();\n}\n\n定义一个容器注解：\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Students{\n\tStudent[] value();\n}\n\n使用：\n@Students({@Student(name = \"Jack\"), @Student(name = \"Will\")})\npublic class StudentTest{\n\t......\n}\n\n```\n\n在Java8中的方案则如下：\n\n```java\n//定义如上的容器注解Students，添加Repeatable注解，如下所示\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Repeatable(Students.class)\npublic @interface Student{\n\tString name();\n}\n\n使用：\n@Student(name = \"Jack\")\n@Student(name = \"Will\")\npublic class StudentTest{\n\t......\n}\n```\n\n## Java 反射简介\n\n通过Java反射可以获取对象的属性、方法等。\n\n1、获取类\n\n```java\n\n//第一种方式\nClass stuClazz1 = Class.forName(\"com.lauzy.freedom.ReflectDemo.Student\");\n\t\n//第二种方式\nClass stuClazz2 = Student.class;\n    \n//第三种方式\nStudent stu3 = new Student();\nClass stuClazz3 = stu3.getClass();\n\n```\n2、创建对象\n\n```java\n\nClass stuClazz2 = Student.class;\nObject stu = stuClazz2.newInstance();\n\t\n```\n\n3、获取属性例子\n\n```java\n\nObject stu = stuClazz2.newInstance();   //获取实例\nField age = stuClazz2.getDeclaredField(\"age\");  //获取特定属性\nage.setAccessible(true);    //打破封装性\nage.set(stu, 25);   //设置属性\n\n```\n\n4、方法总结\n\n- getDeclaredFields(): 获取所有属性。\n- getDeclaredField(\"***\"): 获取特定的属性。\n- getModifiers(): 获取属性或方法的修饰符。\n- getType(): 获取属性或方法的类型名。\n- getDeclaredMethods()：获取所有方法。\n- getReturnType()：获取方法的返回类型。\n- getParameterTypes()：获取方法的参数类型。\n- getDeclaredMethod(\"***\",参数类型.class,……): 获取特定的方法。\n- getDeclaredConstructors(): 获取所有的构造方法。\n- getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。\n- getSuperclass()：获取继承的父类。\n- getInterfaces()：获取实现的所有接口。\n- field.set(Object object, Object value);//设置object对象的value属性\n- method.invoke(Object object, Object... values); //调用方法，values为方法的参数\n\n5、代码实例\n\n```java\n\ntry {\n    Class stuClazz1 = Class.forName(\"com.lauzy.freedom.ReflectDemo.Student\");\n    Class stuClazz2 = Student.class;\n    Student stu3 = new Student();\n    Class stuClazz3 = stu3.getClass();\n\tfor (Field field : stuClazz1.getDeclaredFields()) {\n        System.out.println(Modifier.toString(field.getModifiers())  //获取属性修饰符\n                + \"-\" + field.getType().getSimpleName()     //获取属性类型名\n                + \"-\" + field.getName());  //获取属性名\n    }\n    System.out.println(\"--------\");\n    for (Method method : stuClazz2.getDeclaredMethods()) {\n        System.out.println(Modifier.toString(method.getModifiers())  //获取方法修饰符\n                + \"-\" + method.getReturnType().toString()   //方法返回类型名\n                + \"-\" + method.getName());  //方法名\n    }\n    System.out.println(\"--------\");\n    System.out.println(stuClazz2.getDeclaredConstructor(String.class, String.class, int.class).toString());\n    System.out.println(\"--------\");\n    System.out.println(stuClazz2.getSuperclass().getName().toString());\n    System.out.println(\"--------\");\n    for (Class aClass : stuClazz2.getInterfaces()) {\n        System.out.println(aClass.getName());\n    }\n    System.out.println(\"--------\");\n    Object stu = stuClazz2.newInstance();   //获取实例\n    Field name = stuClazz2.getDeclaredField(\"name\");  //获取特定属性\n    name.setAccessible(true);    //打破封装性\n    name.set(stu, \"Jack\");   //设置属性\n    System.out.println(name.get(stu));\n\n    Method profile = stuClazz2.getDeclaredMethod(\"getProfile\", String.class, int.class);//特定方法\n    profile.setAccessible(true);\n    profile.invoke(stu, \"male\", 30);//调用方法\n} catch (Exception e) {\n    e.printStackTrace();\n}\n\n```\n\n输出结果：\n\n```java\n\nprivate-String-name\npublic-String-gender\nprivate-int-age\n--------\npublic-class java.lang.String-getName\npublic-void-setName\nprivate-void-getProfile\npublic-int-getAge\npublic-void-setAge\n--------\npublic com.lauzy.freedom.ReflectDemo.Student(java.lang.String,java.lang.String,int)\n--------\ncom.lauzy.freedom.AnnotationDemo.Person\n--------\njava.io.Serializable\n--------\nJack\nName : Jack ; Gender : male ; Age : 30\n\n```\n\n## 自定义注解、反射获取属性\n\n分别定义Name、Gender和SaveMoney注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\n@interface Name {\n    String value() default \"Will\";\n}\n\n```\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface Gender {\n    String value() default \"\";\n}\n\n```\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface SaveMoney {\n\n    int money() default 10000;\n\n    int term() default 1;\n\n    String platform() default \"XXX\";\n}\n\n```\n\n注解的使用：\n\n```java\n\npublic class Person {\n    @Name(value = \"Jack\")\n    @Gender(value = \"man\")\n    public String name;\n\n    @SaveMoney(money = 20000, term = 5, platform = \"ChinaBank\")\n    public void saveMoney(int money) {\n        System.out.println(\"and then he spent \" + money  + \" on clothes.\");\n    }\n}\n\n```\n\n利用反射获取注解的属性和方法：\n\n```java\n\npublic class AnnUtils {\n    public static void test(Class<?> clazz) {\n\n        for (Field field : clazz.getFields()) {\n            if (field.isAnnotationPresent(Name.class) && field.isAnnotationPresent(Gender.class)) {\n                Name name = field.getAnnotation(Name.class);\n                Gender gender = field.getAnnotation(Gender.class);\n                System.out.print(\"A \" + gender.value() + \" called \" + name.value());\n            }\n        }\n\n        try {\n            Class<Person> personClass = Person.class;\n            Method[] methods = personClass.getMethods();\n            for (Method method : methods) {\n                if (method.isAnnotationPresent(SaveMoney.class)) {\n                    SaveMoney saveMoney = method.getAnnotation(SaveMoney.class);\n                    System.out.print(\" deposited \" + saveMoney.money() + \"RMB to \" +\n                            saveMoney.platform() + \" for \" + saveMoney.term() + \" months, \");\n\n                    method.invoke(personClass.newInstance(), 1000);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n执行 \n\n```java\nAnnUtils.test(Person.class);\n```\n\n此时的输出结果为：\n\n```java\nA man named Jack deposited 20000RMB to ChinaBank for 5 months, and then he spent 1000 on clothes.\n```\n\n此篇博客为基础用法及实例，下一篇[Java注解、反射，安卓IOC（二）](http://lauzy.me/2017/05/09/201706IOC2/)会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。\n","source":"_posts/201706IOC1.md","raw":"---\ntitle: Java注解、反射，安卓IOC（一）\ndate: 2017-05-09 22:43:44\ntags: \n\t- Android 解析\n---\n\n\n## Java 注解 (Annotation)\n\nJava 注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation 可用于修饰包、类、构造器、方法、变量等。\n\n<!--more-->\n\n### Annotation 类型\n\n此处来一张网上的图 (可在新标签页中放大查看)\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg\" width = \"710\" height = \"670\" alt=\"注解大全\"/>\n\n转自[深入理解Java：注解(Annotation)](http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html)\n\n#### 基本 Annotation\n\nJava中5个基本的注解分别为：\n- @Override  ————  用来限定子类重写父类的方法。\n- @Deprecated  ————  标记已经过时的方法。\n- @SuppressWarnings  ————  抑制编译器的警告。\n- @SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。\n- @FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。\n\n#### 元 Annotation\n\n元Annotation是用来修饰其他注解定义，即注解其他注解。\nJava中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。\n\n1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。\n\n```java \n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Retention {\n    RetentionPolicy value();\n}\n```\n- RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。\n- RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。\n- RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。\n\n2、@Target：指定被修饰的注解能用于哪些程序元素。\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Target {\n    ElementType[] value();\n}\n```\n\n- ElementType.ANNOTATION_TYPE: 修饰Annotation。\n- ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。\n- ElementType.FIELD: 修饰成员变量。\n- ElementType.METHOD: 修饰方法定义。\n- ElementType.PARAMETER: 修饰参数定义。\n- ElementType.CONSTRUCTOR: 修饰构造方法。\n- ElementType.LOCAL_VARIABLE: 修饰局部变量。\n- ElementType.PACKAGE: 修饰包定义。\n\n在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注\n- ElementType.TYPE_PARAMETER:  类型变量\n- ElementType.TYPE_USE:  使用类型的任何语句\n\nTYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：\n\n```java\n@Target(ElementType.TYPE_PARAMETER)\npublic @interface Animal{}\n\npublic class Zoo<@Animal T>{\n\t...\n}\n```\n\nTYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：\n\n```java\n\n定义：\n@Target(ElementType.TYPE_USE)\npublic interface UseTest{}\n\n使用：\n@UseTest String content; 修饰类型，\n此种写法相当于java.lang.@UseTest String content; \n若@UseTest java.lang.String content; 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。\n\nString content = (@UseTest String) obj; //类型转换\nList<@UseTest String> infos = new ArrayList<>();  //泛型\nimplements @UseTest XXXX;  //实现接口\nthrows @UseTest NullPointException;  //声明抛出异常\n\n```\n\n3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。\n\n4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。\n\n5、@Repeatable：重复注解，Java8的新特性。\n\n在Java8之前，重复注解的解决方案代码如下：\n\n```java \n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Student{\n\tString name();\n}\n\n定义一个容器注解：\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Students{\n\tStudent[] value();\n}\n\n使用：\n@Students({@Student(name = \"Jack\"), @Student(name = \"Will\")})\npublic class StudentTest{\n\t......\n}\n\n```\n\n在Java8中的方案则如下：\n\n```java\n//定义如上的容器注解Students，添加Repeatable注解，如下所示\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Repeatable(Students.class)\npublic @interface Student{\n\tString name();\n}\n\n使用：\n@Student(name = \"Jack\")\n@Student(name = \"Will\")\npublic class StudentTest{\n\t......\n}\n```\n\n## Java 反射简介\n\n通过Java反射可以获取对象的属性、方法等。\n\n1、获取类\n\n```java\n\n//第一种方式\nClass stuClazz1 = Class.forName(\"com.lauzy.freedom.ReflectDemo.Student\");\n\t\n//第二种方式\nClass stuClazz2 = Student.class;\n    \n//第三种方式\nStudent stu3 = new Student();\nClass stuClazz3 = stu3.getClass();\n\n```\n2、创建对象\n\n```java\n\nClass stuClazz2 = Student.class;\nObject stu = stuClazz2.newInstance();\n\t\n```\n\n3、获取属性例子\n\n```java\n\nObject stu = stuClazz2.newInstance();   //获取实例\nField age = stuClazz2.getDeclaredField(\"age\");  //获取特定属性\nage.setAccessible(true);    //打破封装性\nage.set(stu, 25);   //设置属性\n\n```\n\n4、方法总结\n\n- getDeclaredFields(): 获取所有属性。\n- getDeclaredField(\"***\"): 获取特定的属性。\n- getModifiers(): 获取属性或方法的修饰符。\n- getType(): 获取属性或方法的类型名。\n- getDeclaredMethods()：获取所有方法。\n- getReturnType()：获取方法的返回类型。\n- getParameterTypes()：获取方法的参数类型。\n- getDeclaredMethod(\"***\",参数类型.class,……): 获取特定的方法。\n- getDeclaredConstructors(): 获取所有的构造方法。\n- getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。\n- getSuperclass()：获取继承的父类。\n- getInterfaces()：获取实现的所有接口。\n- field.set(Object object, Object value);//设置object对象的value属性\n- method.invoke(Object object, Object... values); //调用方法，values为方法的参数\n\n5、代码实例\n\n```java\n\ntry {\n    Class stuClazz1 = Class.forName(\"com.lauzy.freedom.ReflectDemo.Student\");\n    Class stuClazz2 = Student.class;\n    Student stu3 = new Student();\n    Class stuClazz3 = stu3.getClass();\n\tfor (Field field : stuClazz1.getDeclaredFields()) {\n        System.out.println(Modifier.toString(field.getModifiers())  //获取属性修饰符\n                + \"-\" + field.getType().getSimpleName()     //获取属性类型名\n                + \"-\" + field.getName());  //获取属性名\n    }\n    System.out.println(\"--------\");\n    for (Method method : stuClazz2.getDeclaredMethods()) {\n        System.out.println(Modifier.toString(method.getModifiers())  //获取方法修饰符\n                + \"-\" + method.getReturnType().toString()   //方法返回类型名\n                + \"-\" + method.getName());  //方法名\n    }\n    System.out.println(\"--------\");\n    System.out.println(stuClazz2.getDeclaredConstructor(String.class, String.class, int.class).toString());\n    System.out.println(\"--------\");\n    System.out.println(stuClazz2.getSuperclass().getName().toString());\n    System.out.println(\"--------\");\n    for (Class aClass : stuClazz2.getInterfaces()) {\n        System.out.println(aClass.getName());\n    }\n    System.out.println(\"--------\");\n    Object stu = stuClazz2.newInstance();   //获取实例\n    Field name = stuClazz2.getDeclaredField(\"name\");  //获取特定属性\n    name.setAccessible(true);    //打破封装性\n    name.set(stu, \"Jack\");   //设置属性\n    System.out.println(name.get(stu));\n\n    Method profile = stuClazz2.getDeclaredMethod(\"getProfile\", String.class, int.class);//特定方法\n    profile.setAccessible(true);\n    profile.invoke(stu, \"male\", 30);//调用方法\n} catch (Exception e) {\n    e.printStackTrace();\n}\n\n```\n\n输出结果：\n\n```java\n\nprivate-String-name\npublic-String-gender\nprivate-int-age\n--------\npublic-class java.lang.String-getName\npublic-void-setName\nprivate-void-getProfile\npublic-int-getAge\npublic-void-setAge\n--------\npublic com.lauzy.freedom.ReflectDemo.Student(java.lang.String,java.lang.String,int)\n--------\ncom.lauzy.freedom.AnnotationDemo.Person\n--------\njava.io.Serializable\n--------\nJack\nName : Jack ; Gender : male ; Age : 30\n\n```\n\n## 自定义注解、反射获取属性\n\n分别定义Name、Gender和SaveMoney注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\n@interface Name {\n    String value() default \"Will\";\n}\n\n```\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface Gender {\n    String value() default \"\";\n}\n\n```\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface SaveMoney {\n\n    int money() default 10000;\n\n    int term() default 1;\n\n    String platform() default \"XXX\";\n}\n\n```\n\n注解的使用：\n\n```java\n\npublic class Person {\n    @Name(value = \"Jack\")\n    @Gender(value = \"man\")\n    public String name;\n\n    @SaveMoney(money = 20000, term = 5, platform = \"ChinaBank\")\n    public void saveMoney(int money) {\n        System.out.println(\"and then he spent \" + money  + \" on clothes.\");\n    }\n}\n\n```\n\n利用反射获取注解的属性和方法：\n\n```java\n\npublic class AnnUtils {\n    public static void test(Class<?> clazz) {\n\n        for (Field field : clazz.getFields()) {\n            if (field.isAnnotationPresent(Name.class) && field.isAnnotationPresent(Gender.class)) {\n                Name name = field.getAnnotation(Name.class);\n                Gender gender = field.getAnnotation(Gender.class);\n                System.out.print(\"A \" + gender.value() + \" called \" + name.value());\n            }\n        }\n\n        try {\n            Class<Person> personClass = Person.class;\n            Method[] methods = personClass.getMethods();\n            for (Method method : methods) {\n                if (method.isAnnotationPresent(SaveMoney.class)) {\n                    SaveMoney saveMoney = method.getAnnotation(SaveMoney.class);\n                    System.out.print(\" deposited \" + saveMoney.money() + \"RMB to \" +\n                            saveMoney.platform() + \" for \" + saveMoney.term() + \" months, \");\n\n                    method.invoke(personClass.newInstance(), 1000);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n执行 \n\n```java\nAnnUtils.test(Person.class);\n```\n\n此时的输出结果为：\n\n```java\nA man named Jack deposited 20000RMB to ChinaBank for 5 months, and then he spent 1000 on clothes.\n```\n\n此篇博客为基础用法及实例，下一篇[Java注解、反射，安卓IOC（二）](http://lauzy.me/2017/05/09/201706IOC2/)会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。\n","slug":"201706IOC1","published":1,"updated":"2017-08-15T07:15:50.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6d981360006ho9zybnpukjd","content":"<h2 id=\"Java-注解-Annotation\"><a href=\"#Java-注解-Annotation\" class=\"headerlink\" title=\"Java 注解 (Annotation)\"></a>Java 注解 (Annotation)</h2><p>Java 注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation 可用于修饰包、类、构造器、方法、变量等。</p>\n<a id=\"more\"></a>\n<h3 id=\"Annotation-类型\"><a href=\"#Annotation-类型\" class=\"headerlink\" title=\"Annotation 类型\"></a>Annotation 类型</h3><p>此处来一张网上的图 (可在新标签页中放大查看)</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg\" width=\"710\" height=\"670\" alt=\"注解大全\"></p>\n<p>转自<a href=\"http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html\" target=\"_blank\" rel=\"external\">深入理解Java：注解(Annotation)</a></p>\n<h4 id=\"基本-Annotation\"><a href=\"#基本-Annotation\" class=\"headerlink\" title=\"基本 Annotation\"></a>基本 Annotation</h4><p>Java中5个基本的注解分别为：</p>\n<ul>\n<li>@Override  ————  用来限定子类重写父类的方法。</li>\n<li>@Deprecated  ————  标记已经过时的方法。</li>\n<li>@SuppressWarnings  ————  抑制编译器的警告。</li>\n<li>@SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。</li>\n<li>@FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。</li>\n</ul>\n<h4 id=\"元-Annotation\"><a href=\"#元-Annotation\" class=\"headerlink\" title=\"元 Annotation\"></a>元 Annotation</h4><p>元Annotation是用来修饰其他注解定义，即注解其他注解。<br>Java中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。</p>\n<p>1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Retention &#123;</div><div class=\"line\">    <span class=\"function\">RetentionPolicy <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。</li>\n<li>RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。</li>\n<li>RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。</li>\n</ul>\n<p>2、@Target：指定被修饰的注解能用于哪些程序元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Target &#123;</div><div class=\"line\">    ElementType[] value();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>ElementType.ANNOTATION_TYPE: 修饰Annotation。</li>\n<li>ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。</li>\n<li>ElementType.FIELD: 修饰成员变量。</li>\n<li>ElementType.METHOD: 修饰方法定义。</li>\n<li>ElementType.PARAMETER: 修饰参数定义。</li>\n<li>ElementType.CONSTRUCTOR: 修饰构造方法。</li>\n<li>ElementType.LOCAL_VARIABLE: 修饰局部变量。</li>\n<li>ElementType.PACKAGE: 修饰包定义。</li>\n</ul>\n<p>在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注</p>\n<ul>\n<li>ElementType.TYPE_PARAMETER:  类型变量</li>\n<li>ElementType.TYPE_USE:  使用类型的任何语句</li>\n</ul>\n<p>TYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE_PARAMETER)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Animal&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zoo</span>&lt;@<span class=\"title\">Animal</span> <span class=\"title\">T</span>&gt;</span>&#123;</div><div class=\"line\">true...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>TYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">定义：</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE_USE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UseTest</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">使用：</div><div class=\"line\"><span class=\"meta\">@UseTest</span> String content; 修饰类型，</div><div class=\"line\">此种写法相当于java.lang.<span class=\"meta\">@UseTest</span> String content; </div><div class=\"line\">若<span class=\"meta\">@UseTest</span> java.lang.String content; 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。</div><div class=\"line\"></div><div class=\"line\">String content = (<span class=\"meta\">@UseTest</span> String) obj; <span class=\"comment\">//类型转换</span></div><div class=\"line\">List&lt;<span class=\"meta\">@UseTest</span> String&gt; infos = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();  <span class=\"comment\">//泛型</span></div><div class=\"line\">implements <span class=\"meta\">@UseTest</span> XXXX;  <span class=\"comment\">//实现接口</span></div><div class=\"line\"><span class=\"keyword\">throws</span> <span class=\"meta\">@UseTest</span> NullPointException;  <span class=\"comment\">//声明抛出异常</span></div></pre></td></tr></table></figure>\n<p>3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。</p>\n<p>4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。</p>\n<p>5、@Repeatable：重复注解，Java8的新特性。</p>\n<p>在Java8之前，重复注解的解决方案代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Student&#123;</div><div class=\"line\">true<span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">定义一个容器注解：</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Students&#123;</div><div class=\"line\">trueStudent[] value();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">使用：</div><div class=\"line\"><span class=\"meta\">@Students</span>(&#123;<span class=\"meta\">@Student</span>(name = <span class=\"string\">\"Jack\"</span>), <span class=\"meta\">@Student</span>(name = <span class=\"string\">\"Will\"</span>)&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentTest</span></span>&#123;</div><div class=\"line\">true......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Java8中的方案则如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义如上的容器注解Students，添加Repeatable注解，如下所示</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"><span class=\"meta\">@Repeatable</span>(Students.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Student&#123;</div><div class=\"line\">true<span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">使用：</div><div class=\"line\"><span class=\"meta\">@Student</span>(name = <span class=\"string\">\"Jack\"</span>)</div><div class=\"line\"><span class=\"meta\">@Student</span>(name = <span class=\"string\">\"Will\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentTest</span></span>&#123;</div><div class=\"line\">true......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Java-反射简介\"><a href=\"#Java-反射简介\" class=\"headerlink\" title=\"Java 反射简介\"></a>Java 反射简介</h2><p>通过Java反射可以获取对象的属性、方法等。</p>\n<p>1、获取类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第一种方式</span></div><div class=\"line\">Class stuClazz1 = Class.forName(<span class=\"string\">\"com.lauzy.freedom.ReflectDemo.Student\"</span>);</div><div class=\"line\">true</div><div class=\"line\"><span class=\"comment\">//第二种方式</span></div><div class=\"line\">Class stuClazz2 = Student.class;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//第三种方式</span></div><div class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">Class stuClazz3 = stu3.getClass();</div></pre></td></tr></table></figure>\n<p>2、创建对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Class stuClazz2 = Student.class;</div><div class=\"line\">Object stu = stuClazz2.newInstance();</div></pre></td></tr></table></figure>\n<p>3、获取属性例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Object stu = stuClazz2.newInstance();   <span class=\"comment\">//获取实例</span></div><div class=\"line\">Field age = stuClazz2.getDeclaredField(<span class=\"string\">\"age\"</span>);  <span class=\"comment\">//获取特定属性</span></div><div class=\"line\">age.setAccessible(<span class=\"keyword\">true</span>);    <span class=\"comment\">//打破封装性</span></div><div class=\"line\">age.set(stu, <span class=\"number\">25</span>);   <span class=\"comment\">//设置属性</span></div></pre></td></tr></table></figure>\n<p>4、方法总结</p>\n<ul>\n<li>getDeclaredFields(): 获取所有属性。</li>\n<li>getDeclaredField(“<em>*</em>“): 获取特定的属性。</li>\n<li>getModifiers(): 获取属性或方法的修饰符。</li>\n<li>getType(): 获取属性或方法的类型名。</li>\n<li>getDeclaredMethods()：获取所有方法。</li>\n<li>getReturnType()：获取方法的返回类型。</li>\n<li>getParameterTypes()：获取方法的参数类型。</li>\n<li>getDeclaredMethod(“<em>*</em>“,参数类型.class,……): 获取特定的方法。</li>\n<li>getDeclaredConstructors(): 获取所有的构造方法。</li>\n<li>getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。</li>\n<li>getSuperclass()：获取继承的父类。</li>\n<li>getInterfaces()：获取实现的所有接口。</li>\n<li>field.set(Object object, Object value);//设置object对象的value属性</li>\n<li>method.invoke(Object object, Object… values); //调用方法，values为方法的参数</li>\n</ul>\n<p>5、代码实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Class stuClazz1 = Class.forName(<span class=\"string\">\"com.lauzy.freedom.ReflectDemo.Student\"</span>);</div><div class=\"line\">    Class stuClazz2 = Student.class;</div><div class=\"line\">    Student stu3 = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">    Class stuClazz3 = stu3.getClass();</div><div class=\"line\">true<span class=\"keyword\">for</span> (Field field : stuClazz1.getDeclaredFields()) &#123;</div><div class=\"line\">        System.out.println(Modifier.toString(field.getModifiers())  <span class=\"comment\">//获取属性修饰符</span></div><div class=\"line\">                + <span class=\"string\">\"-\"</span> + field.getType().getSimpleName()     <span class=\"comment\">//获取属性类型名</span></div><div class=\"line\">                + <span class=\"string\">\"-\"</span> + field.getName());  <span class=\"comment\">//获取属性名</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Method method : stuClazz2.getDeclaredMethods()) &#123;</div><div class=\"line\">        System.out.println(Modifier.toString(method.getModifiers())  <span class=\"comment\">//获取方法修饰符</span></div><div class=\"line\">                + <span class=\"string\">\"-\"</span> + method.getReturnType().toString()   <span class=\"comment\">//方法返回类型名</span></div><div class=\"line\">                + <span class=\"string\">\"-\"</span> + method.getName());  <span class=\"comment\">//方法名</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    System.out.println(stuClazz2.getDeclaredConstructor(String.class, String.class, <span class=\"keyword\">int</span>.class).toString());</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    System.out.println(stuClazz2.getSuperclass().getName().toString());</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Class aClass : stuClazz2.getInterfaces()) &#123;</div><div class=\"line\">        System.out.println(aClass.getName());</div><div class=\"line\">    &#125;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    Object stu = stuClazz2.newInstance();   <span class=\"comment\">//获取实例</span></div><div class=\"line\">    Field name = stuClazz2.getDeclaredField(<span class=\"string\">\"name\"</span>);  <span class=\"comment\">//获取特定属性</span></div><div class=\"line\">    name.setAccessible(<span class=\"keyword\">true</span>);    <span class=\"comment\">//打破封装性</span></div><div class=\"line\">    name.set(stu, <span class=\"string\">\"Jack\"</span>);   <span class=\"comment\">//设置属性</span></div><div class=\"line\">    System.out.println(name.get(stu));</div><div class=\"line\"></div><div class=\"line\">    Method profile = stuClazz2.getDeclaredMethod(<span class=\"string\">\"getProfile\"</span>, String.class, <span class=\"keyword\">int</span>.class);<span class=\"comment\">//特定方法</span></div><div class=\"line\">    profile.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    profile.invoke(stu, <span class=\"string\">\"male\"</span>, <span class=\"number\">30</span>);<span class=\"comment\">//调用方法</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">private-String-name</div><div class=\"line\">public-String-gender</div><div class=\"line\">private-int-age</div><div class=\"line\">--------</div><div class=\"line\">public-class java.lang.String-getName</div><div class=\"line\">public-void-setName</div><div class=\"line\">private-void-getProfile</div><div class=\"line\">public-int-getAge</div><div class=\"line\">public-void-setAge</div><div class=\"line\">--------</div><div class=\"line\">public com.lauzy.freedom.ReflectDemo.Student(java.lang.String,java.lang.String,int)</div><div class=\"line\">--------</div><div class=\"line\">com.lauzy.freedom.AnnotationDemo.Person</div><div class=\"line\">--------</div><div class=\"line\">java.io.Serializable</div><div class=\"line\">--------</div><div class=\"line\">Jack</div><div class=\"line\">Name : Jack ; Gender : male ; Age : 30</div></pre></td></tr></table></figure>\n<h2 id=\"自定义注解、反射获取属性\"><a href=\"#自定义注解、反射获取属性\" class=\"headerlink\" title=\"自定义注解、反射获取属性\"></a>自定义注解、反射获取属性</h2><p>分别定义Name、Gender和SaveMoney注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)</div><div class=\"line\"><span class=\"meta\">@interface</span> Name &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"Will\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Gender &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SaveMoney &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">money</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 10000</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">term</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">platform</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"XXX\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注解的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Name</span>(value = <span class=\"string\">\"Jack\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Gender</span>(value = <span class=\"string\">\"man\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SaveMoney</span>(money = <span class=\"number\">20000</span>, term = <span class=\"number\">5</span>, platform = <span class=\"string\">\"ChinaBank\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveMoney</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"and then he spent \"</span> + money  + <span class=\"string\">\" on clothes.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>利用反射获取注解的属性和方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnnUtils</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Field field : clazz.getFields()) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (field.isAnnotationPresent(Name.class) &amp;&amp; field.isAnnotationPresent(Gender.class)) &#123;</div><div class=\"line\">                Name name = field.getAnnotation(Name.class);</div><div class=\"line\">                Gender gender = field.getAnnotation(Gender.class);</div><div class=\"line\">                System.out.print(<span class=\"string\">\"A \"</span> + gender.value() + <span class=\"string\">\" called \"</span> + name.value());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Class&lt;Person&gt; personClass = Person.class;</div><div class=\"line\">            Method[] methods = personClass.getMethods();</div><div class=\"line\">            <span class=\"keyword\">for</span> (Method method : methods) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (method.isAnnotationPresent(SaveMoney.class)) &#123;</div><div class=\"line\">                    SaveMoney saveMoney = method.getAnnotation(SaveMoney.class);</div><div class=\"line\">                    System.out.print(<span class=\"string\">\" deposited \"</span> + saveMoney.money() + <span class=\"string\">\"RMB to \"</span> +</div><div class=\"line\">                            saveMoney.platform() + <span class=\"string\">\" for \"</span> + saveMoney.term() + <span class=\"string\">\" months, \"</span>);</div><div class=\"line\"></div><div class=\"line\">                    method.invoke(personClass.newInstance(), <span class=\"number\">1000</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>执行 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnnUtils.test(Person.class);</div></pre></td></tr></table></figure>\n<p>此时的输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">A man named Jack deposited <span class=\"number\">20000</span>RMB to ChinaBank <span class=\"keyword\">for</span> <span class=\"number\">5</span> months, and then he spent <span class=\"number\">1000</span> on clothes.</div></pre></td></tr></table></figure>\n<p>此篇博客为基础用法及实例，下一篇<a href=\"http://lauzy.me/2017/05/09/201706IOC2/\" target=\"_blank\" rel=\"external\">Java注解、反射，安卓IOC（二）</a>会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。</p>\n","excerpt":"<h2 id=\"Java-注解-Annotation\"><a href=\"#Java-注解-Annotation\" class=\"headerlink\" title=\"Java 注解 (Annotation)\"></a>Java 注解 (Annotation)</h2><p>Java 注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation 可用于修饰包、类、构造器、方法、变量等。</p>","more":"<h3 id=\"Annotation-类型\"><a href=\"#Annotation-类型\" class=\"headerlink\" title=\"Annotation 类型\"></a>Annotation 类型</h3><p>此处来一张网上的图 (可在新标签页中放大查看)</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg\" width = \"710\" height = \"670\" alt=\"注解大全\"/></p>\n<p>转自<a href=\"http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html\">深入理解Java：注解(Annotation)</a></p>\n<h4 id=\"基本-Annotation\"><a href=\"#基本-Annotation\" class=\"headerlink\" title=\"基本 Annotation\"></a>基本 Annotation</h4><p>Java中5个基本的注解分别为：</p>\n<ul>\n<li>@Override  ————  用来限定子类重写父类的方法。</li>\n<li>@Deprecated  ————  标记已经过时的方法。</li>\n<li>@SuppressWarnings  ————  抑制编译器的警告。</li>\n<li>@SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。</li>\n<li>@FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。</li>\n</ul>\n<h4 id=\"元-Annotation\"><a href=\"#元-Annotation\" class=\"headerlink\" title=\"元 Annotation\"></a>元 Annotation</h4><p>元Annotation是用来修饰其他注解定义，即注解其他注解。<br>Java中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。</p>\n<p>1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Retention &#123;</div><div class=\"line\">    <span class=\"function\">RetentionPolicy <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。</li>\n<li>RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。</li>\n<li>RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。</li>\n</ul>\n<p>2、@Target：指定被修饰的注解能用于哪些程序元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Target &#123;</div><div class=\"line\">    ElementType[] value();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>ElementType.ANNOTATION_TYPE: 修饰Annotation。</li>\n<li>ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。</li>\n<li>ElementType.FIELD: 修饰成员变量。</li>\n<li>ElementType.METHOD: 修饰方法定义。</li>\n<li>ElementType.PARAMETER: 修饰参数定义。</li>\n<li>ElementType.CONSTRUCTOR: 修饰构造方法。</li>\n<li>ElementType.LOCAL_VARIABLE: 修饰局部变量。</li>\n<li>ElementType.PACKAGE: 修饰包定义。</li>\n</ul>\n<p>在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注</p>\n<ul>\n<li>ElementType.TYPE_PARAMETER:  类型变量</li>\n<li>ElementType.TYPE_USE:  使用类型的任何语句</li>\n</ul>\n<p>TYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE_PARAMETER)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Animal&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zoo</span>&lt;@<span class=\"title\">Animal</span> <span class=\"title\">T</span>&gt;</span>&#123;</div><div class=\"line\">true...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>TYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">定义：</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE_USE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UseTest</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">使用：</div><div class=\"line\"><span class=\"meta\">@UseTest</span> String content; 修饰类型，</div><div class=\"line\">此种写法相当于java.lang.<span class=\"meta\">@UseTest</span> String content; </div><div class=\"line\">若<span class=\"meta\">@UseTest</span> java.lang.String content; 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。</div><div class=\"line\"></div><div class=\"line\">String content = (<span class=\"meta\">@UseTest</span> String) obj; <span class=\"comment\">//类型转换</span></div><div class=\"line\">List&lt;<span class=\"meta\">@UseTest</span> String&gt; infos = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();  <span class=\"comment\">//泛型</span></div><div class=\"line\">implements <span class=\"meta\">@UseTest</span> XXXX;  <span class=\"comment\">//实现接口</span></div><div class=\"line\"><span class=\"keyword\">throws</span> <span class=\"meta\">@UseTest</span> NullPointException;  <span class=\"comment\">//声明抛出异常</span></div></pre></td></tr></table></figure>\n<p>3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。</p>\n<p>4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。</p>\n<p>5、@Repeatable：重复注解，Java8的新特性。</p>\n<p>在Java8之前，重复注解的解决方案代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Student&#123;</div><div class=\"line\">true<span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">定义一个容器注解：</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Students&#123;</div><div class=\"line\">trueStudent[] value();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">使用：</div><div class=\"line\"><span class=\"meta\">@Students</span>(&#123;<span class=\"meta\">@Student</span>(name = <span class=\"string\">\"Jack\"</span>), <span class=\"meta\">@Student</span>(name = <span class=\"string\">\"Will\"</span>)&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentTest</span></span>&#123;</div><div class=\"line\">true......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Java8中的方案则如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义如上的容器注解Students，添加Repeatable注解，如下所示</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"><span class=\"meta\">@Repeatable</span>(Students.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Student&#123;</div><div class=\"line\">true<span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">使用：</div><div class=\"line\"><span class=\"meta\">@Student</span>(name = <span class=\"string\">\"Jack\"</span>)</div><div class=\"line\"><span class=\"meta\">@Student</span>(name = <span class=\"string\">\"Will\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentTest</span></span>&#123;</div><div class=\"line\">true......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Java-反射简介\"><a href=\"#Java-反射简介\" class=\"headerlink\" title=\"Java 反射简介\"></a>Java 反射简介</h2><p>通过Java反射可以获取对象的属性、方法等。</p>\n<p>1、获取类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//第一种方式</span></div><div class=\"line\">Class stuClazz1 = Class.forName(<span class=\"string\">\"com.lauzy.freedom.ReflectDemo.Student\"</span>);</div><div class=\"line\">true</div><div class=\"line\"><span class=\"comment\">//第二种方式</span></div><div class=\"line\">Class stuClazz2 = Student.class;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//第三种方式</span></div><div class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">Class stuClazz3 = stu3.getClass();</div></pre></td></tr></table></figure>\n<p>2、创建对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Class stuClazz2 = Student.class;</div><div class=\"line\">Object stu = stuClazz2.newInstance();</div></pre></td></tr></table></figure>\n<p>3、获取属性例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Object stu = stuClazz2.newInstance();   <span class=\"comment\">//获取实例</span></div><div class=\"line\">Field age = stuClazz2.getDeclaredField(<span class=\"string\">\"age\"</span>);  <span class=\"comment\">//获取特定属性</span></div><div class=\"line\">age.setAccessible(<span class=\"keyword\">true</span>);    <span class=\"comment\">//打破封装性</span></div><div class=\"line\">age.set(stu, <span class=\"number\">25</span>);   <span class=\"comment\">//设置属性</span></div></pre></td></tr></table></figure>\n<p>4、方法总结</p>\n<ul>\n<li>getDeclaredFields(): 获取所有属性。</li>\n<li>getDeclaredField(“<em>*</em>“): 获取特定的属性。</li>\n<li>getModifiers(): 获取属性或方法的修饰符。</li>\n<li>getType(): 获取属性或方法的类型名。</li>\n<li>getDeclaredMethods()：获取所有方法。</li>\n<li>getReturnType()：获取方法的返回类型。</li>\n<li>getParameterTypes()：获取方法的参数类型。</li>\n<li>getDeclaredMethod(“<em>*</em>“,参数类型.class,……): 获取特定的方法。</li>\n<li>getDeclaredConstructors(): 获取所有的构造方法。</li>\n<li>getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。</li>\n<li>getSuperclass()：获取继承的父类。</li>\n<li>getInterfaces()：获取实现的所有接口。</li>\n<li>field.set(Object object, Object value);//设置object对象的value属性</li>\n<li>method.invoke(Object object, Object… values); //调用方法，values为方法的参数</li>\n</ul>\n<p>5、代码实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Class stuClazz1 = Class.forName(<span class=\"string\">\"com.lauzy.freedom.ReflectDemo.Student\"</span>);</div><div class=\"line\">    Class stuClazz2 = Student.class;</div><div class=\"line\">    Student stu3 = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">    Class stuClazz3 = stu3.getClass();</div><div class=\"line\">true<span class=\"keyword\">for</span> (Field field : stuClazz1.getDeclaredFields()) &#123;</div><div class=\"line\">        System.out.println(Modifier.toString(field.getModifiers())  <span class=\"comment\">//获取属性修饰符</span></div><div class=\"line\">                + <span class=\"string\">\"-\"</span> + field.getType().getSimpleName()     <span class=\"comment\">//获取属性类型名</span></div><div class=\"line\">                + <span class=\"string\">\"-\"</span> + field.getName());  <span class=\"comment\">//获取属性名</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Method method : stuClazz2.getDeclaredMethods()) &#123;</div><div class=\"line\">        System.out.println(Modifier.toString(method.getModifiers())  <span class=\"comment\">//获取方法修饰符</span></div><div class=\"line\">                + <span class=\"string\">\"-\"</span> + method.getReturnType().toString()   <span class=\"comment\">//方法返回类型名</span></div><div class=\"line\">                + <span class=\"string\">\"-\"</span> + method.getName());  <span class=\"comment\">//方法名</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    System.out.println(stuClazz2.getDeclaredConstructor(String.class, String.class, <span class=\"keyword\">int</span>.class).toString());</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    System.out.println(stuClazz2.getSuperclass().getName().toString());</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Class aClass : stuClazz2.getInterfaces()) &#123;</div><div class=\"line\">        System.out.println(aClass.getName());</div><div class=\"line\">    &#125;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"--------\"</span>);</div><div class=\"line\">    Object stu = stuClazz2.newInstance();   <span class=\"comment\">//获取实例</span></div><div class=\"line\">    Field name = stuClazz2.getDeclaredField(<span class=\"string\">\"name\"</span>);  <span class=\"comment\">//获取特定属性</span></div><div class=\"line\">    name.setAccessible(<span class=\"keyword\">true</span>);    <span class=\"comment\">//打破封装性</span></div><div class=\"line\">    name.set(stu, <span class=\"string\">\"Jack\"</span>);   <span class=\"comment\">//设置属性</span></div><div class=\"line\">    System.out.println(name.get(stu));</div><div class=\"line\"></div><div class=\"line\">    Method profile = stuClazz2.getDeclaredMethod(<span class=\"string\">\"getProfile\"</span>, String.class, <span class=\"keyword\">int</span>.class);<span class=\"comment\">//特定方法</span></div><div class=\"line\">    profile.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">    profile.invoke(stu, <span class=\"string\">\"male\"</span>, <span class=\"number\">30</span>);<span class=\"comment\">//调用方法</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">private-String-name</div><div class=\"line\">public-String-gender</div><div class=\"line\">private-int-age</div><div class=\"line\">--------</div><div class=\"line\">public-class java.lang.String-getName</div><div class=\"line\">public-void-setName</div><div class=\"line\">private-void-getProfile</div><div class=\"line\">public-int-getAge</div><div class=\"line\">public-void-setAge</div><div class=\"line\">--------</div><div class=\"line\">public com.lauzy.freedom.ReflectDemo.Student(java.lang.String,java.lang.String,int)</div><div class=\"line\">--------</div><div class=\"line\">com.lauzy.freedom.AnnotationDemo.Person</div><div class=\"line\">--------</div><div class=\"line\">java.io.Serializable</div><div class=\"line\">--------</div><div class=\"line\">Jack</div><div class=\"line\">Name : Jack ; Gender : male ; Age : 30</div></pre></td></tr></table></figure>\n<h2 id=\"自定义注解、反射获取属性\"><a href=\"#自定义注解、反射获取属性\" class=\"headerlink\" title=\"自定义注解、反射获取属性\"></a>自定义注解、反射获取属性</h2><p>分别定义Name、Gender和SaveMoney注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)</div><div class=\"line\"><span class=\"meta\">@interface</span> Name &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"Will\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Gender &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SaveMoney &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">money</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 10000</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">term</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">platform</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"XXX\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注解的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Name</span>(value = <span class=\"string\">\"Jack\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Gender</span>(value = <span class=\"string\">\"man\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SaveMoney</span>(money = <span class=\"number\">20000</span>, term = <span class=\"number\">5</span>, platform = <span class=\"string\">\"ChinaBank\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveMoney</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"and then he spent \"</span> + money  + <span class=\"string\">\" on clothes.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>利用反射获取注解的属性和方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnnUtils</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Field field : clazz.getFields()) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (field.isAnnotationPresent(Name.class) &amp;&amp; field.isAnnotationPresent(Gender.class)) &#123;</div><div class=\"line\">                Name name = field.getAnnotation(Name.class);</div><div class=\"line\">                Gender gender = field.getAnnotation(Gender.class);</div><div class=\"line\">                System.out.print(<span class=\"string\">\"A \"</span> + gender.value() + <span class=\"string\">\" called \"</span> + name.value());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Class&lt;Person&gt; personClass = Person.class;</div><div class=\"line\">            Method[] methods = personClass.getMethods();</div><div class=\"line\">            <span class=\"keyword\">for</span> (Method method : methods) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (method.isAnnotationPresent(SaveMoney.class)) &#123;</div><div class=\"line\">                    SaveMoney saveMoney = method.getAnnotation(SaveMoney.class);</div><div class=\"line\">                    System.out.print(<span class=\"string\">\" deposited \"</span> + saveMoney.money() + <span class=\"string\">\"RMB to \"</span> +</div><div class=\"line\">                            saveMoney.platform() + <span class=\"string\">\" for \"</span> + saveMoney.term() + <span class=\"string\">\" months, \"</span>);</div><div class=\"line\"></div><div class=\"line\">                    method.invoke(personClass.newInstance(), <span class=\"number\">1000</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>执行 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnnUtils.test(Person.class);</div></pre></td></tr></table></figure>\n<p>此时的输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">A man named Jack deposited <span class=\"number\">20000</span>RMB to ChinaBank <span class=\"keyword\">for</span> <span class=\"number\">5</span> months, and then he spent <span class=\"number\">1000</span> on clothes.</div></pre></td></tr></table></figure>\n<p>此篇博客为基础用法及实例，下一篇<a href=\"http://lauzy.me/2017/05/09/201706IOC2/\">Java注解、反射，安卓IOC（二）</a>会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。</p>"},{"title":"Android自定义View：让播放、暂停按钮优雅的过渡","date":"2017-08-12T11:42:27.000Z","_content":"\n最近想写个音乐播放器，偶然看到轻听这款播放器的播放和暂停按钮，在切换过程中的动画很是吸引我。本着造轮子（其实是 github 上边没找到）的想法，就花了点时间撸出来了这个效果。\n\n效果就是下边这个样子：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170812PlayPauseView.gif\" width = \"200\" height = \"210\" alt=\"效果图\"/>\n\n<!--more-->\n\n下边说下实现方法，中间也踩了一些坑。\n\n## 测量及初始化\n\n首先要确实View的宽高，在这里由于是圆形按钮，所以设置宽高相等，onMeasure()方法中设置下即可：\n\n```java\n\n \t\tmWidth = MeasureSpec.getSize(widthMeasureSpec);\n        mHeight = MeasureSpec.getSize(heightMeasureSpec);\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        switch (widthMode) {\n            case MeasureSpec.EXACTLY:\n                mWidth = mHeight = Math.min(mWidth, mHeight);\n                setMeasuredDimension(mWidth, mHeight);\n                break;\n            case MeasureSpec.AT_MOST:\n                float density = getResources().getDisplayMetrics().density;\n                mWidth = mHeight = (int) (50 * density); //默认50dp\n                setMeasuredDimension(mWidth, mHeight);\n                break;\n        }\n\n```\n\n然后画出底部的圆形\n\n```java\n\n canvas.drawCircle(mWidth / 2, mHeight / 2, mRadius, mPaint);\n\n```\n\n\n## 计算Path\n\n1、初始化完毕后，怎么实现两个竖条到一个三角形的过渡呢？这里首先想到的就是自定义 View 常用的 drawPath 方法，抛开动画不谈，整个 View 变化过程其实就是两个矩形变成两个直角三角形的过程。\n\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog001.png\" alt = \"实现\">\n\n就是这个样子。知道大体的思路，怎么搞呢，当然是开车了。\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/FACE001.gif\">\n\n就是 canvas.drawPath();\n\n首先计算暂停时两个矩形的各个坐标位置：\n\n```java\n\n \t\tfloat distance = mGapWidth;  //暂停时左右两边矩形距离\n        float barWidth = mRectWidth / 2 - distance / 2;     //一个矩形的宽度\n        float leftLeftTop = barWidth;       //左边矩形左上角\n\n        float rightLeftTop = barWidth + distance;       //右边矩形左上角\n        float rightRightTop = 2 * barWidth + distance;  //右边矩形右上角\n        float rightRightBottom = rightRightTop; //右边矩形右下角\n\n```\n\nbottom 的话直接加上矩形的高度即可。\n\n```java\n\n\t\t\tmLeftPath.moveTo(0, 0);\n            mLeftPath.lineTo(leftLeftTop, mRectHeight);\n            mLeftPath.lineTo(barWidth, mRectHeight);\n            mLeftPath.lineTo(barWidth, 0);\n            mLeftPath.close();\n\n            mRightPath.moveTo(rightLeftTop, 0);\n            mRightPath.lineTo(rightLeftTop, mRectHeight);\n            mRightPath.lineTo(rightRightBottom, mRectHeight);\n            mRightPath.lineTo(rightRightTop, 0);\n            mRightPath.close();\n\n```\n\n这样两个竖条就出来了。\n\n\n2、在一开始写的时候就写了这么多计算的方法，但是这时候矩形的边角会超出 View 的范围，所以后来计算了一波位置：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog02.png\"  alt = \"计算过程2\">\n\n\n如上图所示，这样就需要再更改一些参数：\n\n\n首先定义出来这个矩形，计算下宽高：\n\n```java\n\n \t\tfloat space = (float) (mRadius / Math.sqrt(2)); \n        mRectLT = (int) (mRadius - space);\n        int rectRB = (int) (mRadius + space);\n        mRect.top = mRectLT;\n        mRect.bottom = rectRB;\n        mRect.left = mRectLT;\n        mRect.right = rectRB;\n\n\n```\n\n然后只用在 确定 path 的路线时更改下坐标就可以了：\n\n```java\n\n \t\t\tmLeftPath.moveTo(mRectLT, mRectLT);\n            mLeftPath.lineTo(leftLeftTop + mRectLT, mRectHeight + mRectLT);\n            mLeftPath.lineTo(barWidth + mRectLT, mRectHeight + mRectLT);\n            mLeftPath.lineTo(barWidth + mRectLT, mRectLT);\n            mLeftPath.close();\n\n            mRightPath.moveTo(rightLeftTop + mRectLT, mRectLT);\n            mRightPath.lineTo(rightLeftTop + mRectLT, mRectHeight + mRectLT);\n            mRightPath.lineTo(rightRightBottom + mRectLT, mRectHeight + mRectLT);\n            mRightPath.lineTo(rightRightTop + mRectLT, mRectLT);\n            mRightPath.close();\n\n```\n\n这时候画出来两个 Path，暂停按钮就完美的呈现了：\n\n```java\n\n\t\tcanvas.drawPath(mLeftPath, mPaint);\n        canvas.drawPath(mRightPath, mPaint);\n\n```\n\n如下图这样：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog01.png\"  alt = \"计算过程1\">\n\n\n## 动画实现\n\n画完暂停按钮后，怎么让他动画变成三角形呢？一开始我想根据一些宽高的属性来指定动画的变化值，然后更新过程中再画出来，但是计算过程中发现涉及动画的矩形宽度都是从原始的大小到0过渡的，那统一的使用一个参数确定会不会更好点呢？当然会了，从1倍到0变化即可。\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/FACE002.jpg\">\n\n这时候就可以设置动画属性了：\n\n```java\n\n\t\tValueAnimator valueAnimator = ValueAnimator.ofFloat(0 , 1);\n        valueAnimator.setDuration(200);\n        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                mProgress = (float) animation.getAnimatedValue();\n                invalidate();\n            }\n        });\n\n```\n\n然后根据 progress 在更新View的过程中来更改矩形的宽高值：\n\n```java\n\n\t\tfloat distance = mGapWidth * (1 - mProgress);  //暂停时左右两边矩形距离\n        float barWidth = mRectWidth / 2 - distance / 2;     //一个矩形的宽度\n        float leftLeftTop = barWidth * mProgress;       //左边矩形左上角\n\n        float rightLeftTop = barWidth + distance;       //右边矩形左上角\n        float rightRightTop = 2 * barWidth + distance;  //右边矩形右上角\n        float rightRightBottom = rightRightTop - barWidth * mProgress; //右边矩形右下角\n\n```\n\n这样便可以实现两个矩形到三角形的过渡了，执行动画结束后便是这个样子：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog03.png\"  alt = \"计算过程3\">\n\n两个矩形变成三角形之后，只需要画布旋转一下，两个暂停按钮到播放按钮的动画已经可以执行了：\n\n```java\n\ncanvas.rotate(rotation, mWidth / 2f, mHeight / 2f);\n\n```\n\n到这里基本上已经结束了，但是写完使用的时候总觉得位置有点不对劲，后来发现确实有问题：\n\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog07.png\"  alt = \"计算过程3\">\n\n如图所示，旋转过后 A 和 C 本来是紧靠着圆周的，而 B 距离圆周还有一定的距离。所以需要将其位移 x 的距离，让 OC 的长度等于 BO 的长度。此时圆心O也是三角形的外心。那么此时可以计算出OF的距离，公式如下：\n\n√（( r / √2 ) ^ 2 + OF ^ 2） = √2 * r - OF\n\n得出 OF 的长度为： 3 * √2 * r / 8\n\n那么原矩形宽度的一半减去 OF 的值即为右移的距离，计算可得，右移的距离为 √2 * r / 8 用 Java 表示即\n```java\nradius * Math.sqrt(2) / 8f \n\n```\n换算为矩形的高度即\n\n```java\n\nmRectHeight / 8f\n\n```\n\n然后在画布位移一下即可：\n\n```java\n\ncanvas.translate((float) (mRectHeight * Math.sqrt(2) / 8f * mProgress), 0);\n\n```\n\n## 总结\n\n上边几个步骤写完，整体效果已经实现了。后来又设置了一系列自定义的参数方便使用：\n\n```java\n\n\t<declare-styleable name=\"PlayPauseView\">\n        <attr name=\"bg_color\" format=\"color\"/>\n        <attr name=\"btn_color\" format=\"color\"/>\n        <attr name=\"gap_width\" format=\"float\"/>\n        <attr name=\"space_padding\" format=\"float\"/>\n        <attr name=\"anim_duration\" format=\"integer\"/>\n        <attr name=\"anim_direction\">\n            <enum name=\"positive\" value=\"1\"/>\n            <enum name=\"negative\" value=\"2\"/>\n        </attr>\n    </declare-styleable>\n\n```\n\n所有代码都已经上传到 [我的Github](https://github.com/Lauzy) 上边了，[点击可查看](https://github.com/Lauzy/PlayPauseView)，希望提出问题相互讨论，随便给个 Star 再好不过了。\n有问题交流可加QQ群 661614986 ，欢迎讨论。","source":"_posts/201708PlayPauseView.md","raw":"---\ntitle: Android自定义View：让播放、暂停按钮优雅的过渡\ndate: 2017-08-12 19:42:27\ntags: \n\t- Android 自定义View\n---\n\n最近想写个音乐播放器，偶然看到轻听这款播放器的播放和暂停按钮，在切换过程中的动画很是吸引我。本着造轮子（其实是 github 上边没找到）的想法，就花了点时间撸出来了这个效果。\n\n效果就是下边这个样子：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170812PlayPauseView.gif\" width = \"200\" height = \"210\" alt=\"效果图\"/>\n\n<!--more-->\n\n下边说下实现方法，中间也踩了一些坑。\n\n## 测量及初始化\n\n首先要确实View的宽高，在这里由于是圆形按钮，所以设置宽高相等，onMeasure()方法中设置下即可：\n\n```java\n\n \t\tmWidth = MeasureSpec.getSize(widthMeasureSpec);\n        mHeight = MeasureSpec.getSize(heightMeasureSpec);\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        switch (widthMode) {\n            case MeasureSpec.EXACTLY:\n                mWidth = mHeight = Math.min(mWidth, mHeight);\n                setMeasuredDimension(mWidth, mHeight);\n                break;\n            case MeasureSpec.AT_MOST:\n                float density = getResources().getDisplayMetrics().density;\n                mWidth = mHeight = (int) (50 * density); //默认50dp\n                setMeasuredDimension(mWidth, mHeight);\n                break;\n        }\n\n```\n\n然后画出底部的圆形\n\n```java\n\n canvas.drawCircle(mWidth / 2, mHeight / 2, mRadius, mPaint);\n\n```\n\n\n## 计算Path\n\n1、初始化完毕后，怎么实现两个竖条到一个三角形的过渡呢？这里首先想到的就是自定义 View 常用的 drawPath 方法，抛开动画不谈，整个 View 变化过程其实就是两个矩形变成两个直角三角形的过程。\n\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog001.png\" alt = \"实现\">\n\n就是这个样子。知道大体的思路，怎么搞呢，当然是开车了。\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/FACE001.gif\">\n\n就是 canvas.drawPath();\n\n首先计算暂停时两个矩形的各个坐标位置：\n\n```java\n\n \t\tfloat distance = mGapWidth;  //暂停时左右两边矩形距离\n        float barWidth = mRectWidth / 2 - distance / 2;     //一个矩形的宽度\n        float leftLeftTop = barWidth;       //左边矩形左上角\n\n        float rightLeftTop = barWidth + distance;       //右边矩形左上角\n        float rightRightTop = 2 * barWidth + distance;  //右边矩形右上角\n        float rightRightBottom = rightRightTop; //右边矩形右下角\n\n```\n\nbottom 的话直接加上矩形的高度即可。\n\n```java\n\n\t\t\tmLeftPath.moveTo(0, 0);\n            mLeftPath.lineTo(leftLeftTop, mRectHeight);\n            mLeftPath.lineTo(barWidth, mRectHeight);\n            mLeftPath.lineTo(barWidth, 0);\n            mLeftPath.close();\n\n            mRightPath.moveTo(rightLeftTop, 0);\n            mRightPath.lineTo(rightLeftTop, mRectHeight);\n            mRightPath.lineTo(rightRightBottom, mRectHeight);\n            mRightPath.lineTo(rightRightTop, 0);\n            mRightPath.close();\n\n```\n\n这样两个竖条就出来了。\n\n\n2、在一开始写的时候就写了这么多计算的方法，但是这时候矩形的边角会超出 View 的范围，所以后来计算了一波位置：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog02.png\"  alt = \"计算过程2\">\n\n\n如上图所示，这样就需要再更改一些参数：\n\n\n首先定义出来这个矩形，计算下宽高：\n\n```java\n\n \t\tfloat space = (float) (mRadius / Math.sqrt(2)); \n        mRectLT = (int) (mRadius - space);\n        int rectRB = (int) (mRadius + space);\n        mRect.top = mRectLT;\n        mRect.bottom = rectRB;\n        mRect.left = mRectLT;\n        mRect.right = rectRB;\n\n\n```\n\n然后只用在 确定 path 的路线时更改下坐标就可以了：\n\n```java\n\n \t\t\tmLeftPath.moveTo(mRectLT, mRectLT);\n            mLeftPath.lineTo(leftLeftTop + mRectLT, mRectHeight + mRectLT);\n            mLeftPath.lineTo(barWidth + mRectLT, mRectHeight + mRectLT);\n            mLeftPath.lineTo(barWidth + mRectLT, mRectLT);\n            mLeftPath.close();\n\n            mRightPath.moveTo(rightLeftTop + mRectLT, mRectLT);\n            mRightPath.lineTo(rightLeftTop + mRectLT, mRectHeight + mRectLT);\n            mRightPath.lineTo(rightRightBottom + mRectLT, mRectHeight + mRectLT);\n            mRightPath.lineTo(rightRightTop + mRectLT, mRectLT);\n            mRightPath.close();\n\n```\n\n这时候画出来两个 Path，暂停按钮就完美的呈现了：\n\n```java\n\n\t\tcanvas.drawPath(mLeftPath, mPaint);\n        canvas.drawPath(mRightPath, mPaint);\n\n```\n\n如下图这样：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog01.png\"  alt = \"计算过程1\">\n\n\n## 动画实现\n\n画完暂停按钮后，怎么让他动画变成三角形呢？一开始我想根据一些宽高的属性来指定动画的变化值，然后更新过程中再画出来，但是计算过程中发现涉及动画的矩形宽度都是从原始的大小到0过渡的，那统一的使用一个参数确定会不会更好点呢？当然会了，从1倍到0变化即可。\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/FACE002.jpg\">\n\n这时候就可以设置动画属性了：\n\n```java\n\n\t\tValueAnimator valueAnimator = ValueAnimator.ofFloat(0 , 1);\n        valueAnimator.setDuration(200);\n        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                mProgress = (float) animation.getAnimatedValue();\n                invalidate();\n            }\n        });\n\n```\n\n然后根据 progress 在更新View的过程中来更改矩形的宽高值：\n\n```java\n\n\t\tfloat distance = mGapWidth * (1 - mProgress);  //暂停时左右两边矩形距离\n        float barWidth = mRectWidth / 2 - distance / 2;     //一个矩形的宽度\n        float leftLeftTop = barWidth * mProgress;       //左边矩形左上角\n\n        float rightLeftTop = barWidth + distance;       //右边矩形左上角\n        float rightRightTop = 2 * barWidth + distance;  //右边矩形右上角\n        float rightRightBottom = rightRightTop - barWidth * mProgress; //右边矩形右下角\n\n```\n\n这样便可以实现两个矩形到三角形的过渡了，执行动画结束后便是这个样子：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog03.png\"  alt = \"计算过程3\">\n\n两个矩形变成三角形之后，只需要画布旋转一下，两个暂停按钮到播放按钮的动画已经可以执行了：\n\n```java\n\ncanvas.rotate(rotation, mWidth / 2f, mHeight / 2f);\n\n```\n\n到这里基本上已经结束了，但是写完使用的时候总觉得位置有点不对劲，后来发现确实有问题：\n\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog07.png\"  alt = \"计算过程3\">\n\n如图所示，旋转过后 A 和 C 本来是紧靠着圆周的，而 B 距离圆周还有一定的距离。所以需要将其位移 x 的距离，让 OC 的长度等于 BO 的长度。此时圆心O也是三角形的外心。那么此时可以计算出OF的距离，公式如下：\n\n√（( r / √2 ) ^ 2 + OF ^ 2） = √2 * r - OF\n\n得出 OF 的长度为： 3 * √2 * r / 8\n\n那么原矩形宽度的一半减去 OF 的值即为右移的距离，计算可得，右移的距离为 √2 * r / 8 用 Java 表示即\n```java\nradius * Math.sqrt(2) / 8f \n\n```\n换算为矩形的高度即\n\n```java\n\nmRectHeight / 8f\n\n```\n\n然后在画布位移一下即可：\n\n```java\n\ncanvas.translate((float) (mRectHeight * Math.sqrt(2) / 8f * mProgress), 0);\n\n```\n\n## 总结\n\n上边几个步骤写完，整体效果已经实现了。后来又设置了一系列自定义的参数方便使用：\n\n```java\n\n\t<declare-styleable name=\"PlayPauseView\">\n        <attr name=\"bg_color\" format=\"color\"/>\n        <attr name=\"btn_color\" format=\"color\"/>\n        <attr name=\"gap_width\" format=\"float\"/>\n        <attr name=\"space_padding\" format=\"float\"/>\n        <attr name=\"anim_duration\" format=\"integer\"/>\n        <attr name=\"anim_direction\">\n            <enum name=\"positive\" value=\"1\"/>\n            <enum name=\"negative\" value=\"2\"/>\n        </attr>\n    </declare-styleable>\n\n```\n\n所有代码都已经上传到 [我的Github](https://github.com/Lauzy) 上边了，[点击可查看](https://github.com/Lauzy/PlayPauseView)，希望提出问题相互讨论，随便给个 Star 再好不过了。\n有问题交流可加QQ群 661614986 ，欢迎讨论。","slug":"201708PlayPauseView","published":1,"updated":"2017-08-15T07:15:50.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6d981370007ho9zpjkoaoqe","content":"<p>最近想写个音乐播放器，偶然看到轻听这款播放器的播放和暂停按钮，在切换过程中的动画很是吸引我。本着造轮子（其实是 github 上边没找到）的想法，就花了点时间撸出来了这个效果。</p>\n<p>效果就是下边这个样子：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170812PlayPauseView.gif\" width=\"200\" height=\"210\" alt=\"效果图\"></p>\n<a id=\"more\"></a>\n<p>下边说下实现方法，中间也踩了一些坑。</p>\n<h2 id=\"测量及初始化\"><a href=\"#测量及初始化\" class=\"headerlink\" title=\"测量及初始化\"></a>测量及初始化</h2><p>首先要确实View的宽高，在这里由于是圆形按钮，所以设置宽高相等，onMeasure()方法中设置下即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">     mHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">     <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">     <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">     <span class=\"keyword\">switch</span> (widthMode) &#123;</div><div class=\"line\">         <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">             mWidth = mHeight = Math.min(mWidth, mHeight);</div><div class=\"line\">             setMeasuredDimension(mWidth, mHeight);</div><div class=\"line\">             <span class=\"keyword\">break</span>;</div><div class=\"line\">         <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">             <span class=\"keyword\">float</span> density = getResources().getDisplayMetrics().density;</div><div class=\"line\">             mWidth = mHeight = (<span class=\"keyword\">int</span>) (<span class=\"number\">50</span> * density); <span class=\"comment\">//默认50dp</span></div><div class=\"line\">             setMeasuredDimension(mWidth, mHeight);</div><div class=\"line\">             <span class=\"keyword\">break</span>;</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<p>然后画出底部的圆形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">canvas.drawCircle(mWidth / <span class=\"number\">2</span>, mHeight / <span class=\"number\">2</span>, mRadius, mPaint);</div></pre></td></tr></table></figure>\n<h2 id=\"计算Path\"><a href=\"#计算Path\" class=\"headerlink\" title=\"计算Path\"></a>计算Path</h2><p>1、初始化完毕后，怎么实现两个竖条到一个三角形的过渡呢？这里首先想到的就是自定义 View 常用的 drawPath 方法，抛开动画不谈，整个 View 变化过程其实就是两个矩形变成两个直角三角形的过程。</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog001.png\" alt=\"实现\"></p>\n<p>就是这个样子。知道大体的思路，怎么搞呢，当然是开车了。</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/FACE001.gif\"></p>\n<p>就是 canvas.drawPath();</p>\n<p>首先计算暂停时两个矩形的各个坐标位置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> distance = mGapWidth;  <span class=\"comment\">//暂停时左右两边矩形距离</span></div><div class=\"line\">     <span class=\"keyword\">float</span> barWidth = mRectWidth / <span class=\"number\">2</span> - distance / <span class=\"number\">2</span>;     <span class=\"comment\">//一个矩形的宽度</span></div><div class=\"line\">     <span class=\"keyword\">float</span> leftLeftTop = barWidth;       <span class=\"comment\">//左边矩形左上角</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">float</span> rightLeftTop = barWidth + distance;       <span class=\"comment\">//右边矩形左上角</span></div><div class=\"line\">     <span class=\"keyword\">float</span> rightRightTop = <span class=\"number\">2</span> * barWidth + distance;  <span class=\"comment\">//右边矩形右上角</span></div><div class=\"line\">     <span class=\"keyword\">float</span> rightRightBottom = rightRightTop; <span class=\"comment\">//右边矩形右下角</span></div></pre></td></tr></table></figure>\n<p>bottom 的话直接加上矩形的高度即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mLeftPath.moveTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">         mLeftPath.lineTo(leftLeftTop, mRectHeight);</div><div class=\"line\">         mLeftPath.lineTo(barWidth, mRectHeight);</div><div class=\"line\">         mLeftPath.lineTo(barWidth, <span class=\"number\">0</span>);</div><div class=\"line\">         mLeftPath.close();</div><div class=\"line\"></div><div class=\"line\">         mRightPath.moveTo(rightLeftTop, <span class=\"number\">0</span>);</div><div class=\"line\">         mRightPath.lineTo(rightLeftTop, mRectHeight);</div><div class=\"line\">         mRightPath.lineTo(rightRightBottom, mRectHeight);</div><div class=\"line\">         mRightPath.lineTo(rightRightTop, <span class=\"number\">0</span>);</div><div class=\"line\">         mRightPath.close();</div></pre></td></tr></table></figure>\n<p>这样两个竖条就出来了。</p>\n<p>2、在一开始写的时候就写了这么多计算的方法，但是这时候矩形的边角会超出 View 的范围，所以后来计算了一波位置：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog02.png\" alt=\"计算过程2\"></p>\n<p>如上图所示，这样就需要再更改一些参数：</p>\n<p>首先定义出来这个矩形，计算下宽高：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> space = (<span class=\"keyword\">float</span>) (mRadius / Math.sqrt(<span class=\"number\">2</span>)); </div><div class=\"line\">     mRectLT = (<span class=\"keyword\">int</span>) (mRadius - space);</div><div class=\"line\">     <span class=\"keyword\">int</span> rectRB = (<span class=\"keyword\">int</span>) (mRadius + space);</div><div class=\"line\">     mRect.top = mRectLT;</div><div class=\"line\">     mRect.bottom = rectRB;</div><div class=\"line\">     mRect.left = mRectLT;</div><div class=\"line\">     mRect.right = rectRB;</div></pre></td></tr></table></figure>\n<p>然后只用在 确定 path 的路线时更改下坐标就可以了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mLeftPath.moveTo(mRectLT, mRectLT);</div><div class=\"line\">        mLeftPath.lineTo(leftLeftTop + mRectLT, mRectHeight + mRectLT);</div><div class=\"line\">        mLeftPath.lineTo(barWidth + mRectLT, mRectHeight + mRectLT);</div><div class=\"line\">        mLeftPath.lineTo(barWidth + mRectLT, mRectLT);</div><div class=\"line\">        mLeftPath.close();</div><div class=\"line\"></div><div class=\"line\">        mRightPath.moveTo(rightLeftTop + mRectLT, mRectLT);</div><div class=\"line\">        mRightPath.lineTo(rightLeftTop + mRectLT, mRectHeight + mRectLT);</div><div class=\"line\">        mRightPath.lineTo(rightRightBottom + mRectLT, mRectHeight + mRectLT);</div><div class=\"line\">        mRightPath.lineTo(rightRightTop + mRectLT, mRectLT);</div><div class=\"line\">        mRightPath.close();</div></pre></td></tr></table></figure>\n<p>这时候画出来两个 Path，暂停按钮就完美的呈现了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">canvas.drawPath(mLeftPath, mPaint);</div><div class=\"line\">      canvas.drawPath(mRightPath, mPaint);</div></pre></td></tr></table></figure>\n<p>如下图这样：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog01.png\" alt=\"计算过程1\"></p>\n<h2 id=\"动画实现\"><a href=\"#动画实现\" class=\"headerlink\" title=\"动画实现\"></a>动画实现</h2><p>画完暂停按钮后，怎么让他动画变成三角形呢？一开始我想根据一些宽高的属性来指定动画的变化值，然后更新过程中再画出来，但是计算过程中发现涉及动画的矩形宽度都是从原始的大小到0过渡的，那统一的使用一个参数确定会不会更好点呢？当然会了，从1倍到0变化即可。</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/FACE002.jpg\"></p>\n<p>这时候就可以设置动画属性了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class=\"number\">0</span> , <span class=\"number\">1</span>);</div><div class=\"line\">      valueAnimator.setDuration(<span class=\"number\">200</span>);</div><div class=\"line\">      valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">              mProgress = (<span class=\"keyword\">float</span>) animation.getAnimatedValue();</div><div class=\"line\">              invalidate();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n<p>然后根据 progress 在更新View的过程中来更改矩形的宽高值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> distance = mGapWidth * (<span class=\"number\">1</span> - mProgress);  <span class=\"comment\">//暂停时左右两边矩形距离</span></div><div class=\"line\">      <span class=\"keyword\">float</span> barWidth = mRectWidth / <span class=\"number\">2</span> - distance / <span class=\"number\">2</span>;     <span class=\"comment\">//一个矩形的宽度</span></div><div class=\"line\">      <span class=\"keyword\">float</span> leftLeftTop = barWidth * mProgress;       <span class=\"comment\">//左边矩形左上角</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">float</span> rightLeftTop = barWidth + distance;       <span class=\"comment\">//右边矩形左上角</span></div><div class=\"line\">      <span class=\"keyword\">float</span> rightRightTop = <span class=\"number\">2</span> * barWidth + distance;  <span class=\"comment\">//右边矩形右上角</span></div><div class=\"line\">      <span class=\"keyword\">float</span> rightRightBottom = rightRightTop - barWidth * mProgress; <span class=\"comment\">//右边矩形右下角</span></div></pre></td></tr></table></figure>\n<p>这样便可以实现两个矩形到三角形的过渡了，执行动画结束后便是这个样子：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog03.png\" alt=\"计算过程3\"></p>\n<p>两个矩形变成三角形之后，只需要画布旋转一下，两个暂停按钮到播放按钮的动画已经可以执行了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">canvas.rotate(rotation, mWidth / <span class=\"number\">2f</span>, mHeight / <span class=\"number\">2f</span>);</div></pre></td></tr></table></figure>\n<p>到这里基本上已经结束了，但是写完使用的时候总觉得位置有点不对劲，后来发现确实有问题：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog07.png\" alt=\"计算过程3\"></p>\n<p>如图所示，旋转过后 A 和 C 本来是紧靠着圆周的，而 B 距离圆周还有一定的距离。所以需要将其位移 x 的距离，让 OC 的长度等于 BO 的长度。此时圆心O也是三角形的外心。那么此时可以计算出OF的距离，公式如下：</p>\n<p>√（( r / √2 ) ^ 2 + OF ^ 2） = √2 * r - OF</p>\n<p>得出 OF 的长度为： 3 <em> √2 </em> r / 8</p>\n<p>那么原矩形宽度的一半减去 OF 的值即为右移的距离，计算可得，右移的距离为 √2 * r / 8 用 Java 表示即<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">radius * Math.sqrt(<span class=\"number\">2</span>) / <span class=\"number\">8f</span></div></pre></td></tr></table></figure></p>\n<p>换算为矩形的高度即</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mRectHeight / <span class=\"number\">8f</span></div></pre></td></tr></table></figure>\n<p>然后在画布位移一下即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">canvas.translate((<span class=\"keyword\">float</span>) (mRectHeight * Math.sqrt(<span class=\"number\">2</span>) / <span class=\"number\">8f</span> * mProgress), <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上边几个步骤写完，整体效果已经实现了。后来又设置了一系列自定义的参数方便使用：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;declare-styleable name=\"PlayPauseView\"&gt;</div><div class=\"line\">       &lt;attr name=\"bg_color\" format=\"color\"/&gt;</div><div class=\"line\">       &lt;attr name=\"btn_color\" format=\"color\"/&gt;</div><div class=\"line\">       &lt;attr name=\"gap_width\" format=\"float\"/&gt;</div><div class=\"line\">       &lt;attr name=\"space_padding\" format=\"float\"/&gt;</div><div class=\"line\">       &lt;attr name=\"anim_duration\" format=\"integer\"/&gt;</div><div class=\"line\">       &lt;attr name=\"anim_direction\"&gt;</div><div class=\"line\">           &lt;enum name=\"positive\" value=\"1\"/&gt;</div><div class=\"line\">           &lt;enum name=\"negative\" value=\"2\"/&gt;</div><div class=\"line\">       &lt;/attr&gt;</div><div class=\"line\">   &lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>\n<p>所有代码都已经上传到 <a href=\"https://github.com/Lauzy\" target=\"_blank\" rel=\"external\">我的Github</a> 上边了，<a href=\"https://github.com/Lauzy/PlayPauseView\" target=\"_blank\" rel=\"external\">点击可查看</a>，希望提出问题相互讨论，随便给个 Star 再好不过了。<br>有问题交流可加QQ群 661614986 ，欢迎讨论。</p>\n","excerpt":"<p>最近想写个音乐播放器，偶然看到轻听这款播放器的播放和暂停按钮，在切换过程中的动画很是吸引我。本着造轮子（其实是 github 上边没找到）的想法，就花了点时间撸出来了这个效果。</p>\n<p>效果就是下边这个样子：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170812PlayPauseView.gif\" width = \"200\" height = \"210\" alt=\"效果图\"/></p>","more":"<p>下边说下实现方法，中间也踩了一些坑。</p>\n<h2 id=\"测量及初始化\"><a href=\"#测量及初始化\" class=\"headerlink\" title=\"测量及初始化\"></a>测量及初始化</h2><p>首先要确实View的宽高，在这里由于是圆形按钮，所以设置宽高相等，onMeasure()方法中设置下即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">     mHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">     <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">     <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">     <span class=\"keyword\">switch</span> (widthMode) &#123;</div><div class=\"line\">         <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">             mWidth = mHeight = Math.min(mWidth, mHeight);</div><div class=\"line\">             setMeasuredDimension(mWidth, mHeight);</div><div class=\"line\">             <span class=\"keyword\">break</span>;</div><div class=\"line\">         <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">             <span class=\"keyword\">float</span> density = getResources().getDisplayMetrics().density;</div><div class=\"line\">             mWidth = mHeight = (<span class=\"keyword\">int</span>) (<span class=\"number\">50</span> * density); <span class=\"comment\">//默认50dp</span></div><div class=\"line\">             setMeasuredDimension(mWidth, mHeight);</div><div class=\"line\">             <span class=\"keyword\">break</span>;</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<p>然后画出底部的圆形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">canvas.drawCircle(mWidth / <span class=\"number\">2</span>, mHeight / <span class=\"number\">2</span>, mRadius, mPaint);</div></pre></td></tr></table></figure>\n<h2 id=\"计算Path\"><a href=\"#计算Path\" class=\"headerlink\" title=\"计算Path\"></a>计算Path</h2><p>1、初始化完毕后，怎么实现两个竖条到一个三角形的过渡呢？这里首先想到的就是自定义 View 常用的 drawPath 方法，抛开动画不谈，整个 View 变化过程其实就是两个矩形变成两个直角三角形的过程。</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog001.png\" alt = \"实现\"></p>\n<p>就是这个样子。知道大体的思路，怎么搞呢，当然是开车了。</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/FACE001.gif\"></p>\n<p>就是 canvas.drawPath();</p>\n<p>首先计算暂停时两个矩形的各个坐标位置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> distance = mGapWidth;  <span class=\"comment\">//暂停时左右两边矩形距离</span></div><div class=\"line\">     <span class=\"keyword\">float</span> barWidth = mRectWidth / <span class=\"number\">2</span> - distance / <span class=\"number\">2</span>;     <span class=\"comment\">//一个矩形的宽度</span></div><div class=\"line\">     <span class=\"keyword\">float</span> leftLeftTop = barWidth;       <span class=\"comment\">//左边矩形左上角</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">float</span> rightLeftTop = barWidth + distance;       <span class=\"comment\">//右边矩形左上角</span></div><div class=\"line\">     <span class=\"keyword\">float</span> rightRightTop = <span class=\"number\">2</span> * barWidth + distance;  <span class=\"comment\">//右边矩形右上角</span></div><div class=\"line\">     <span class=\"keyword\">float</span> rightRightBottom = rightRightTop; <span class=\"comment\">//右边矩形右下角</span></div></pre></td></tr></table></figure>\n<p>bottom 的话直接加上矩形的高度即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mLeftPath.moveTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">         mLeftPath.lineTo(leftLeftTop, mRectHeight);</div><div class=\"line\">         mLeftPath.lineTo(barWidth, mRectHeight);</div><div class=\"line\">         mLeftPath.lineTo(barWidth, <span class=\"number\">0</span>);</div><div class=\"line\">         mLeftPath.close();</div><div class=\"line\"></div><div class=\"line\">         mRightPath.moveTo(rightLeftTop, <span class=\"number\">0</span>);</div><div class=\"line\">         mRightPath.lineTo(rightLeftTop, mRectHeight);</div><div class=\"line\">         mRightPath.lineTo(rightRightBottom, mRectHeight);</div><div class=\"line\">         mRightPath.lineTo(rightRightTop, <span class=\"number\">0</span>);</div><div class=\"line\">         mRightPath.close();</div></pre></td></tr></table></figure>\n<p>这样两个竖条就出来了。</p>\n<p>2、在一开始写的时候就写了这么多计算的方法，但是这时候矩形的边角会超出 View 的范围，所以后来计算了一波位置：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog02.png\"  alt = \"计算过程2\"></p>\n<p>如上图所示，这样就需要再更改一些参数：</p>\n<p>首先定义出来这个矩形，计算下宽高：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> space = (<span class=\"keyword\">float</span>) (mRadius / Math.sqrt(<span class=\"number\">2</span>)); </div><div class=\"line\">     mRectLT = (<span class=\"keyword\">int</span>) (mRadius - space);</div><div class=\"line\">     <span class=\"keyword\">int</span> rectRB = (<span class=\"keyword\">int</span>) (mRadius + space);</div><div class=\"line\">     mRect.top = mRectLT;</div><div class=\"line\">     mRect.bottom = rectRB;</div><div class=\"line\">     mRect.left = mRectLT;</div><div class=\"line\">     mRect.right = rectRB;</div></pre></td></tr></table></figure>\n<p>然后只用在 确定 path 的路线时更改下坐标就可以了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mLeftPath.moveTo(mRectLT, mRectLT);</div><div class=\"line\">        mLeftPath.lineTo(leftLeftTop + mRectLT, mRectHeight + mRectLT);</div><div class=\"line\">        mLeftPath.lineTo(barWidth + mRectLT, mRectHeight + mRectLT);</div><div class=\"line\">        mLeftPath.lineTo(barWidth + mRectLT, mRectLT);</div><div class=\"line\">        mLeftPath.close();</div><div class=\"line\"></div><div class=\"line\">        mRightPath.moveTo(rightLeftTop + mRectLT, mRectLT);</div><div class=\"line\">        mRightPath.lineTo(rightLeftTop + mRectLT, mRectHeight + mRectLT);</div><div class=\"line\">        mRightPath.lineTo(rightRightBottom + mRectLT, mRectHeight + mRectLT);</div><div class=\"line\">        mRightPath.lineTo(rightRightTop + mRectLT, mRectLT);</div><div class=\"line\">        mRightPath.close();</div></pre></td></tr></table></figure>\n<p>这时候画出来两个 Path，暂停按钮就完美的呈现了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">canvas.drawPath(mLeftPath, mPaint);</div><div class=\"line\">      canvas.drawPath(mRightPath, mPaint);</div></pre></td></tr></table></figure>\n<p>如下图这样：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog01.png\"  alt = \"计算过程1\"></p>\n<h2 id=\"动画实现\"><a href=\"#动画实现\" class=\"headerlink\" title=\"动画实现\"></a>动画实现</h2><p>画完暂停按钮后，怎么让他动画变成三角形呢？一开始我想根据一些宽高的属性来指定动画的变化值，然后更新过程中再画出来，但是计算过程中发现涉及动画的矩形宽度都是从原始的大小到0过渡的，那统一的使用一个参数确定会不会更好点呢？当然会了，从1倍到0变化即可。</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/FACE002.jpg\"></p>\n<p>这时候就可以设置动画属性了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class=\"number\">0</span> , <span class=\"number\">1</span>);</div><div class=\"line\">      valueAnimator.setDuration(<span class=\"number\">200</span>);</div><div class=\"line\">      valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">              mProgress = (<span class=\"keyword\">float</span>) animation.getAnimatedValue();</div><div class=\"line\">              invalidate();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n<p>然后根据 progress 在更新View的过程中来更改矩形的宽高值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">float</span> distance = mGapWidth * (<span class=\"number\">1</span> - mProgress);  <span class=\"comment\">//暂停时左右两边矩形距离</span></div><div class=\"line\">      <span class=\"keyword\">float</span> barWidth = mRectWidth / <span class=\"number\">2</span> - distance / <span class=\"number\">2</span>;     <span class=\"comment\">//一个矩形的宽度</span></div><div class=\"line\">      <span class=\"keyword\">float</span> leftLeftTop = barWidth * mProgress;       <span class=\"comment\">//左边矩形左上角</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">float</span> rightLeftTop = barWidth + distance;       <span class=\"comment\">//右边矩形左上角</span></div><div class=\"line\">      <span class=\"keyword\">float</span> rightRightTop = <span class=\"number\">2</span> * barWidth + distance;  <span class=\"comment\">//右边矩形右上角</span></div><div class=\"line\">      <span class=\"keyword\">float</span> rightRightBottom = rightRightTop - barWidth * mProgress; <span class=\"comment\">//右边矩形右下角</span></div></pre></td></tr></table></figure>\n<p>这样便可以实现两个矩形到三角形的过渡了，执行动画结束后便是这个样子：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog03.png\"  alt = \"计算过程3\"></p>\n<p>两个矩形变成三角形之后，只需要画布旋转一下，两个暂停按钮到播放按钮的动画已经可以执行了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">canvas.rotate(rotation, mWidth / <span class=\"number\">2f</span>, mHeight / <span class=\"number\">2f</span>);</div></pre></td></tr></table></figure>\n<p>到这里基本上已经结束了，但是写完使用的时候总觉得位置有点不对劲，后来发现确实有问题：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog07.png\"  alt = \"计算过程3\"></p>\n<p>如图所示，旋转过后 A 和 C 本来是紧靠着圆周的，而 B 距离圆周还有一定的距离。所以需要将其位移 x 的距离，让 OC 的长度等于 BO 的长度。此时圆心O也是三角形的外心。那么此时可以计算出OF的距离，公式如下：</p>\n<p>√（( r / √2 ) ^ 2 + OF ^ 2） = √2 * r - OF</p>\n<p>得出 OF 的长度为： 3 <em> √2 </em> r / 8</p>\n<p>那么原矩形宽度的一半减去 OF 的值即为右移的距离，计算可得，右移的距离为 √2 * r / 8 用 Java 表示即<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">radius * Math.sqrt(<span class=\"number\">2</span>) / <span class=\"number\">8f</span></div></pre></td></tr></table></figure></p>\n<p>换算为矩形的高度即</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mRectHeight / <span class=\"number\">8f</span></div></pre></td></tr></table></figure>\n<p>然后在画布位移一下即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">canvas.translate((<span class=\"keyword\">float</span>) (mRectHeight * Math.sqrt(<span class=\"number\">2</span>) / <span class=\"number\">8f</span> * mProgress), <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上边几个步骤写完，整体效果已经实现了。后来又设置了一系列自定义的参数方便使用：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;declare-styleable name=\"PlayPauseView\"&gt;</div><div class=\"line\">       &lt;attr name=\"bg_color\" format=\"color\"/&gt;</div><div class=\"line\">       &lt;attr name=\"btn_color\" format=\"color\"/&gt;</div><div class=\"line\">       &lt;attr name=\"gap_width\" format=\"float\"/&gt;</div><div class=\"line\">       &lt;attr name=\"space_padding\" format=\"float\"/&gt;</div><div class=\"line\">       &lt;attr name=\"anim_duration\" format=\"integer\"/&gt;</div><div class=\"line\">       &lt;attr name=\"anim_direction\"&gt;</div><div class=\"line\">           &lt;enum name=\"positive\" value=\"1\"/&gt;</div><div class=\"line\">           &lt;enum name=\"negative\" value=\"2\"/&gt;</div><div class=\"line\">       &lt;/attr&gt;</div><div class=\"line\">   &lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>\n<p>所有代码都已经上传到 <a href=\"https://github.com/Lauzy\">我的Github</a> 上边了，<a href=\"https://github.com/Lauzy/PlayPauseView\">点击可查看</a>，希望提出问题相互讨论，随便给个 Star 再好不过了。<br>有问题交流可加QQ群 661614986 ，欢迎讨论。</p>"},{"title":"沉浸、透明及白底黑字状态栏技巧","date":"2017-03-30T01:25:46.000Z","_content":"\n\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","source":"_posts/201705StatusBar.md","raw":"---\ntitle: 沉浸、透明及白底黑字状态栏技巧\ndate: 2017-03-30 09:25:46\ntags: \n\t- Android Tips\n---\n\n\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","slug":"201705StatusBar","published":1,"updated":"2017-08-15T07:15:50.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6d981390008ho9z134ta0sl","content":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>\n<a id=\"more\"></a>\n<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\" target=\"_blank\" rel=\"external\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">trueView decorView = getWindow().getDecorView();</div><div class=\"line\">true<span class=\"keyword\">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</div><div class=\"line\">truedecorView.setSystemUiVisibility(option);</div><div class=\"line\">truegetWindow().setStatusBarColor(Color.TRANSPARENT);</div><div class=\"line\">true<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">truegetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mToolbar = (Toolbar) findViewById(R.id.toolbar_common);</div><div class=\"line\"><span class=\"keyword\">if</span> (mToolbar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">truemToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());</div><div class=\"line\">truemToolbar.setPadding(<span class=\"number\">0</span>, ScreenUtils.getStatusHeight(getApplicationContext()), <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">truesetSupportActionBar(mToolbar);</div><div class=\"line\">trueActionBar supportActionBar = getSupportActionBar();</div><div class=\"line\">true<span class=\"keyword\">if</span> (supportActionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">truetruesupportActionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">false</span>);  <span class=\"comment\">//此处是为了不显示默认的标题</span></div><div class=\"line\">true&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置状态栏文字为暗色</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">true<span class=\"comment\">//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。</span></div><div class=\"line\">truegetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">truegetWindow().setStatusBarColor(Color.GRAY);  <span class=\"comment\">//21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置</span></div><div class=\"line\">true<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN)&#123;</div><div class=\"line\">truegetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class=\"comment\">//4.4版本本身就含有暗色阴影，不作其他处理即可</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hasFocus)</span> </span>&#123;</div><div class=\"line\">true<span class=\"keyword\">super</span>.onWindowFocusChanged(hasFocus);</div><div class=\"line\">true<span class=\"keyword\">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">truetrueView decorView = getWindow().getDecorView();</div><div class=\"line\">truetruedecorView.setSystemUiVisibility(</div><div class=\"line\">truetrueView.SYSTEM_UI_FLAG_LAYOUT_STABLE</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_FULLSCREEN</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);</div><div class=\"line\">true&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</include></p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\" target=\"_blank\" rel=\"external\">我的Github</a> ，在StatusBar包中。</p>\n","excerpt":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>","more":"<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">trueView decorView = getWindow().getDecorView();</div><div class=\"line\">true<span class=\"keyword\">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</div><div class=\"line\">truedecorView.setSystemUiVisibility(option);</div><div class=\"line\">truegetWindow().setStatusBarColor(Color.TRANSPARENT);</div><div class=\"line\">true<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">truegetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mToolbar = (Toolbar) findViewById(R.id.toolbar_common);</div><div class=\"line\"><span class=\"keyword\">if</span> (mToolbar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">truemToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());</div><div class=\"line\">truemToolbar.setPadding(<span class=\"number\">0</span>, ScreenUtils.getStatusHeight(getApplicationContext()), <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">truesetSupportActionBar(mToolbar);</div><div class=\"line\">trueActionBar supportActionBar = getSupportActionBar();</div><div class=\"line\">true<span class=\"keyword\">if</span> (supportActionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">truetruesupportActionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">false</span>);  <span class=\"comment\">//此处是为了不显示默认的标题</span></div><div class=\"line\">true&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置状态栏文字为暗色</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">true<span class=\"comment\">//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。</span></div><div class=\"line\">truegetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">truegetWindow().setStatusBarColor(Color.GRAY);  <span class=\"comment\">//21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置</span></div><div class=\"line\">true<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN)&#123;</div><div class=\"line\">truegetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class=\"comment\">//4.4版本本身就含有暗色阴影，不作其他处理即可</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hasFocus)</span> </span>&#123;</div><div class=\"line\">true<span class=\"keyword\">super</span>.onWindowFocusChanged(hasFocus);</div><div class=\"line\">true<span class=\"keyword\">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">truetrueView decorView = getWindow().getDecorView();</div><div class=\"line\">truetruedecorView.setSystemUiVisibility(</div><div class=\"line\">truetrueView.SYSTEM_UI_FLAG_LAYOUT_STABLE</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_FULLSCREEN</div><div class=\"line\">truetrue| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);</div><div class=\"line\">true&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\">我的Github</a> ，在StatusBar包中。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj6d9812x0001ho9z4pbx2c7y","tag_id":"cj6d981320004ho9zei9qmh4v","_id":"cj6d9813a000aho9zzciqvkoo"},{"post_id":"cj6d981300003ho9z8efy84un","tag_id":"cj6d9813a0009ho9zb099t4zv","_id":"cj6d9813b000cho9zug2l7kyk"},{"post_id":"cj6d981360006ho9zybnpukjd","tag_id":"cj6d9813a0009ho9zb099t4zv","_id":"cj6d9813c000eho9z9hidv32x"},{"post_id":"cj6d981370007ho9zpjkoaoqe","tag_id":"cj6d9813b000dho9zw1cpnj6e","_id":"cj6d9813c000gho9zyj7frk9p"},{"post_id":"cj6d981390008ho9z134ta0sl","tag_id":"cj6d9813c000fho9z9jrmgzao","_id":"cj6d9813c000hho9zgtr657tr"}],"Tag":[{"name":"Android 手势交互","_id":"cj6d981320004ho9zei9qmh4v"},{"name":"Android 解析","_id":"cj6d9813a0009ho9zb099t4zv"},{"name":"Android 自定义View","_id":"cj6d9813b000dho9zw1cpnj6e"},{"name":"Android Tips","_id":"cj6d9813c000fho9z9jrmgzao"}]}}