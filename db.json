{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/hexo_avatar.png","path":"images/hexo_avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5266cccde3be517a5fdfbe2127507c362ba6c9c9","modified":1490949699368},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1490841910723},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1490841910723},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1490841910724},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1490841910724},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1490841910724},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1490841910724},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1490841910725},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1490841910725},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1490841910725},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1490841910725},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1490841910726},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1490841910726},{"_id":"themes/next/_config.yml","hash":"5863c7a5df77459b1319a9fdb981141ad79af395","modified":1492654534703},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1490841910726},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1490841910727},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1490841910745},{"_id":"source/_posts/Behavior.md","hash":"90548bb86eaa23d267bbb83e7b467820dab7c2ca","modified":1492754887871},{"_id":"source/_posts/透明(沉浸)状态栏.md","hash":"f88b044a69a9aec15cefe6bc8d9abdcf396862d7","modified":1492765231641},{"_id":"source/about/index.md","hash":"86a2614200c5041ad8f31b53d4d0060d20a5ddd5","modified":1492663467679},{"_id":"source/categories/index.md","hash":"a9ca5ffb083f0ffc9b1e2d77d6a5b82079409c31","modified":1492663475877},{"_id":"source/images/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1490855383720},{"_id":"source/tags/index.md","hash":"afc8bcd842601d66b9edd8505f46a7f259f21148","modified":1492663486514},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1490841910727},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1490841910727},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1490841910728},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1490841910728},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1490841910728},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1490841910728},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1490841910729},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1490841910729},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1490841910729},{"_id":"themes/next/languages/ru.yml","hash":"7e19ee6f8c764a68b0b25a139ca3dc17b68d382e","modified":1490841910729},{"_id":"themes/next/languages/zh-Hans.yml","hash":"003434865efe5588f37750b4833745793b4c0923","modified":1490949699368},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1490841910730},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1490841910730},{"_id":"themes/next/layout/_layout.swig","hash":"1dc354c74b965827bca18971ce9d3d25a57de96f","modified":1490841910731},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1490859436743},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1490949699369},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1490841910744},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1490841910745},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1490841910745},{"_id":"themes/next/layout/schedule.swig","hash":"459cd6d9887b7a2ebda9ba3a5585a718904adb02","modified":1490841910745},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1490841910745},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1490841910746},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1490841910746},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1490841910801},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1490841910801},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1490841910801},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490841910765},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1490841910730},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1490841910730},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1490841910731},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1490841910731},{"_id":"themes/next/layout/_macro/post.swig","hash":"79851872b6b4fbd24e4a5a946f263da85b0c265d","modified":1490841910731},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1490841910732},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1490841910732},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1490841910732},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1490841910733},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1490841910733},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1490841910733},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1490841910734},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1490841910734},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1490841910734},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1490841910734},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1490841910736},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1490841910736},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"bd174c8ad620da37616cad735503fc847240a3e7","modified":1490841910737},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1490841910742},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1490841910742},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1490841910742},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1490841910742},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1490841910747},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1490841910747},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1490841910747},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1490841910747},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1490841910748},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1490841910748},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1490841910765},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1490841910765},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490841910765},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1490841910766},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1490841910766},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1490841910766},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1490841910766},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1490841910767},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1490841910767},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1490841910767},{"_id":"themes/next/source/images/hexo_avatar.png","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1490843017159},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490841910767},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490841910767},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1490841910767},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1490841910767},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490841910768},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490841910737},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490841910737},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490841910760},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490841910759},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490841910764},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490841910759},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490841910764},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1490841910733},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1490841910734},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1490841910735},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1490841910735},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1490841910735},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1490841910735},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1490841910735},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1490841910735},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1490841910736},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1490841910737},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1490841910737},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1490841910738},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1490841910738},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1490841910738},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1490841910739},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1490841910739},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1490841910739},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1490841910739},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1490841910739},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1490841910739},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1490841910740},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1490841910740},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1490841910740},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1490841910740},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1490841910740},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1490841910741},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1490841910741},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1490841910741},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1490841910741},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1490841910741},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1490841910743},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1490841910743},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1490841910744},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1490841910744},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1490841910760},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1490841910760},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1490841910759},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1490841910763},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1490841910764},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1490841910764},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1490841910768},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1490841910768},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1490841910768},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1490841910768},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1490841910769},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1490841910769},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1490841910769},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1490841910769},{"_id":"themes/next/source/js/src/utils.js","hash":"988f29f78e68fa184c4412b722f5895fa78a4783","modified":1490841910769},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490841910770},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490841910773},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1490841910774},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1490841910774},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1490841910778},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1490841910778},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1490841910778},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1490841910778},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1490841910779},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1490841910779},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1490841910779},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1490841910779},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1490841910779},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1490841910792},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1490841910792},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1490841910792},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1490841910793},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1490841910793},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1490841910792},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1490841910791},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"b070490e0588c4625e84bcd4f847dc6275a97a81","modified":1490841910793},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1490841910798},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1490841910797},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1490841910800},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1490841910800},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1490841910800},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1490841910792},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1490841910743},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1490841910743},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1490841910748},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1490841910749},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1490841910749},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1490841910749},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1490841910752},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1490841910748},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1490841910755},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1490841910758},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1490841910758},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1490841910759},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1490841910759},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1490841910759},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1490841910759},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1490841910760},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1490841910760},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1490841910760},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1490841910761},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1490841910761},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1490841910761},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1490841910761},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1490841910762},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1490841910762},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1490841910762},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1490841910762},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1490841910762},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1490841910762},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1490841910763},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1490841910763},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1490841910763},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1490841910763},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1490841910763},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1490841910769},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490841910774},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490841910774},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490841910775},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490841910775},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490841910775},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1490841910776},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1490841910777},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1490841910777},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490841910774},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1490841910779},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490841910779},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1490841910780},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1490841910780},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1490841910781},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1490841910797},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1490841910797},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1490841910790},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1490841910791},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1490841910799},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1490841910749},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1490841910749},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1490841910749},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1490841910750},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1490841910750},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1490841910750},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d406a09af606be82f716c15e4ad597b7fdcf0728","modified":1490841910751},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1490841910750},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1490841910751},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1490841910751},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1490841910751},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1490841910751},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1490841910751},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1490841910752},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1490841910752},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1490841910752},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1490841910752},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1490841910753},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1490841910753},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1490841910753},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1490841910753},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1490841910753},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1490841910753},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1490841910753},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1490841910753},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1490841910754},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1490841910754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1490841910754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1490841910754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1490841910754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1490841910754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1490841910754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1490841910755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1490841910755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1490841910755},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1490841910755},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1490841910757},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1490841910757},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1490841910757},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1490841910757},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1490841910758},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1490841910758},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1490841910758},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1490841910758},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1490841910756},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1490841910756},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1490841910756},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1490841910756},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1490841910756},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1490841910756},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1490841910761},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1490841910761},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1490841910762},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490841910775},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1490841910775},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1490841910776},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1490841910776},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1490841910776},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1490841910776},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1490841910782},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1490841910784},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1490841910790},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1490841910773},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1490841910797},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1490841910788},{"_id":"public/categories/index.html","hash":"7e3a4977ddc024040202bb42a92670036922cbbb","modified":1492754966120},{"_id":"public/about/index.html","hash":"df3a0ebdd3e384455c161a32904ff732dd77cbad","modified":1492754966120},{"_id":"public/tags/index.html","hash":"ffc9fb70e22e6ee67409e90e6e837f3a90211103","modified":1492754966121},{"_id":"public/categories/Android/index.html","hash":"71812ff26872a85666925bb96d7f6dda788f262b","modified":1492754966121},{"_id":"public/tags/Android-Tips/index.html","hash":"b3f2145cea281e78f64308cff0299e1a220da1aa","modified":1492754966121},{"_id":"public/tags/自定义View/index.html","hash":"463f44f1cdc9e788a296904cbe5ac33ceda96684","modified":1492754966121},{"_id":"public/archives/index.html","hash":"bef2d285eac1c94f83ff06c2673a4615d30b7690","modified":1492754966121},{"_id":"public/archives/2017/index.html","hash":"ebb44495124fcdff03a313d056c485ec47feb68a","modified":1492754966121},{"_id":"public/archives/2017/03/index.html","hash":"b24220fdd1490a11c83739c989eab0ad989aa6d5","modified":1492754966122},{"_id":"public/archives/2017/04/index.html","hash":"933fa5f3c0d791794b50ce7be2513be6e4623c46","modified":1492754966122},{"_id":"public/2017/04/14/Behavior/index.html","hash":"200e352f23dd9a7caaf595447ef8bd870559bcce","modified":1492754966122},{"_id":"public/2017/03/30/透明(沉浸)状态栏/index.html","hash":"8bfb315f41d4185d8d6d1270a22403b3a9b01940","modified":1492754966122},{"_id":"public/index.html","hash":"f9a68dbea3b38e49d79f67e0766694d72a9fccb7","modified":1492754966122},{"_id":"public/CNAME","hash":"5266cccde3be517a5fdfbe2127507c362ba6c9c9","modified":1492754966135},{"_id":"public/images/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1492754966135},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1492754966135},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492754966135},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1492754966135},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1492754966135},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1492754966135},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1492754966135},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1492754966135},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1492754966135},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1492754966135},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492754966136},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492754966136},{"_id":"public/images/hexo_avatar.png","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1492754966136},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1492754966136},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492754966136},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1492754966136},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1492754966136},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1492754966136},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492754966136},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492754966136},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492754966136},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492754966136},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492754966136},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492754966136},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1492754966136},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492754966136},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1492754966805},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1492754966812},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1492754966825},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1492754966825},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1492754966825},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1492754966825},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1492754966825},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1492754966825},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1492754966825},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1492754966825},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492754966825},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492754966825},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1492754966825},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1492754966825},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1492754966825},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1492754966825},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1492754966825},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1492754966825},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1492754966825},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1492754966825},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1492754966825},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1492754966825},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1492754966825},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1492754966826},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1492754966826},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492754966826},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1492754966826},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1492754966826},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1492754966826},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1492754966826},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1492754966826},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1492754966826},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1492754966826},{"_id":"public/css/main.css","hash":"eb6857a404817e47400364bac8c41716df89335e","modified":1492754966826},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1492754966826},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1492754966826},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1492754966826},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1492754966826},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1492754966826},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1492754966826},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1492754966826},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1492754966826},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1492754966826},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1492754966826},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1492754966826},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1492754966827},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1492754966827},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1492754966827},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1492754966827},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1492754966844}],"Category":[{"name":"Android","_id":"cj1rfrirl00048or69kyyi8ea"}],"Data":[],"Page":[{"title":"分类","date":"2017-03-30T03:19:10.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-30 11:19:10\ntype: categories\ncomments: false\n---\n","updated":"2017-04-20T04:44:35.877Z","path":"categories/index.html","layout":"page","_id":"cj1rfrirf00018or6hefi5cnt","content":"","excerpt":"","more":""},{"title":"PaleRider","date":"2017-03-30T03:22:00.000Z","comments":0,"_content":"\n\n<h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2>\n<center></center>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: PaleRider\ndate: 2017-03-30 11:22:00\ncomments: false\n---\n\n\n<h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2>\n<center></center>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","updated":"2017-04-20T04:44:27.679Z","path":"about/index.html","layout":"page","_id":"cj1rfrirj00038or6cmip5kzy","content":"<p></p><h2 align=\"center\">世界微尘里，吾宁爱与憎。</h2><p></p>\n<p><center></center></p>\n<h3 align=\"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"","more":"<p><h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2></p>\n<p><center></center></p>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"标签","date":"2017-03-30T03:15:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-30 11:15:04\ntype: tags\ncomments: false\n---\n","updated":"2017-04-20T04:44:46.514Z","path":"tags/index.html","layout":"page","_id":"cj1rfrirp00068or6po4i303z","content":"","excerpt":"","more":""}],"Post":[{"title":"沉浸、透明及白底黑字状态栏技巧","date":"2017-03-30T01:25:46.000Z","_content":"\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","source":"_posts/透明(沉浸)状态栏.md","raw":"---\ntitle: 沉浸、透明及白底黑字状态栏技巧\ndate: 2017-03-30 09:25:46\ncategory: Android\ntags: \n\t- Android Tips\n---\n\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","slug":"透明(沉浸)状态栏","published":1,"updated":"2017-04-21T09:16:38.258Z","_id":"cj1rfrira00008or6ibehupwf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>\n<a id=\"more\"></a>\n<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\" target=\"_blank\" rel=\"external\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">\tView decorView = getWindow().getDecorView();</div><div class=\"line\">\t<span class=\"keyword\">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</div><div class=\"line\">\tdecorView.setSystemUiVisibility(option);</div><div class=\"line\">\tgetWindow().setStatusBarColor(Color.TRANSPARENT);</div><div class=\"line\">\t<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mToolbar = (Toolbar) findViewById(R.id.toolbar_common);</div><div class=\"line\"><span class=\"keyword\">if</span> (mToolbar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());</div><div class=\"line\">\tmToolbar.setPadding(<span class=\"number\">0</span>, ScreenUtils.getStatusHeight(getApplicationContext()), <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\tsetSupportActionBar(mToolbar);</div><div class=\"line\">\tActionBar supportActionBar = getSupportActionBar();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (supportActionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tsupportActionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">false</span>);  <span class=\"comment\">//此处是为了不显示默认的标题</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置状态栏文字为暗色</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">\t<span class=\"comment\">//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。</span></div><div class=\"line\">\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">\tgetWindow().setStatusBarColor(Color.GRAY);  <span class=\"comment\">//21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置</span></div><div class=\"line\">\t<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN)&#123;</div><div class=\"line\">\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class=\"comment\">//4.4版本本身就含有暗色阴影，不作其他处理即可</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hasFocus)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onWindowFocusChanged(hasFocus);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">\t\tView decorView = getWindow().getDecorView();</div><div class=\"line\">\t\tdecorView.setSystemUiVisibility(</div><div class=\"line\">\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</include></p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\" target=\"_blank\" rel=\"external\">我的Github</a> ，在StatusBar包中。</p>\n","excerpt":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>","more":"<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">\tView decorView = getWindow().getDecorView();</div><div class=\"line\">\t<span class=\"keyword\">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</div><div class=\"line\">\tdecorView.setSystemUiVisibility(option);</div><div class=\"line\">\tgetWindow().setStatusBarColor(Color.TRANSPARENT);</div><div class=\"line\">\t<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mToolbar = (Toolbar) findViewById(R.id.toolbar_common);</div><div class=\"line\"><span class=\"keyword\">if</span> (mToolbar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());</div><div class=\"line\">\tmToolbar.setPadding(<span class=\"number\">0</span>, ScreenUtils.getStatusHeight(getApplicationContext()), <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\tsetSupportActionBar(mToolbar);</div><div class=\"line\">\tActionBar supportActionBar = getSupportActionBar();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (supportActionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tsupportActionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">false</span>);  <span class=\"comment\">//此处是为了不显示默认的标题</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置状态栏文字为暗色</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">\t<span class=\"comment\">//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。</span></div><div class=\"line\">\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">\tgetWindow().setStatusBarColor(Color.GRAY);  <span class=\"comment\">//21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置</span></div><div class=\"line\">\t<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN)&#123;</div><div class=\"line\">\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class=\"comment\">//4.4版本本身就含有暗色阴影，不作其他处理即可</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hasFocus)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onWindowFocusChanged(hasFocus);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">\t\tView decorView = getWindow().getDecorView();</div><div class=\"line\">\t\tdecorView.setSystemUiVisibility(</div><div class=\"line\">\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\">我的Github</a> ，在StatusBar包中。</p>"},{"title":"LBehavior","date":"2017-04-14T08:25:46.000Z","_content":"\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/%E5%B1%95%E7%A4%BA%E5%9B%BE1.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/%E5%B1%95%E7%A4%BA%E5%9B%BE2.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","source":"_posts/Behavior.md","raw":"---\ntitle: LBehavior\ndate: 2017-04-14 16:25:46\ncategory: Android\ntags: \n\t- 自定义View\n---\n\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/%E5%B1%95%E7%A4%BA%E5%9B%BE1.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/%E5%B1%95%E7%A4%BA%E5%9B%BE2.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","slug":"Behavior","published":1,"updated":"2017-04-21T06:08:07.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1rfrirg00028or6o11vejg0","content":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/%E5%B1%95%E7%A4%BA%E5%9B%BE1.gif\" width=\"270\" height=\"450\" alt=\"效果图1\"><img src=\"http://oop6dcmck.bkt.clouddn.com/%E5%B1%95%E7%A4%BA%E5%9B%BE2.gif\" width=\"270\" height=\"450\" alt=\"效果图2\"></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\" target=\"_blank\" rel=\"external\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\" target=\"_blank\" rel=\"external\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">layoutDependsOn</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> dependency <span class=\"keyword\">instanceof</span> AppBarLayout;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDependentViewChanged</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">\toffsetChildAsNeeded(parent， child， dependency);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断是否垂直滑动</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 触发滑动嵌套滚动之前调用的方法</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">   * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">   * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View(实现NestedScrollingChild接口)</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dx                滑动的X轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dy                滑动的Y轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </span></span></div><div class=\"line\"><span class=\"keyword\">int</span> dx， <span class=\"keyword\">int</span> dy， <span class=\"keyword\">int</span>[] consumed) &#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 滑动嵌套滚动时触发的方法</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">    * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxConsumed        TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyConsumed        TargetView消费的Y轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxUnconsumed      未被TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，</div><div class=\"line\"> *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </span></span></div><div class=\"line\">\t<span class=\"keyword\">int</span> dxConsumed， <span class=\"keyword\">int</span> dyConsumed， <span class=\"keyword\">int</span> dxUnconsumed， <span class=\"keyword\">int</span> dyUnconsumed) &#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout， child， target， </div><div class=\"line\">\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断垂直滑动</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (isInit) &#123;<span class=\"comment\">// 设置标记，防止new Anim导致的parent和child坐标变化</span></div><div class=\"line\">           mCommonAnim = <span class=\"keyword\">new</span> LTitleBehaviorAnim(child);</div><div class=\"line\">           isInit = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy, <span class=\"keyword\">int</span>[] consumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mCommonAnim != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mCommonAnim.setDuration(mDuration);</div><div class=\"line\">           mCommonAnim.setInterpolator(mInterpolator);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dxConsumed, <span class=\"keyword\">int</span> dyConsumed, <span class=\"keyword\">int</span> dxUnconsumed, <span class=\"keyword\">int</span> dyUnconsumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (dyConsumed &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (isHide) &#123;</div><div class=\"line\">               mCommonAnim.show();</div><div class=\"line\">               isHide = <span class=\"keyword\">false</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dyConsumed &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!isHide) &#123;</div><div class=\"line\">               mCommonAnim.hide();</div><div class=\"line\">               isHide = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LBottomBehaviorAnim</span><span class=\"params\">(View bottomView)</span> </span>&#123;</div><div class=\"line\">       mBottomView = bottomView;</div><div class=\"line\">       mOriginalY = mBottomView.getY();<span class=\"comment\">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//显示</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hide</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//隐藏</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(Math.abs(dyConsumed) &gt; minScrollY)&#123;</div><div class=\"line\">\t...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mTotalScrollY += dyConsumed;<span class=\"comment\">//累加消费的距离</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (Math.abs(dyConsumed) &gt; minScrollY || Math.abs(mTotalScrollY) &gt; scrollYDistance) &#123;</div><div class=\"line\">\t...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">       mTotalScrollY = <span class=\"number\">0</span>;<span class=\"comment\">//动画执行完毕后重置</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CommonBehavior <span class=\"title\">from</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       ViewGroup.LayoutParams params = view.getLayoutParams();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> CoordinatorLayout.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view is not a child of CoordinatorLayout\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(behavior <span class=\"keyword\">instanceof</span> CommonBehavior)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (CommonBehavior) behavior;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>然后可以设置对象的属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setDuration</span><span class=\"params\">(<span class=\"keyword\">int</span> duration)</span> </span>&#123;</div><div class=\"line\">       mDuration = duration;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setInterpolator</span><span class=\"params\">(Interpolator interpolator)</span> </span>&#123;</div><div class=\"line\">       mInterpolator = interpolator;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setMinScrollY</span><span class=\"params\">(<span class=\"keyword\">int</span> minScrollY)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.minScrollY = minScrollY;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setScrollYDistance</span><span class=\"params\">(<span class=\"keyword\">int</span> scrollYDistance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.scrollYDistance = scrollYDistance;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">\t    ...</div><div class=\"line\">\t    maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">   dependencies &#123;</div><div class=\"line\">    compile <span class=\"string\">'com.github.Lauzy:LBehavior:1.0.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\" target=\"_blank\" rel=\"external\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">CommonBehavior.from(mFloatingActionButton)</div><div class=\"line\">\t.setMinScrollY(<span class=\"number\">20</span>)</div><div class=\"line\">\t.setScrollYDistance(<span class=\"number\">100</span>)</div><div class=\"line\">\t.setDuration(<span class=\"number\">1000</span>)</div><div class=\"line\">\t.setInterpolator(<span class=\"keyword\">new</span> LinearOutSlowInInterpolator());</div></pre></td></tr></table></figure>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>。</p>\n","excerpt":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>","more":"<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/%E5%B1%95%E7%A4%BA%E5%9B%BE1.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/%E5%B1%95%E7%A4%BA%E5%9B%BE2.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">layoutDependsOn</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> dependency <span class=\"keyword\">instanceof</span> AppBarLayout;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDependentViewChanged</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">\toffsetChildAsNeeded(parent， child， dependency);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断是否垂直滑动</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * 触发滑动嵌套滚动之前调用的方法</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">   * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">   * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View(实现NestedScrollingChild接口)</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dx                滑动的X轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dy                滑动的Y轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </div><div class=\"line\"><span class=\"keyword\">int</span> dx， <span class=\"keyword\">int</span> dy， <span class=\"keyword\">int</span>[] consumed)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 滑动嵌套滚动时触发的方法</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">    * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxConsumed        TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyConsumed        TargetView消费的Y轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxUnconsumed      未被TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，</div><div class=\"line\"> *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </div><div class=\"line\">\t<span class=\"keyword\">int</span> dxConsumed， <span class=\"keyword\">int</span> dyConsumed， <span class=\"keyword\">int</span> dxUnconsumed， <span class=\"keyword\">int</span> dyUnconsumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout， child， target， </div><div class=\"line\">\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断垂直滑动</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (isInit) &#123;<span class=\"comment\">// 设置标记，防止new Anim导致的parent和child坐标变化</span></div><div class=\"line\">           mCommonAnim = <span class=\"keyword\">new</span> LTitleBehaviorAnim(child);</div><div class=\"line\">           isInit = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy, <span class=\"keyword\">int</span>[] consumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mCommonAnim != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mCommonAnim.setDuration(mDuration);</div><div class=\"line\">           mCommonAnim.setInterpolator(mInterpolator);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dxConsumed, <span class=\"keyword\">int</span> dyConsumed, <span class=\"keyword\">int</span> dxUnconsumed, <span class=\"keyword\">int</span> dyUnconsumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (dyConsumed &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (isHide) &#123;</div><div class=\"line\">               mCommonAnim.show();</div><div class=\"line\">               isHide = <span class=\"keyword\">false</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dyConsumed &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!isHide) &#123;</div><div class=\"line\">               mCommonAnim.hide();</div><div class=\"line\">               isHide = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LBottomBehaviorAnim</span><span class=\"params\">(View bottomView)</span> </span>&#123;</div><div class=\"line\">       mBottomView = bottomView;</div><div class=\"line\">       mOriginalY = mBottomView.getY();<span class=\"comment\">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//显示</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hide</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//隐藏</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(Math.abs(dyConsumed) &gt; minScrollY)&#123;</div><div class=\"line\">\t...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mTotalScrollY += dyConsumed;<span class=\"comment\">//累加消费的距离</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (Math.abs(dyConsumed) &gt; minScrollY || Math.abs(mTotalScrollY) &gt; scrollYDistance) &#123;</div><div class=\"line\">\t...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">       mTotalScrollY = <span class=\"number\">0</span>;<span class=\"comment\">//动画执行完毕后重置</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CommonBehavior <span class=\"title\">from</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       ViewGroup.LayoutParams params = view.getLayoutParams();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> CoordinatorLayout.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view is not a child of CoordinatorLayout\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(behavior <span class=\"keyword\">instanceof</span> CommonBehavior)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (CommonBehavior) behavior;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>然后可以设置对象的属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setDuration</span><span class=\"params\">(<span class=\"keyword\">int</span> duration)</span> </span>&#123;</div><div class=\"line\">       mDuration = duration;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setInterpolator</span><span class=\"params\">(Interpolator interpolator)</span> </span>&#123;</div><div class=\"line\">       mInterpolator = interpolator;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setMinScrollY</span><span class=\"params\">(<span class=\"keyword\">int</span> minScrollY)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.minScrollY = minScrollY;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setScrollYDistance</span><span class=\"params\">(<span class=\"keyword\">int</span> scrollYDistance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.scrollYDistance = scrollYDistance;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">\t    ...</div><div class=\"line\">\t    maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">   dependencies &#123;</div><div class=\"line\">    compile <span class=\"string\">'com.github.Lauzy:LBehavior:1.0.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">CommonBehavior.from(mFloatingActionButton)</div><div class=\"line\">\t.setMinScrollY(<span class=\"number\">20</span>)</div><div class=\"line\">\t.setScrollYDistance(<span class=\"number\">100</span>)</div><div class=\"line\">\t.setDuration(<span class=\"number\">1000</span>)</div><div class=\"line\">\t.setInterpolator(<span class=\"keyword\">new</span> LinearOutSlowInInterpolator());</div></pre></td></tr></table></figure>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1rfrirg00028or6o11vejg0","category_id":"cj1rfrirl00048or69kyyi8ea","_id":"cj1rfriry000c8or65mlamz9e"},{"post_id":"cj1rfrira00008or6ibehupwf","category_id":"cj1rfrirl00048or69kyyi8ea","_id":"cj1rmga9o000124r6gi2vo7cy"}],"PostTag":[{"post_id":"cj1rfrirg00028or6o11vejg0","tag_id":"cj1rfrirr00088or6w7pa2f1n","_id":"cj1rfriry000b8or6jacru9ut"},{"post_id":"cj1rfrira00008or6ibehupwf","tag_id":"cj1rfriro00058or66937zyot","_id":"cj1rmga9n000024r6h9yihedh"}],"Tag":[{"name":"Android Tips","_id":"cj1rfriro00058or66937zyot"},{"name":"自定义View","_id":"cj1rfrirr00088or6w7pa2f1n"}]}}