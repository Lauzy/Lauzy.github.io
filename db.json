{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/avatar_64.png","path":"img/avatar_64.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/hexo_avatar.png","path":"img/hexo_avatar.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/scent.jpg","path":"img/scent.jpg","modified":1,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/mathjax.js","path":"js/mathjax.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":1,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":1,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/md_bg.jpg","path":"img/md_bg.jpg","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5266cccde3be517a5fdfbe2127507c362ba6c9c9","modified":1490949699368},{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1491698830000},{"_id":"themes/material/.gitignore","hash":"ffb6e750dc55e77b319a191fd1a58cee81c52803","modified":1495878438278},{"_id":"themes/material/.travis.yml","hash":"93eb4648349274ffda0c146bbc019d1d2cd57ca3","modified":1491698830000},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1491698830000},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1491698830000},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1491698830000},{"_id":"themes/material/README.md","hash":"6a923654c0a277bc69e05199e8402236055e008f","modified":1491698830000},{"_id":"themes/material/_config.template.yml","hash":"9515de05b9ba9718153a1ea2efece05171052231","modified":1491698830000},{"_id":"themes/material/_config.yml","hash":"c541094f88ad4b5c07c02e668afe87c8bd8df0b5","modified":1496392399443},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1491698830000},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1491698830000},{"_id":"themes/material/package.json","hash":"70735fb11fb59c266e0ac3168555e47dd9865504","modified":1491698830000},{"_id":"source/_posts/Behavior.md","hash":"f53a8d81b7320122ad0e515ef677fe7561857daa","modified":1495874954066},{"_id":"source/_posts/Java注解，安卓IOC.md","hash":"3d347f382504f66328f976fe118e57b6cf9298fc","modified":1495874984404},{"_id":"source/_posts/拖拽图片.md","hash":"7af0ea23b06ee1b49c4ef1890282478a4f454ca3","modified":1495874969466},{"_id":"source/_posts/透明(沉浸)状态栏.md","hash":"1f96978faa44e39c4e21caf38f9e7be383a00ed0","modified":1492766493734},{"_id":"source/about/index.md","hash":"070bd829e9190560243eb3a46afc3af70da6c1c5","modified":1495874712467},{"_id":"source/categories/index.md","hash":"a9ca5ffb083f0ffc9b1e2d77d6a5b82079409c31","modified":1492663475877},{"_id":"source/images/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1490855383720},{"_id":"source/tags/index.md","hash":"195bd3d39893c5e329c757701f8ef097f6dd35fa","modified":1495873660265},{"_id":"themes/material/languages/ar.yml","hash":"6df33c661d97cb096a2b8a338fd42c6b7cf72e19","modified":1491698830000},{"_id":"themes/material/languages/de.yml","hash":"d7483dc78b2477de3f1d5b4675ff12f2bd47b937","modified":1491698830000},{"_id":"themes/material/languages/en.yml","hash":"518822aada4fbe8f5af85243d5e0b73b79a288d3","modified":1491698830000},{"_id":"themes/material/languages/es.yml","hash":"e24ab8de3d9cd71548adefa11b179ab0c6e3dd2c","modified":1491698830000},{"_id":"themes/material/languages/fr.yml","hash":"dd8c477e656c50e9dced6b7f439d284392213d2b","modified":1491698830000},{"_id":"themes/material/languages/ja.yml","hash":"062cfff0e32bdb64f27f6f18e552d118eabdf95a","modified":1491698830000},{"_id":"themes/material/languages/ms.yml","hash":"c78fd5335e9008e1195c5784b597b68c1d39429a","modified":1491698830000},{"_id":"themes/material/languages/pt-BR.yml","hash":"ce712c6d79c3d3243b5ae189d2fa7c0adfcb8a25","modified":1491698830000},{"_id":"themes/material/languages/zh-CN.yml","hash":"7e1acb427a8f24753d2583368db05355837b8e2d","modified":1491698830000},{"_id":"themes/material/languages/zh-TW.yml","hash":"cbd420929699cf6be1d05b211a151e17e87dfc87","modified":1491698830000},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1491698830000},{"_id":"themes/material/layout/layout.ejs","hash":"0a5926ca361e8ce1bb4aadab112ba3b486f21716","modified":1491698830000},{"_id":"themes/material/layout/post.ejs","hash":"3d4f506e8def5b776a904dcfefe9ac1eca3fae76","modified":1491698830000},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491698830000},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"45eb5dc723d36e32553038422061cba6828957a1","modified":1491698830000},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"b5d558738b27ba16fef80399cc56a50e26c49f26","modified":1491698830000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"27acecc8a603a5dc7ccd9e08bd7084439b15f6ec","modified":1491698830000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"5c46780e439d6ae86e602ad41fe178b288cab9c0","modified":1491698830000},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"36d3798224bf7dff7c0659876c5ad8a4785198e2","modified":1491698830000},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1491698830000},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"c4aaeebf103dc5131ca2fe5039ae92e40fe86a29","modified":1491698830000},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"82a5f8dc6855d0d25ddfafd1a7ecce46da8208f2","modified":1491698830000},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"e1e9ae721a0f513848dcadfcd351fefbad524bee","modified":1491698830000},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"22f377c0ba70d930a66dfcc775f216a560746996","modified":1491698830000},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"5214273ce0a7888a3c1330ca2a9bc8622ece132d","modified":1491698830000},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"be73b6e10da780defc535ad4503129be8eb2befc","modified":1491698830000},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"a794e79790594be252d6528631f378c063025d8d","modified":1491698830000},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"dfcb4d7fc0ee401613f7fa2ef22614e3e4ba3305","modified":1491698830000},{"_id":"themes/material/layout/_partial/head.ejs","hash":"c9cfe7ef2582f8b91fc00060aa50d26eac0a8e04","modified":1491698830000},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"a09351ec6a42d406b1f7641301ba338249c34568","modified":1491698830000},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"22d99afc913db8555306b23206394f424c36df62","modified":1491698830000},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1491698830000},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"02374b20989c81031e29257d872624d5195ddcbd","modified":1491698830000},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"e5c1271b94d66597812cdf88057c8690bfe72d55","modified":1491698830000},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"2f9d670b17e7763ae595593e9881284dc6c1bada","modified":1491698830000},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"7b291719414408a9ec0b9167a2c6c834f90905b3","modified":1491698830000},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1491698830000},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"ea7ff13f099ebd9a0caad26621f4a23b26b72309","modified":1491698830000},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"d18344f05712f66e0385839e4d83d5a3a515c140","modified":1491698830000},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"eaedc9861342f9f4c85bf86aed7b9b9627887bac","modified":1491698830000},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1491698830000},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"38bbf3c7b3606845905b854a1649a481a1239ddd","modified":1491698830000},{"_id":"themes/material/layout/_widget/changyan.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1491698830000},{"_id":"themes/material/layout/_widget/disqus.ejs","hash":"64be5e0ac74b012b91f70bbfbaec42fa663d4c13","modified":1491698830000},{"_id":"themes/material/layout/_widget/disqus_click.ejs","hash":"ff0fd6dfd4fe38b08c031373bee0fa0b76a41385","modified":1491698830000},{"_id":"themes/material/layout/_widget/duoshuo.ejs","hash":"ae09d002bf5d3517ccde7f580dde20e0d47f627f","modified":1491698830000},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"f0cd9956fde4437fecb01e322ff025ad307c240a","modified":1491698830000},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"630796a1377a3a0fc378baa377b05926f6e0b8f4","modified":1491698830000},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1491698830000},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"4cd6f3bc8278a6f1010f485d52e1f0ba7bf00fb4","modified":1491698830000},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"7d4131dbecb4168f9b0ab536278b7e7bcafba4f2","modified":1491698830000},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"99b5fe45a1130f961a299ed4bf35e2c4a38a0d21","modified":1491698830000},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"75ce946ba9717ede360035853f5de873f00b57cb","modified":1491698830000},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e184ca7f8519936903248b7797d281fad35b9521","modified":1491698830000},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9040f18f96dcc0ac44cb2b4d3b53bc6630207279","modified":1491698830000},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"475c507773be23c87e63e22d8474ead06a5ebd49","modified":1491698830000},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"c363e3c208eae18e7c440160790fafba110fa9c9","modified":1491698830000},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1491698830000},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1491698830000},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1491698830000},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1491698830000},{"_id":"themes/material/source/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1491698830000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1491698830000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1491698830000},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1491698830000},{"_id":"themes/material/source/img/avatar_64.png","hash":"1aa6f07c762c921490463ca6ebe12f8d4180a92f","modified":1495864455202},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1491698830000},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1491698830000},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1491698830000},{"_id":"themes/material/source/img/hexo_avatar.png","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1490843017159},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1491698830000},{"_id":"themes/material/source/img/scent.jpg","hash":"74650d8a4d634786c01651775e49ebc6ce5e8cd7","modified":1495873816005},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1491698830000},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1491698830000},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1491698830000},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1491698830000},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1491698830000},{"_id":"themes/material/source/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1491698830000},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1491698830000},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1491698830000},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1491698830000},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1491698830000},{"_id":"themes/material/source/css/style.css","hash":"b423b687cfa2723554b7b42eab799a69ababa978","modified":1491698830000},{"_id":"themes/material/source/css/style.min.css","hash":"25874013ac8a604058ddbe58cb33a2e3fa5b9b3c","modified":1491698830000},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1491698830000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1491698830000},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1491698830000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1491698830000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1491698830000},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1491698830000},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1491698830000},{"_id":"themes/material/source/js/js.js","hash":"4634558bdb27ca5a2f728d6ff57590fbd91af6f1","modified":1491698830000},{"_id":"themes/material/source/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1491698830000},{"_id":"themes/material/source/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1491698830000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1491698830000},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1491698830000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1491698830000},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1491698830000},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1491698830000},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1491698830000},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1491698830000},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1491698830000},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1491698830000},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1491698830000},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1491698830000},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1491698830000},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1491698830000},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1491698830000},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1491698830000},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1491698830000},{"_id":"themes/material/source/img/md_bg.jpg","hash":"5fa5bce198693ed6487e9d711e490498fee59933","modified":1412579262000},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1491698830000},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1491698830000},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1491698830000},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1491698830000},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1491698830000},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1491698830000},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1491698830000},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1491698830000},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1491698830000},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1491698830000},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1491698830000},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1491698830000},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1491698830000},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1491698830000},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1491698830000},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1491698830000},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1491698830000},{"_id":"public/atom.xml","hash":"c966be86e734d4d46ba3d7c3e468ad6c00a7f36c","modified":1496396778054},{"_id":"public/search.xml","hash":"3c3cb8e1f0eaf57462ce51ea40238817089e1f2b","modified":1496396778054},{"_id":"public/about/index.html","hash":"e06d552b7a588c91bb3259011e88f172f3c21b75","modified":1496396778208},{"_id":"public/tags/index.html","hash":"747477c261d22e67dcc10d01785483041b9f5a90","modified":1496396778208},{"_id":"public/categories/index.html","hash":"0ea88db970d15136d5a1c3fc73bb845bc05089de","modified":1496396778208},{"_id":"public/2017/05/09/Java注解，安卓IOC/index.html","hash":"3fe35fead70820c41ba5801f82c15297117e2b2a","modified":1496396778208},{"_id":"public/2017/05/05/拖拽图片/index.html","hash":"8c6bde6e7a996614ded5fc7cdab20ecabbb104b7","modified":1496396778209},{"_id":"public/2017/04/14/Behavior/index.html","hash":"a09dd3727ab45efb628fe8cdc29b5e27e2db7dbd","modified":1496396778209},{"_id":"public/2017/03/30/透明(沉浸)状态栏/index.html","hash":"39f4d573b093bd37110a0a56f89b3f4a0b015e34","modified":1496396778209},{"_id":"public/archives/index.html","hash":"ae926868cb0f5b42b4d0075c69c47833782834b8","modified":1496396778210},{"_id":"public/archives/2017/index.html","hash":"26b84bbc70b96f62e3c580dc11ede3b9e9b0fadf","modified":1496396778210},{"_id":"public/archives/2017/03/index.html","hash":"b5e551587525cae6411471413e1d682db5be2c05","modified":1496396778210},{"_id":"public/archives/2017/04/index.html","hash":"298bc2d9e42b804938f9324c2b3a168145a9a52c","modified":1496396778210},{"_id":"public/archives/2017/05/index.html","hash":"b0839fdba7a0da22ff73b9574983f218dd21c5a5","modified":1496396778210},{"_id":"public/categories/Android/index.html","hash":"6c077bde51e80bddc69aba3ae5b66d2ca6f00971","modified":1496396778210},{"_id":"public/index.html","hash":"6f2bf3503c7960ef4f9dad156a7739441c946bac","modified":1496396778210},{"_id":"public/tags/自定义View/index.html","hash":"6920d3743f529dc4ea5b6db868f01a0497154ab8","modified":1496396778210},{"_id":"public/tags/Android-框架/index.html","hash":"09bc3b8618fe9c56f4daedc422de8c495b1c7e2d","modified":1496396778210},{"_id":"public/tags/Android-交互/index.html","hash":"7b30b2b7fe03f2a31438b6cbd5557bad47372048","modified":1496396778210},{"_id":"public/tags/Android-Tips/index.html","hash":"f7b504618d2cee55ea9b9bc89affb298f1a1bd19","modified":1496396778210},{"_id":"public/CNAME","hash":"5266cccde3be517a5fdfbe2127507c362ba6c9c9","modified":1496396778245},{"_id":"public/images/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1496396778245},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1496396778245},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1496396778246},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1496396778246},{"_id":"public/img/avatar_64.png","hash":"1aa6f07c762c921490463ca6ebe12f8d4180a92f","modified":1496396778246},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1496396778246},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1496396778246},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1496396778246},{"_id":"public/img/hexo_avatar.png","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1496396778246},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1496396778246},{"_id":"public/img/scent.jpg","hash":"74650d8a4d634786c01651775e49ebc6ce5e8cd7","modified":1496396778246},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1496396778246},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1496396778246},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1496396778246},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1496396778246},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1496396778246},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1496396778246},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1496396778246},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1496396778246},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1496396778246},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1496396778246},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1496396778246},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1496396778246},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1496396778246},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1496396778246},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1496396778246},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1496396778246},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1496396778247},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1496396778247},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1496396778247},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1496396778247},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1496396778247},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1496396778247},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1496396778247},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1496396778247},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1496396778247},{"_id":"public/css/prism-solarizedlight.css","hash":"8f0490f389a7e49bc3706a80911804fdf1b1b8c3","modified":1496396778247},{"_id":"public/css/prism-line-numbers.css","hash":"492e6310c1371c050e17941e74b942ab5f54411f","modified":1496396778247},{"_id":"public/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1496396778255},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1496396778262},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1496396778265},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1496396778265},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1496396778265},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1496396778265},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1496396778265},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1496396778265},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1496396778265},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1496396778265},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1496396778266},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1496396778266},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1496396778266},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1496396778266},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1496396778266},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1496396778266},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1496396778272},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1496396778272},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1496396778272},{"_id":"public/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1496396778272},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1496396778272},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1496396778272},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1496396778272},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1496396778272},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1496396778272},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1496396778272},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1496396778272},{"_id":"public/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1496396778272},{"_id":"public/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1496396778272},{"_id":"public/css/style.css","hash":"b423b687cfa2723554b7b42eab799a69ababa978","modified":1496396778272},{"_id":"public/css/style.min.css","hash":"25874013ac8a604058ddbe58cb33a2e3fa5b9b3c","modified":1496396778272},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1496396778272},{"_id":"public/js/js.js","hash":"4634558bdb27ca5a2f728d6ff57590fbd91af6f1","modified":1496396778272},{"_id":"public/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1496396778272},{"_id":"public/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1496396778273},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1496396778273},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1496396778273},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1496396778273},{"_id":"public/img/md_bg.jpg","hash":"5fa5bce198693ed6487e9d711e490498fee59933","modified":1496396778277},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1496396778284},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1496396778296},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1496396778296},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1496396778296},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1496396778296},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1496396778296},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1496396778297}],"Category":[{"name":"Android","_id":"cj3fo075j00047wr6cuiki11o"}],"Data":[],"Page":[{"title":"PaleRider","date":"2017-03-30T03:22:00.000Z","comment":false,"notag":true,"toc":false,"_content":"\n\n<h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2>\n<center></center>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: PaleRider\ndate: 2017-03-30 11:22:00\ncomment: false\nnotag: true\ntoc: false\n---\n\n\n<h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2>\n<center></center>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","updated":"2017-05-27T08:45:12.467Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3fo075c00017wr6uywg4mui","content":"<p></p><h2 align=\"center\">世界微尘里，吾宁爱与憎。</h2><p></p>\n<p><center></center></p>\n<h3 align=\"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"","more":"<p><h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2></p>\n<p><center></center></p>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"标签","date":"2017-03-30T03:15:04.000Z","type":"tags","layout":"tags","comment":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-30 11:15:04\ntype: tags\nlayout: tags\ncomment: false\n---\n","updated":"2017-05-27T08:27:40.265Z","path":"tags/index.html","comments":1,"_id":"cj3fo075g00037wr6w21cq4ud","content":"","excerpt":"","more":""},{"title":"分类","date":"2017-03-30T03:19:10.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-30 11:19:10\ntype: categories\ncomments: false\n---\n","updated":"2017-04-20T04:44:35.877Z","path":"categories/index.html","layout":"page","_id":"cj3fo075p00077wr6agjhe28l","content":"","excerpt":"","more":""}],"Post":[{"title":"LBehavior","date":"2017-04-14T08:25:46.000Z","_content":"\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","source":"_posts/Behavior.md","raw":"---\ntitle: LBehavior\ndate: 2017-04-14 16:25:46\ncategory: Android\ntags: \n\t- 自定义View\n---\n\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","slug":"Behavior","published":1,"updated":"2017-05-27T08:49:14.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fo075800007wr6u5qx1gbf","content":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width=\"270\" height=\"450\" alt=\"效果图1\"><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width=\"270\" height=\"450\" alt=\"效果图2\"></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\" target=\"_blank\" rel=\"external\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\" target=\"_blank\" rel=\"external\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">layoutDependsOn</span><span class=\"token punctuation\">(</span>CoordinatorLayout parent， View child， View dependency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> dependency <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AppBarLayout</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onDependentViewChanged</span><span class=\"token punctuation\">(</span>CoordinatorLayout parent， View child， View dependency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">offsetChildAsNeeded</span><span class=\"token punctuation\">(</span>parent， child， dependency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token comment\" spellcheck=\"true\">//判断是否垂直滑动</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onStartNestedScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class=\"token keyword\">int</span> nestedScrollAxes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>nestedScrollAxes <span class=\"token operator\">&amp;</span> ViewCompat<span class=\"token punctuation\">.</span>SCROLL_AXIS_VERTICAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNestedPreScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout， View child， View target， \n        <span class=\"token keyword\">int</span> dx， <span class=\"token keyword\">int</span> dy， <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> consumed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNestedPreScroll</span><span class=\"token punctuation\">(</span>coordinatorLayout， child， target， dx， dy， consumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n     *                而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNestedScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout， View child， View target， \n        <span class=\"token keyword\">int</span> dxConsumed， <span class=\"token keyword\">int</span> dyConsumed， <span class=\"token keyword\">int</span> dxUnconsumed， <span class=\"token keyword\">int</span> dyUnconsumed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNestedScroll</span><span class=\"token punctuation\">(</span>coordinatorLayout， child， target， \n            dxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token comment\" spellcheck=\"true\">//判断垂直滑动</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onStartNestedScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout<span class=\"token punctuation\">,</span> View child<span class=\"token punctuation\">,</span> View directTargetChild<span class=\"token punctuation\">,</span> View target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nestedScrollAxes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">// 设置标记，防止new Anim导致的parent和child坐标变化</span>\n            mCommonAnim <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LTitleBehaviorAnim</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            isInit <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>nestedScrollAxes <span class=\"token operator\">&amp;</span> ViewCompat<span class=\"token punctuation\">.</span>SCROLL_AXIS_VERTICAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNestedPreScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout<span class=\"token punctuation\">,</span> View child<span class=\"token punctuation\">,</span> View target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> consumed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mCommonAnim <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mCommonAnim<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span>mDuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mCommonAnim<span class=\"token punctuation\">.</span><span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span>mInterpolator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNestedPreScroll</span><span class=\"token punctuation\">(</span>coordinatorLayout<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">,</span> consumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNestedScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout<span class=\"token punctuation\">,</span> View child<span class=\"token punctuation\">,</span> View target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dxConsumed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dyConsumed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dxUnconsumed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dyUnconsumed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNestedScroll</span><span class=\"token punctuation\">(</span>coordinatorLayout<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> dxConsumed<span class=\"token punctuation\">,</span> dyConsumed<span class=\"token punctuation\">,</span> dxUnconsumed<span class=\"token punctuation\">,</span> dyUnconsumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dyConsumed <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHide<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mCommonAnim<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                isHide <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dyConsumed <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isHide<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mCommonAnim<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                isHide <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">public</span> <span class=\"token function\">LBottomBehaviorAnim</span><span class=\"token punctuation\">(</span>View bottomView<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mBottomView <span class=\"token operator\">=</span> bottomView<span class=\"token punctuation\">;</span>\n        mOriginalY <span class=\"token operator\">=</span> mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//显示</span>\n        ValueAnimator animator <span class=\"token operator\">=</span> ValueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">ofFloat</span><span class=\"token punctuation\">(</span>mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mOriginalY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">addUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValueAnimator<span class=\"token punctuation\">.</span>AnimatorUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationUpdate</span><span class=\"token punctuation\">(</span>ValueAnimator valueAnimator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Float<span class=\"token punctuation\">)</span> valueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">getAnimatedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//隐藏</span>\n        ValueAnimator animator <span class=\"token operator\">=</span> ValueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">ofFloat</span><span class=\"token punctuation\">(</span>mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mOriginalY <span class=\"token operator\">+</span> mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">addUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValueAnimator<span class=\"token punctuation\">.</span>AnimatorUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationUpdate</span><span class=\"token punctuation\">(</span>ValueAnimator valueAnimator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Float<span class=\"token punctuation\">)</span> valueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">getAnimatedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>dyConsumed<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> minScrollY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\" spellcheck=\"true\">//onNestedScroll里边的逻辑代码</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    mTotalScrollY <span class=\"token operator\">+=</span> dyConsumed<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//累加消费的距离</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>dyConsumed<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> minScrollY <span class=\"token operator\">||</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mTotalScrollY<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> scrollYDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\" spellcheck=\"true\">//onNestedScroll里边的逻辑代码</span>\n        mTotalScrollY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//动画执行完毕后重置</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> CommonBehavior <span class=\"token function\">from</span><span class=\"token punctuation\">(</span>View view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ViewGroup<span class=\"token punctuation\">.</span>LayoutParams params <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>params <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CoordinatorLayout<span class=\"token punctuation\">.</span>LayoutParams</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The view is not a child of CoordinatorLayout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        CoordinatorLayout<span class=\"token punctuation\">.</span>Behavior behavior <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CoordinatorLayout<span class=\"token punctuation\">.</span>LayoutParams<span class=\"token punctuation\">)</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>behavior <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CommonBehavior</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>CommonBehavior<span class=\"token punctuation\">)</span> behavior<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后可以设置对象的属性：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">public</span> CommonBehavior <span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mDuration <span class=\"token operator\">=</span> duration<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> CommonBehavior <span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span>Interpolator interpolator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mInterpolator <span class=\"token operator\">=</span> interpolator<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> CommonBehavior <span class=\"token function\">setMinScrollY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minScrollY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minScrollY <span class=\"token operator\">=</span> minScrollY<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> CommonBehavior <span class=\"token function\">setScrollYDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> scrollYDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scrollYDistance <span class=\"token operator\">=</span> scrollYDistance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    allprojects <span class=\"token punctuation\">{</span>\n        repositories <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://jitpack.io'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    dependencies <span class=\"token punctuation\">{</span>\n        compile <span class=\"token string\">'com.github.Lauzy:LBehavior:1.0.1'</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\" target=\"_blank\" rel=\"external\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    CommonBehavior<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>mFloatingActionButton<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setMinScrollY</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setScrollYDistance</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinearOutSlowInInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>。</p>\n","excerpt":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>","more":"<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<pre><code class=\"java\">\n    @Override\n    public boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n        return dependency instanceof AppBarLayout;\n    }\n</code></pre>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<pre><code class=\"java\">\n    @Override\n    public boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n        offsetChildAsNeeded(parent， child， dependency);\n        return false;\n    }\n</code></pre>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<pre><code class=\"java\">\n    //判断是否垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n</code></pre>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<pre><code class=\"java\">\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n        int dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n</code></pre>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<pre><code class=\"java\">\n    /**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n     *                而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n        int dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n            dxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n</code></pre>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<pre><code class=\"java\">\n    //判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n</code></pre>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<pre><code class=\"java\">\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n</code></pre>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<pre><code class=\"java\">\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n        if (dyConsumed &lt; 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed &gt; 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n</code></pre>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<pre><code class=\"java\">\n    public LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n    @Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n</code></pre>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<pre><code class=\"java\">\n    if(Math.abs(dyConsumed) &gt; minScrollY){\n        ...//onNestedScroll里边的逻辑代码\n    }\n</code></pre>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<pre><code class=\"java\">\n    mTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) &gt; minScrollY || Math.abs(mTotalScrollY) &gt; scrollYDistance) {\n        ...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n</code></pre>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<pre><code class=\"java\">\n    public static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(&quot;The view is not a child of CoordinatorLayout&quot;);\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(&quot;The view&#39;s behavior isn&#39;t an instance of CommonBehavior. Try to check the [app:layout_behavior]&quot;);\n        }\n        return (CommonBehavior) behavior;\n    }\n</code></pre>\n<p>然后可以设置对象的属性：</p>\n<pre><code class=\"java\">\n    public CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n</code></pre>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<pre><code class=\"java\">\n    allprojects {\n        repositories {\n            ...\n            maven { url &#39;https://jitpack.io&#39; }\n        }\n    }\n\n    dependencies {\n        compile &#39;com.github.Lauzy:LBehavior:1.0.1&#39;\n    }\n</code></pre>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"java\">\n    CommonBehavior.from(mFloatingActionButton)\n        .setMinScrollY(20)\n        .setScrollYDistance(100)\n        .setDuration(1000)\n        .setInterpolator(new LinearOutSlowInInterpolator());\n</code></pre>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>。</p>"},{"title":"Java注解，安卓IOC","date":"2017-05-09T14:43:44.000Z","toc":false,"_content":"\n\n## Java注解(Annotation)","source":"_posts/Java注解，安卓IOC.md","raw":"---\ntitle: Java注解，安卓IOC\ndate: 2017-05-09 22:43:44\ntags: Android 框架\ntoc: false\ncategory: Android\n---\n\n\n## Java注解(Annotation)","slug":"Java注解，安卓IOC","published":1,"updated":"2017-05-27T08:49:44.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fo075e00027wr6kmb3tkuw","content":"<h2 id=\"Java注解-Annotation\"><a href=\"#Java注解-Annotation\" class=\"headerlink\" title=\"Java注解(Annotation)\"></a>Java注解(Annotation)</h2>","excerpt":"","more":"<h2 id=\"Java注解-Annotation\"><a href=\"#Java注解-Annotation\" class=\"headerlink\" title=\"Java注解(Annotation)\"></a>Java注解(Annotation)</h2>"},{"title":"拖拽图片","date":"2017-05-05T07:34:59.000Z","toc":false,"_content":"\n闲来无事，在[干货集中营](https://github.com/Lauzy/GankPro)里又撸了个效果。\n\n先来一波效果图：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width = \"270\" height = \"450\" alt=\"效果图\"/>\n\n<!--more-->\n\n实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：\n\n```java\n\n\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\n\t\t//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();\n        switch (event.getActionMasked()) {\n            case MotionEvent.ACTION_DOWN:\n\t\t\t//获取手指按下时X和Y轴的坐标\n                mOriginalY = (int) event.getRawY();\n                mOriginalX = (int) event.getRawX();\n                break;\n            case MotionEvent.ACTION_MOVE:\n\t\t\t//获取移动的距离\n                mMotionY = (int) (event.getRawY() - mOriginalY);\n                mMotionX = (int) (event.getRawX() - mOriginalX);\n\t\t\t//计算缩放比例\n                float ratio = Math.abs(mMotionY) * 1.0f / v.getHeight();\n                float ratioY = Math.abs(mMotionY) <= v.getHeight() ? (ratio <= 0.5f ? ratio : 0.5f) : 0.5f;\n            //根据Y轴变化缩放比例\n                v.setScaleX(1 - ratioY);\n                v.setScaleY(1 - ratioY);\n\t\t\t//设置layoutParams变化\n                layoutParams.topMargin = mMotionY / 2;\n                layoutParams.leftMargin = mMotionX / 2;\n                layoutParams.bottomMargin = -mMotionY / 2;\n                layoutParams.rightMargin = -mMotionX / 2;\n                v.setLayoutParams(layoutParams);\n\t\t\t//调用requestLayout 重置布局\n                v.requestLayout();\n\t\t\t//设置透明度最低值\n                if (Math.abs(mMotionY) > 500) {\n                    mContentLayout.getBackground().setAlpha(100);\n                    mCurAlpha = 100;\n                } else {\n\t\t\t\t//根据移动距离计算透明度\n                    float ratioAlpha = (Math.abs(mMotionY) / 500.0f) * (255 - 100);\n                    mContentLayout.getBackground().setAlpha(255 - (int) ratioAlpha);\n                    mCurAlpha = 255 - (int) ratioAlpha;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n\t\t\t//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法\n                if (Math.abs(mMotionY) > 400) {\n                    mImageEventListener.onActionBack();\n                } else {\n                //无动画返回原状\n                    /*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/\n\t\t\t\t//通过一系列动画将View复原\n                    setScaleAnim(v);\n                    setMarginAnim(v, layoutParams, Direction.LEFT);\n                    setMarginAnim(v, layoutParams, Direction.RIGHT);\n                    setMarginAnim(v, layoutParams, Direction.TOP);\n                    setMarginAnim(v, layoutParams, Direction.BOTTOM);\n                    v.requestLayout();\n                }\n                ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, 255);\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator animation) {\n                        mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());\n                    }\n                });\n                animator.setDuration(300).start();\n                break;\n        }\n\t//消费事件\n        return true;\n    }\n\n```\n\n\n然后在使用的地方直接调用即可：\n\n```java\n\t\timageView.setOnTouchListener(new DragImageOnTouchListener(frameLayout, new DragImageOnTouchListener.ImageEventListener() {\n            @Override\n            public void onActionBack() {\n                onBackPressed();\n\t\t\t\t//可处理具体的逻辑\n            }\n        }));\n```\n\n注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。\n具体代码可参考  [我的Github](https://github.com/Lauzy/LauzyCode) 的[DragImage包下](https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage),\n在我的[干货集中营](https://github.com/Lauzy/GankPro) 中也有具体的使用。","source":"_posts/拖拽图片.md","raw":"---\ntitle: 拖拽图片\ndate: 2017-05-05 15:34:59\ncategory: Android\ntoc: false\ntags: Android 交互\n---\n\n闲来无事，在[干货集中营](https://github.com/Lauzy/GankPro)里又撸了个效果。\n\n先来一波效果图：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width = \"270\" height = \"450\" alt=\"效果图\"/>\n\n<!--more-->\n\n实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：\n\n```java\n\n\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\n\t\t//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();\n        switch (event.getActionMasked()) {\n            case MotionEvent.ACTION_DOWN:\n\t\t\t//获取手指按下时X和Y轴的坐标\n                mOriginalY = (int) event.getRawY();\n                mOriginalX = (int) event.getRawX();\n                break;\n            case MotionEvent.ACTION_MOVE:\n\t\t\t//获取移动的距离\n                mMotionY = (int) (event.getRawY() - mOriginalY);\n                mMotionX = (int) (event.getRawX() - mOriginalX);\n\t\t\t//计算缩放比例\n                float ratio = Math.abs(mMotionY) * 1.0f / v.getHeight();\n                float ratioY = Math.abs(mMotionY) <= v.getHeight() ? (ratio <= 0.5f ? ratio : 0.5f) : 0.5f;\n            //根据Y轴变化缩放比例\n                v.setScaleX(1 - ratioY);\n                v.setScaleY(1 - ratioY);\n\t\t\t//设置layoutParams变化\n                layoutParams.topMargin = mMotionY / 2;\n                layoutParams.leftMargin = mMotionX / 2;\n                layoutParams.bottomMargin = -mMotionY / 2;\n                layoutParams.rightMargin = -mMotionX / 2;\n                v.setLayoutParams(layoutParams);\n\t\t\t//调用requestLayout 重置布局\n                v.requestLayout();\n\t\t\t//设置透明度最低值\n                if (Math.abs(mMotionY) > 500) {\n                    mContentLayout.getBackground().setAlpha(100);\n                    mCurAlpha = 100;\n                } else {\n\t\t\t\t//根据移动距离计算透明度\n                    float ratioAlpha = (Math.abs(mMotionY) / 500.0f) * (255 - 100);\n                    mContentLayout.getBackground().setAlpha(255 - (int) ratioAlpha);\n                    mCurAlpha = 255 - (int) ratioAlpha;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n\t\t\t//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法\n                if (Math.abs(mMotionY) > 400) {\n                    mImageEventListener.onActionBack();\n                } else {\n                //无动画返回原状\n                    /*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/\n\t\t\t\t//通过一系列动画将View复原\n                    setScaleAnim(v);\n                    setMarginAnim(v, layoutParams, Direction.LEFT);\n                    setMarginAnim(v, layoutParams, Direction.RIGHT);\n                    setMarginAnim(v, layoutParams, Direction.TOP);\n                    setMarginAnim(v, layoutParams, Direction.BOTTOM);\n                    v.requestLayout();\n                }\n                ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, 255);\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator animation) {\n                        mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());\n                    }\n                });\n                animator.setDuration(300).start();\n                break;\n        }\n\t//消费事件\n        return true;\n    }\n\n```\n\n\n然后在使用的地方直接调用即可：\n\n```java\n\t\timageView.setOnTouchListener(new DragImageOnTouchListener(frameLayout, new DragImageOnTouchListener.ImageEventListener() {\n            @Override\n            public void onActionBack() {\n                onBackPressed();\n\t\t\t\t//可处理具体的逻辑\n            }\n        }));\n```\n\n注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。\n具体代码可参考  [我的Github](https://github.com/Lauzy/LauzyCode) 的[DragImage包下](https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage),\n在我的[干货集中营](https://github.com/Lauzy/GankPro) 中也有具体的使用。","slug":"拖拽图片","published":1,"updated":"2017-05-27T08:49:29.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fo075o00067wr658fwaxn2","content":"<p>闲来无事，在<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营</a>里又撸了个效果。</p>\n<p>先来一波效果图：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width=\"270\" height=\"450\" alt=\"效果图\"></p>\n<a id=\"more\"></a>\n<p>实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onTouch</span><span class=\"token punctuation\">(</span>View v<span class=\"token punctuation\">,</span> MotionEvent event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。</span>\n        FrameLayout<span class=\"token punctuation\">.</span>LayoutParams layoutParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FrameLayout<span class=\"token punctuation\">.</span>LayoutParams<span class=\"token punctuation\">)</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getActionMasked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> MotionEvent<span class=\"token punctuation\">.</span>ACTION_DOWN<span class=\"token operator\">:</span>\n            <span class=\"token comment\" spellcheck=\"true\">//获取手指按下时X和Y轴的坐标</span>\n                mOriginalY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getRawY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mOriginalX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getRawX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> MotionEvent<span class=\"token punctuation\">.</span>ACTION_MOVE<span class=\"token operator\">:</span>\n            <span class=\"token comment\" spellcheck=\"true\">//获取移动的距离</span>\n                mMotionY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getRawY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mOriginalY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mMotionX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getRawX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mOriginalX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//计算缩放比例</span>\n                <span class=\"token keyword\">float</span> ratio <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">/</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> ratioY <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">?</span> ratio <span class=\"token operator\">:</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//根据Y轴变化缩放比例</span>\n                v<span class=\"token punctuation\">.</span><span class=\"token function\">setScaleX</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> ratioY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                v<span class=\"token punctuation\">.</span><span class=\"token function\">setScaleY</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> ratioY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//设置layoutParams变化</span>\n                layoutParams<span class=\"token punctuation\">.</span>topMargin <span class=\"token operator\">=</span> mMotionY <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                layoutParams<span class=\"token punctuation\">.</span>leftMargin <span class=\"token operator\">=</span> mMotionX <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                layoutParams<span class=\"token punctuation\">.</span>bottomMargin <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>mMotionY <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                layoutParams<span class=\"token punctuation\">.</span>rightMargin <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>mMotionX <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                v<span class=\"token punctuation\">.</span><span class=\"token function\">setLayoutParams</span><span class=\"token punctuation\">(</span>layoutParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//调用requestLayout 重置布局</span>\n                v<span class=\"token punctuation\">.</span><span class=\"token function\">requestLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//设置透明度最低值</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    mContentLayout<span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAlpha</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    mCurAlpha <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//根据移动距离计算透明度</span>\n                    <span class=\"token keyword\">float</span> ratioAlpha <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">500.0f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    mContentLayout<span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAlpha</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> ratioAlpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    mCurAlpha <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> ratioAlpha<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> MotionEvent<span class=\"token punctuation\">.</span>ACTION_UP<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> MotionEvent<span class=\"token punctuation\">.</span>ACTION_CANCEL<span class=\"token operator\">:</span>\n            <span class=\"token comment\" spellcheck=\"true\">//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    mImageEventListener<span class=\"token punctuation\">.</span><span class=\"token function\">onActionBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//无动画返回原状</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/</span>\n                <span class=\"token comment\" spellcheck=\"true\">//通过一系列动画将View复原</span>\n                    <span class=\"token function\">setScaleAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setMarginAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> layoutParams<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>LEFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setMarginAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> layoutParams<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setMarginAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> layoutParams<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>TOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setMarginAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> layoutParams<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>BOTTOM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    v<span class=\"token punctuation\">.</span><span class=\"token function\">requestLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                ValueAnimator animator <span class=\"token operator\">=</span> ValueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">ofInt</span><span class=\"token punctuation\">(</span>mCurAlpha<span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                animator<span class=\"token punctuation\">.</span><span class=\"token function\">addUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValueAnimator<span class=\"token punctuation\">.</span>AnimatorUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationUpdate</span><span class=\"token punctuation\">(</span>ValueAnimator animation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        mContentLayout<span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAlpha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span> animation<span class=\"token punctuation\">.</span><span class=\"token function\">getAnimatedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                animator<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//消费事件</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后在使用的地方直接调用即可：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">        imageView<span class=\"token punctuation\">.</span><span class=\"token function\">setOnTouchListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DragImageOnTouchListener</span><span class=\"token punctuation\">(</span>frameLayout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DragImageOnTouchListener<span class=\"token punctuation\">.</span>ImageEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActionBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">onBackPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//可处理具体的逻辑</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。<br>具体代码可参考  <a href=\"https://github.com/Lauzy/LauzyCode\" target=\"_blank\" rel=\"external\">我的Github</a> 的<a href=\"https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage\" target=\"_blank\" rel=\"external\">DragImage包下</a>,<br>在我的<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营</a> 中也有具体的使用。</p>\n","excerpt":"<p>闲来无事，在<a href=\"https://github.com/Lauzy/GankPro\">干货集中营</a>里又撸了个效果。</p>\n<p>先来一波效果图：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width = \"270\" height = \"450\" alt=\"效果图\"/></p>","more":"<p>实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：</p>\n<pre><code class=\"java\">\n    public boolean onTouch(View v, MotionEvent event) {\n\n        //获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();\n        switch (event.getActionMasked()) {\n            case MotionEvent.ACTION_DOWN:\n            //获取手指按下时X和Y轴的坐标\n                mOriginalY = (int) event.getRawY();\n                mOriginalX = (int) event.getRawX();\n                break;\n            case MotionEvent.ACTION_MOVE:\n            //获取移动的距离\n                mMotionY = (int) (event.getRawY() - mOriginalY);\n                mMotionX = (int) (event.getRawX() - mOriginalX);\n            //计算缩放比例\n                float ratio = Math.abs(mMotionY) * 1.0f / v.getHeight();\n                float ratioY = Math.abs(mMotionY) &lt;= v.getHeight() ? (ratio &lt;= 0.5f ? ratio : 0.5f) : 0.5f;\n            //根据Y轴变化缩放比例\n                v.setScaleX(1 - ratioY);\n                v.setScaleY(1 - ratioY);\n            //设置layoutParams变化\n                layoutParams.topMargin = mMotionY / 2;\n                layoutParams.leftMargin = mMotionX / 2;\n                layoutParams.bottomMargin = -mMotionY / 2;\n                layoutParams.rightMargin = -mMotionX / 2;\n                v.setLayoutParams(layoutParams);\n            //调用requestLayout 重置布局\n                v.requestLayout();\n            //设置透明度最低值\n                if (Math.abs(mMotionY) &gt; 500) {\n                    mContentLayout.getBackground().setAlpha(100);\n                    mCurAlpha = 100;\n                } else {\n                //根据移动距离计算透明度\n                    float ratioAlpha = (Math.abs(mMotionY) / 500.0f) * (255 - 100);\n                    mContentLayout.getBackground().setAlpha(255 - (int) ratioAlpha);\n                    mCurAlpha = 255 - (int) ratioAlpha;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n            //手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法\n                if (Math.abs(mMotionY) &gt; 400) {\n                    mImageEventListener.onActionBack();\n                } else {\n                //无动画返回原状\n                    /*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/\n                //通过一系列动画将View复原\n                    setScaleAnim(v);\n                    setMarginAnim(v, layoutParams, Direction.LEFT);\n                    setMarginAnim(v, layoutParams, Direction.RIGHT);\n                    setMarginAnim(v, layoutParams, Direction.TOP);\n                    setMarginAnim(v, layoutParams, Direction.BOTTOM);\n                    v.requestLayout();\n                }\n                ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, 255);\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator animation) {\n                        mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());\n                    }\n                });\n                animator.setDuration(300).start();\n                break;\n        }\n    //消费事件\n        return true;\n    }\n</code></pre>\n<p>然后在使用的地方直接调用即可：</p>\n<pre><code class=\"java\">        imageView.setOnTouchListener(new DragImageOnTouchListener(frameLayout, new DragImageOnTouchListener.ImageEventListener() {\n            @Override\n            public void onActionBack() {\n                onBackPressed();\n                //可处理具体的逻辑\n            }\n        }));\n</code></pre>\n<p>注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。<br>具体代码可参考  <a href=\"https://github.com/Lauzy/LauzyCode\">我的Github</a> 的<a href=\"https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage\">DragImage包下</a>,<br>在我的<a href=\"https://github.com/Lauzy/GankPro\">干货集中营</a> 中也有具体的使用。</p>"},{"title":"沉浸、透明及白底黑字状态栏技巧","date":"2017-03-30T01:25:46.000Z","_content":"\n\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","source":"_posts/透明(沉浸)状态栏.md","raw":"---\ntitle: 沉浸、透明及白底黑字状态栏技巧\ndate: 2017-03-30 09:25:46\ncategory: Android\ntags: \n\t- Android Tips\n---\n\n\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","slug":"透明(沉浸)状态栏","published":1,"updated":"2017-04-21T09:21:33.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fo075r00087wr6c1jq5qd1","content":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>\n<a id=\"more\"></a>\n<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\" target=\"_blank\" rel=\"external\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>LOLLIPOP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    View decorView <span class=\"token operator\">=</span> <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecorView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> option <span class=\"token operator\">=</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_STABLE<span class=\"token punctuation\">;</span>\n    decorView<span class=\"token punctuation\">.</span><span class=\"token function\">setSystemUiVisibility</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatusBarColor</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>TRANSPARENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>KITKAT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFlags</span><span class=\"token punctuation\">(</span>WindowManager<span class=\"token punctuation\">.</span>LayoutParams<span class=\"token punctuation\">.</span>FLAG_TRANSLUCENT_STATUS<span class=\"token punctuation\">,</span> WindowManager<span class=\"token punctuation\">.</span>LayoutParams<span class=\"token punctuation\">.</span>FLAG_TRANSLUCENT_STATUS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">mToolbar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Toolbar<span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>toolbar_common<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mToolbar <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mToolbar<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">+=</span> ScreenUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusHeight</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mToolbar<span class=\"token punctuation\">.</span><span class=\"token function\">setPadding</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ScreenUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusHeight</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setSupportActionBar</span><span class=\"token punctuation\">(</span>mToolbar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ActionBar supportActionBar <span class=\"token operator\">=</span> <span class=\"token function\">getSupportActionBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>supportActionBar <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        supportActionBar<span class=\"token punctuation\">.</span><span class=\"token function\">setDisplayShowTitleEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//此处是为了不显示默认的标题</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//设置状态栏文字为暗色</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecorView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSystemUiVisibility</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LIGHT_STATUS_BAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>LOLLIPOP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatusBarColor</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置</span>\n    <span class=\"token comment\" spellcheck=\"true\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>JELLY_BEAN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecorView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSystemUiVisibility</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//4.4版本本身就含有暗色阴影，不作其他处理即可</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onWindowFocusChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> hasFocus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onWindowFocusChanged</span><span class=\"token punctuation\">(</span>hasFocus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasFocus <span class=\"token operator\">&amp;&amp;</span> Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>KITKAT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        View decorView <span class=\"token operator\">=</span> <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecorView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        decorView<span class=\"token punctuation\">.</span><span class=\"token function\">setSystemUiVisibility</span><span class=\"token punctuation\">(</span>\n        View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_STABLE\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_HIDE_NAVIGATION\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_FULLSCREEN\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_IMMERSIVE_STICKY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</include></p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\" target=\"_blank\" rel=\"external\">我的Github</a> ，在StatusBar包中。</p>\n","excerpt":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>","more":"<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<pre><code class=\"java\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {\n    View decorView = getWindow().getDecorView();\n    int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n    decorView.setSystemUiVisibility(option);\n    getWindow().setStatusBarColor(Color.TRANSPARENT);\n    //getWindow().setStatusBarColor(Color.parseColor(&quot;#40000000&quot;));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {\n    getWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n</code></pre>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<pre><code class=\"java\">mToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n    mToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n    mToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n    setSupportActionBar(mToolbar);\n    ActionBar supportActionBar = getSupportActionBar();\n    if (supportActionBar != null) {\n        supportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n    }\n}\n</code></pre>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<pre><code class=\"java\">//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n    //6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {\n    getWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n    //getWindow().setStatusBarColor(Color.parseColor(&quot;#40000000&quot;));\n} else  if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN){\n    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n</code></pre>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<pre><code class=\"java\">\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n    super.onWindowFocusChanged(hasFocus);\n    if (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {\n        View decorView = getWindow().getDecorView();\n        decorView.setSystemUiVisibility(\n        View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n        | View.SYSTEM_UI_FLAG_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n    }\n}\n</code></pre>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\">我的Github</a> ，在StatusBar包中。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3fo075r00087wr6c1jq5qd1","category_id":"cj3fo075j00047wr6cuiki11o","_id":"cj3fo075w000c7wr60z8er9yg"},{"post_id":"cj3fo075800007wr6u5qx1gbf","category_id":"cj3fo075j00047wr6cuiki11o","_id":"cj3fo075y000f7wr6cbwtky2j"},{"post_id":"cj3fo075e00027wr6kmb3tkuw","category_id":"cj3fo075j00047wr6cuiki11o","_id":"cj3fo075y000h7wr668u4n1rp"},{"post_id":"cj3fo075o00067wr658fwaxn2","category_id":"cj3fo075j00047wr6cuiki11o","_id":"cj3fo075z000k7wr61dbn58eg"}],"PostTag":[{"post_id":"cj3fo075800007wr6u5qx1gbf","tag_id":"cj3fo075m00057wr6dq95k9xj","_id":"cj3fo075v000b7wr6tlfzb6ri"},{"post_id":"cj3fo075e00027wr6kmb3tkuw","tag_id":"cj3fo075u000a7wr66utzypds","_id":"cj3fo075y000g7wr6cfitnkam"},{"post_id":"cj3fo075o00067wr658fwaxn2","tag_id":"cj3fo075x000e7wr6hhpnfl1a","_id":"cj3fo075z000j7wr6ugmiydcx"},{"post_id":"cj3fo075r00087wr6c1jq5qd1","tag_id":"cj3fo075z000i7wr6mt3jt8jo","_id":"cj3fo0760000l7wr6k5ypm33j"}],"Tag":[{"name":"自定义View","_id":"cj3fo075m00057wr6dq95k9xj"},{"name":"Android 框架","_id":"cj3fo075u000a7wr66utzypds"},{"name":"Android 交互","_id":"cj3fo075x000e7wr6hhpnfl1a"},{"name":"Android Tips","_id":"cj3fo075z000i7wr6mt3jt8jo"}]}}