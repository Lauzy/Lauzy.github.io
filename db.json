{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/hexo_avatar.png","path":"images/hexo_avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5266cccde3be517a5fdfbe2127507c362ba6c9c9","modified":1490886285970},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1490886261823},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1490886261823},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1490886261823},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1490886261839},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1490886261839},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1490886261823},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1490886261839},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1490886261854},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1490886261854},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1490886261854},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1490886261854},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1490886261854},{"_id":"themes/next/_config.yml","hash":"4c8cb6bd6f5399e4175632d13573f47f402fe313","modified":1494340927744},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1490886261870},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1490886261870},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1490886262292},{"_id":"source/_posts/Behavior.md","hash":"f53a8d81b7320122ad0e515ef677fe7561857daa","modified":1494340927720},{"_id":"source/_posts/Java注解，安卓IOC.md","hash":"6159a46b1ca9eca8242f4335992841681a9ffcea","modified":1494341077429},{"_id":"source/_posts/拖拽图片.md","hash":"55c7517bf05e0a4e2952f64fc812a220174c64e3","modified":1494340927724},{"_id":"source/_posts/透明(沉浸)状态栏.md","hash":"f921a80a14c2965229f9b6dc8b269886a25cb965","modified":1494340927728},{"_id":"source/about/index.md","hash":"63638a5b3219acae2f196b45bd6ce5e98393599d","modified":1492705210616},{"_id":"source/categories/index.md","hash":"fa63a20c6bc071042793f4c917d7d5ce4bf5a290","modified":1492705210616},{"_id":"source/images/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1490886261526},{"_id":"source/tags/index.md","hash":"99dfb8d3df561cbdfc41b96fec9ef56b4d63cf51","modified":1492705210631},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1490886261870},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1490886261870},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1490886261886},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1490886261886},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1490886261886},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1490886261886},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1490886261886},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1490886261901},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1490886261901},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1490886261901},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1490886261901},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f063ae0f0c12061ebf2ddb992bcf18e67b10097d","modified":1490888319317},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1490886261901},{"_id":"themes/next/layout/_layout.swig","hash":"909d68b164227fe7601d82e2303bf574eb754172","modified":1490886261917},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1490886262276},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1490886262276},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1490888251172},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1490886262276},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1490886262276},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1490886262292},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1490886262292},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1490886262292},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1490886262307},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1490886263229},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1490886263245},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1490886263245},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490886262651},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490886261917},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490886261917},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1490886261917},{"_id":"themes/next/layout/_macro/post.swig","hash":"640b431eccbbd27f10c6781f33db5ea9a6e064de","modified":1490886261932},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1490886261932},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1490886261917},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1490886261932},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1490886261932},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1490886261932},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1490886261948},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1490886261948},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1490886261964},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1490886261964},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1490886261964},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1490886261964},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1490886262011},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1490886262011},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1490886262026},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1490886262198},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1490886262198},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1490886262214},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1490886262229},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1490886262307},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1490886262323},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1490886262339},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1490886262323},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1490886262354},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1490886262354},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1490886262651},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490886262651},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1490886262651},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1490886262651},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1490886262667},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1490886262667},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1490886262667},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1490886262667},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1490886262667},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1490886262667},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490886262682},{"_id":"themes/next/source/images/hexo_avatar.png","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1490886262682},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490886262682},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1490886262682},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1490886262682},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490886262682},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490886262011},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490886262011},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490886262557},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490886262557},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490886262557},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490886262636},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490886262651},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1490886261948},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1490886261948},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1490886261964},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1490886261979},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1490886261979},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1490886261979},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1490886261995},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1490886261995},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1490886262011},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1490886262011},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1490886262011},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1490886262026},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1490886262042},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1490886262057},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1490886262057},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1490886262057},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1490886262089},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1490886262089},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1490886262104},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1490886262104},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1490886262120},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1490886262120},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1490886262136},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1490886262151},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1490886262167},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1490886262151},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1490886262167},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1490886262167},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1490886262198},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1490886262198},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1490886262229},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1490886262245},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1490886262261},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1490886262261},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1490886262557},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1490886262557},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1490886262557},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1490886262636},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1490886262636},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1490886262651},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1490886262682},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1490886262698},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1490886262698},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1490886262698},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1490886262698},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1490886262698},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1490886262698},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1490886262698},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1490886262698},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490886262698},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490886262870},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1490886262917},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1490886262917},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1490886262932},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1490886262932},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1490886262948},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1490886262948},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1490886262948},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1490886262948},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1490886262948},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1490886262995},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1490886263073},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1490886263026},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1490886263042},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1490886263042},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1490886263042},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1490886263058},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1490886263058},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1490886263167},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1490886263167},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1490886263214},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1490886263214},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1490886263229},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1490886263026},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1490886262229},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1490886262229},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1490886262354},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1490886262354},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1490886262354},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1490886262370},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1490886262370},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1490886262417},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1490886262479},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1490886262526},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1490886262526},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1490886262542},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1490886262542},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1490886262542},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1490886262557},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1490886262573},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1490886262573},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1490886262573},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1490886262573},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1490886262589},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1490886262589},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490886262589},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1490886262604},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1490886262604},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1490886262604},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490886262604},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1490886262604},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1490886262620},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1490886262620},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1490886262620},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1490886262620},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1490886262620},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1490886262636},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1490886262698},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490886262870},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490886262870},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490886262870},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490886262870},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490886262870},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490886262870},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1490886262886},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1490886262901},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490886262917},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1490886262948},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490886262948},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1490886262964},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1490886262964},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1490886262964},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1490886263151},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1490886263167},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1490886262995},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1490886262995},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1490886263183},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1490886262370},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1490886262370},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1490886262370},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1490886262386},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1490886262386},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1490886262386},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1490886262386},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1490886262386},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1490886262386},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1490886262401},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1490886262401},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1490886262401},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1490886262401},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1490886262401},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1490886262417},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1490886262417},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1490886262417},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1490886262432},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1490886262417},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1490886262432},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1490886262432},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1490886262432},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1490886262432},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1490886262448},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1490886262448},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1490886262448},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1490886262448},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1490886262448},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1490886262464},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1490886262464},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1490886262464},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1490886262464},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1490886262464},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1490886262479},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1490886262479},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1490886262479},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1490886262479},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1490886262495},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1490886262495},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1490886262495},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1490886262495},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1490886262511},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1490886262511},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1490886262511},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1490886262511},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1490886262511},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1490886262511},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1490886262526},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1490886262526},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1490886262526},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1490886262589},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1490886262604},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1490886262620},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490886262886},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490886262886},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490886262886},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490886262886},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490886262886},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490886262886},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1490886262964},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1490886262979},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1490886262979},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1490886262870},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1490886263151},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1490886262979},{"_id":"public/about/index.html","hash":"e9ef1a509a908942eb211bef090f211d3bbaf6ad","modified":1494341158808},{"_id":"public/categories/index.html","hash":"7532ac0d0300abe267b46134ab15645695945bdc","modified":1494341158808},{"_id":"public/tags/index.html","hash":"a3c671148dde0cded77615eca8af8e584abf182e","modified":1494341158808},{"_id":"public/categories/Android/index.html","hash":"eaf62a76346fb651e3e423260d1f818da5492b9d","modified":1494341158808},{"_id":"public/archives/2017/03/index.html","hash":"7c52d50391047942e469105c076a78a6d4893a1c","modified":1494341158808},{"_id":"public/archives/2017/04/index.html","hash":"0730ee82409d307001843b7eecd1fabceb26a50c","modified":1494341158808},{"_id":"public/archives/2017/05/index.html","hash":"6fd63c6b33340987081bf1bb051446f9c3d5e5be","modified":1494341158808},{"_id":"public/tags/Android-框架/index.html","hash":"d425e365d72b297cda5471be4f25d5331a26e07e","modified":1494341158808},{"_id":"public/tags/自定义View/index.html","hash":"998593816e158cda1d2b731c92fcefcd8f1b764b","modified":1494341158809},{"_id":"public/tags/Android-交互/index.html","hash":"4bcbeba9bed7e807e627b4f8581f5c50c22b34e9","modified":1494341158809},{"_id":"public/tags/Android-Tips/index.html","hash":"3cd79327249d35d755140e747ab269e790410379","modified":1494341158809},{"_id":"public/2017/05/09/Java注解，安卓IOC/index.html","hash":"9cf4f8ba2ba0fd05d58ca5fb0aa01d464d87b036","modified":1494341158809},{"_id":"public/2017/05/05/拖拽图片/index.html","hash":"0a6f836091de8151cc188f1696f0de0a18c1876c","modified":1494341158809},{"_id":"public/2017/04/14/Behavior/index.html","hash":"52bcff0d780b38b4bb706233ab4f6a7ad56aa94b","modified":1494341158809},{"_id":"public/2017/03/30/透明(沉浸)状态栏/index.html","hash":"9aa0d5d332d0375d2640af40ecea1a4a7057d2c1","modified":1494341158809},{"_id":"public/index.html","hash":"972c21b98af323f5a3c109d7ee3ce8a1a61bc553","modified":1494341158809},{"_id":"public/archives/index.html","hash":"3782fa0b3d7fd7fcc060e0456f6f425c3bd9c57b","modified":1494341158809},{"_id":"public/archives/2017/index.html","hash":"4b88bcf02869ceae238f7479bbc9c2a9a04cb8ee","modified":1494341158809},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1494341158831},{"_id":"public/images/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1494341158831},{"_id":"public/CNAME","hash":"5266cccde3be517a5fdfbe2127507c362ba6c9c9","modified":1494341158831},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1494341158831},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1494341158831},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1494341158831},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1494341158831},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1494341158831},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1494341158831},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494341158831},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1494341158831},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1494341158831},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494341158831},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1494341158831},{"_id":"public/images/hexo_avatar.png","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1494341158831},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1494341158831},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1494341158832},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1494341158832},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1494341158832},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494341158832},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494341158832},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494341158832},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494341158832},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494341158832},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494341158832},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1494341158832},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494341158832},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1494341159592},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1494341159610},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1494341159623},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1494341159623},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1494341159624},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1494341159624},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1494341159624},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1494341159624},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1494341159624},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1494341159624},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1494341159624},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1494341159624},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1494341159624},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1494341159625},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1494341159625},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1494341159625},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1494341159625},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1494341159625},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1494341159625},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1494341159625},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1494341159626},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1494341159626},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1494341159626},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1494341159626},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1494341159626},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1494341159626},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1494341159626},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1494341159626},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494341159626},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1494341159626},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494341159626},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1494341159626},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1494341159626},{"_id":"public/css/main.css","hash":"76923d7a6e447348360291f27a07151d9adcc369","modified":1494341159626},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1494341159626},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1494341159627},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1494341159627},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1494341159627},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1494341159627},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1494341159627},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1494341159627},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1494341159627},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1494341159627},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1494341159627},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1494341159627},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1494341159628},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1494341159628},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1494341159628},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1494341159628},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1494341159665}],"Category":[{"name":"Android","_id":"cj2ho54iq000434v15j56gf9j"}],"Data":[],"Page":[{"title":"PaleRider","date":"2017-03-30T03:22:00.000Z","comments":0,"_content":"\n\n<h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2>\n<center></center>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: PaleRider\ndate: 2017-03-30 11:22:00\ncomments: false\n---\n\n\n<h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2>\n<center></center>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","updated":"2017-04-20T16:20:10.616Z","path":"about/index.html","layout":"page","_id":"cj2ho54ic000134v1a6f7vn3b","content":"<p></p><h2 align=\"center\">世界微尘里，吾宁爱与憎。</h2><p></p>\n<p><center></center></p>\n<h3 align=\"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"","more":"<p><h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2></p>\n<p><center></center></p>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"分类","date":"2017-03-30T03:19:10.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-30 11:19:10\ntype: categories\ncomments: false\n---\n","updated":"2017-04-20T16:20:10.616Z","path":"categories/index.html","layout":"page","_id":"cj2ho54ig000334v1lr72b19x","content":"","excerpt":"","more":""},{"title":"标签","date":"2017-03-30T03:15:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-30 11:15:04\ntype: tags\ncomments: false\n---\n","updated":"2017-04-20T16:20:10.631Z","path":"tags/index.html","layout":"page","_id":"cj2ho54iv000734v1m8r9ccna","content":"","excerpt":"","more":""}],"Post":[{"title":"Java注解，安卓IOC","date":"2017-05-09T14:43:44.000Z","_content":"","source":"_posts/Java注解，安卓IOC.md","raw":"---\ntitle: Java注解，安卓IOC\ndate: 2017-05-09 22:43:44\ntags: Android 框架\ncategory: Android\n---\n","slug":"Java注解，安卓IOC","published":1,"updated":"2017-05-09T14:44:37.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ho54i5000034v18cws2pvj","content":"","excerpt":"","more":""},{"title":"LBehavior","date":"2017-04-14T08:25:46.000Z","_content":"\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","source":"_posts/Behavior.md","raw":"---\ntitle: LBehavior\ndate: 2017-04-14 16:25:46\ncategory: Android\ntags: \n\t- 自定义View\n---\n\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","slug":"Behavior","published":1,"updated":"2017-05-09T14:42:07.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ho54ie000234v184z53k0r","content":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width=\"270\" height=\"450\" alt=\"效果图1\"><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width=\"270\" height=\"450\" alt=\"效果图2\"></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\" target=\"_blank\" rel=\"external\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\" target=\"_blank\" rel=\"external\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">layoutDependsOn</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> dependency <span class=\"keyword\">instanceof</span> AppBarLayout;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDependentViewChanged</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">\toffsetChildAsNeeded(parent， child， dependency);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断是否垂直滑动</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 触发滑动嵌套滚动之前调用的方法</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">   * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">   * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View(实现NestedScrollingChild接口)</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dx                滑动的X轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dy                滑动的Y轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </span></span></div><div class=\"line\"><span class=\"keyword\">int</span> dx， <span class=\"keyword\">int</span> dy， <span class=\"keyword\">int</span>[] consumed) &#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 滑动嵌套滚动时触发的方法</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">    * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxConsumed        TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyConsumed        TargetView消费的Y轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxUnconsumed      未被TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，</div><div class=\"line\"> *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </span></span></div><div class=\"line\">\t<span class=\"keyword\">int</span> dxConsumed， <span class=\"keyword\">int</span> dyConsumed， <span class=\"keyword\">int</span> dxUnconsumed， <span class=\"keyword\">int</span> dyUnconsumed) &#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout， child， target， </div><div class=\"line\">\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断垂直滑动</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (isInit) &#123;<span class=\"comment\">// 设置标记，防止new Anim导致的parent和child坐标变化</span></div><div class=\"line\">           mCommonAnim = <span class=\"keyword\">new</span> LTitleBehaviorAnim(child);</div><div class=\"line\">           isInit = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy, <span class=\"keyword\">int</span>[] consumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mCommonAnim != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mCommonAnim.setDuration(mDuration);</div><div class=\"line\">           mCommonAnim.setInterpolator(mInterpolator);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dxConsumed, <span class=\"keyword\">int</span> dyConsumed, <span class=\"keyword\">int</span> dxUnconsumed, <span class=\"keyword\">int</span> dyUnconsumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (dyConsumed &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (isHide) &#123;</div><div class=\"line\">               mCommonAnim.show();</div><div class=\"line\">               isHide = <span class=\"keyword\">false</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dyConsumed &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!isHide) &#123;</div><div class=\"line\">               mCommonAnim.hide();</div><div class=\"line\">               isHide = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LBottomBehaviorAnim</span><span class=\"params\">(View bottomView)</span> </span>&#123;</div><div class=\"line\">       mBottomView = bottomView;</div><div class=\"line\">       mOriginalY = mBottomView.getY();<span class=\"comment\">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//显示</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hide</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//隐藏</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(Math.abs(dyConsumed) &gt; minScrollY)&#123;</div><div class=\"line\">\t...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mTotalScrollY += dyConsumed;<span class=\"comment\">//累加消费的距离</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (Math.abs(dyConsumed) &gt; minScrollY || Math.abs(mTotalScrollY) &gt; scrollYDistance) &#123;</div><div class=\"line\">\t...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">       mTotalScrollY = <span class=\"number\">0</span>;<span class=\"comment\">//动画执行完毕后重置</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CommonBehavior <span class=\"title\">from</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       ViewGroup.LayoutParams params = view.getLayoutParams();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> CoordinatorLayout.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view is not a child of CoordinatorLayout\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(behavior <span class=\"keyword\">instanceof</span> CommonBehavior)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (CommonBehavior) behavior;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>然后可以设置对象的属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setDuration</span><span class=\"params\">(<span class=\"keyword\">int</span> duration)</span> </span>&#123;</div><div class=\"line\">       mDuration = duration;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setInterpolator</span><span class=\"params\">(Interpolator interpolator)</span> </span>&#123;</div><div class=\"line\">       mInterpolator = interpolator;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setMinScrollY</span><span class=\"params\">(<span class=\"keyword\">int</span> minScrollY)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.minScrollY = minScrollY;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setScrollYDistance</span><span class=\"params\">(<span class=\"keyword\">int</span> scrollYDistance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.scrollYDistance = scrollYDistance;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">\t    ...</div><div class=\"line\">\t    maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">   dependencies &#123;</div><div class=\"line\">    compile <span class=\"string\">'com.github.Lauzy:LBehavior:1.0.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\" target=\"_blank\" rel=\"external\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">CommonBehavior.from(mFloatingActionButton)</div><div class=\"line\">\t.setMinScrollY(<span class=\"number\">20</span>)</div><div class=\"line\">\t.setScrollYDistance(<span class=\"number\">100</span>)</div><div class=\"line\">\t.setDuration(<span class=\"number\">1000</span>)</div><div class=\"line\">\t.setInterpolator(<span class=\"keyword\">new</span> LinearOutSlowInInterpolator());</div></pre></td></tr></table></figure>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>。</p>\n","excerpt":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>","more":"<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">layoutDependsOn</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> dependency <span class=\"keyword\">instanceof</span> AppBarLayout;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDependentViewChanged</span><span class=\"params\">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class=\"line\">\toffsetChildAsNeeded(parent， child， dependency);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断是否垂直滑动</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * 触发滑动嵌套滚动之前调用的方法</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">   * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">   * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View(实现NestedScrollingChild接口)</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dx                滑动的X轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> dy                滑动的Y轴距离</div><div class=\"line\">   * <span class=\"doctag\">@param</span> consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </div><div class=\"line\"><span class=\"keyword\">int</span> dx， <span class=\"keyword\">int</span> dy， <span class=\"keyword\">int</span>[] consumed)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 滑动嵌套滚动时触发的方法</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> coordinatorLayout coordinatorLayout父布局</div><div class=\"line\">    * <span class=\"doctag\">@param</span> child             使用Behavior的子View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> target            触发滑动嵌套的View</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxConsumed        TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyConsumed        TargetView消费的Y轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dxUnconsumed      未被TargetView消费的X轴距离</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，</div><div class=\"line\"> *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout， View child， View target， </div><div class=\"line\">\t<span class=\"keyword\">int</span> dxConsumed， <span class=\"keyword\">int</span> dyConsumed， <span class=\"keyword\">int</span> dxUnconsumed， <span class=\"keyword\">int</span> dyUnconsumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout， child， target， </div><div class=\"line\">\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断垂直滑动</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class=\"keyword\">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (isInit) &#123;<span class=\"comment\">// 设置标记，防止new Anim导致的parent和child坐标变化</span></div><div class=\"line\">           mCommonAnim = <span class=\"keyword\">new</span> LTitleBehaviorAnim(child);</div><div class=\"line\">           isInit = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedPreScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy, <span class=\"keyword\">int</span>[] consumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mCommonAnim != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mCommonAnim.setDuration(mDuration);</div><div class=\"line\">           mCommonAnim.setInterpolator(mInterpolator);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestedScroll</span><span class=\"params\">(CoordinatorLayout coordinatorLayout, View child, View target, <span class=\"keyword\">int</span> dxConsumed, <span class=\"keyword\">int</span> dyConsumed, <span class=\"keyword\">int</span> dxUnconsumed, <span class=\"keyword\">int</span> dyUnconsumed)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (dyConsumed &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (isHide) &#123;</div><div class=\"line\">               mCommonAnim.show();</div><div class=\"line\">               isHide = <span class=\"keyword\">false</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dyConsumed &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!isHide) &#123;</div><div class=\"line\">               mCommonAnim.hide();</div><div class=\"line\">               isHide = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LBottomBehaviorAnim</span><span class=\"params\">(View bottomView)</span> </span>&#123;</div><div class=\"line\">       mBottomView = bottomView;</div><div class=\"line\">       mOriginalY = mBottomView.getY();<span class=\"comment\">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//显示</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hide</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//隐藏</span></div><div class=\"line\">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());</div><div class=\"line\">       animator.setDuration(getDuration());</div><div class=\"line\">       animator.setInterpolator(getInterpolator());</div><div class=\"line\">       animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">       animator.start();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(Math.abs(dyConsumed) &gt; minScrollY)&#123;</div><div class=\"line\">\t...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mTotalScrollY += dyConsumed;<span class=\"comment\">//累加消费的距离</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (Math.abs(dyConsumed) &gt; minScrollY || Math.abs(mTotalScrollY) &gt; scrollYDistance) &#123;</div><div class=\"line\">\t...<span class=\"comment\">//onNestedScroll里边的逻辑代码</span></div><div class=\"line\">       mTotalScrollY = <span class=\"number\">0</span>;<span class=\"comment\">//动画执行完毕后重置</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CommonBehavior <span class=\"title\">from</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       ViewGroup.LayoutParams params = view.getLayoutParams();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> CoordinatorLayout.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view is not a child of CoordinatorLayout\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();</div><div class=\"line\">       <span class=\"keyword\">if</span> (!(behavior <span class=\"keyword\">instanceof</span> CommonBehavior)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (CommonBehavior) behavior;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>然后可以设置对象的属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setDuration</span><span class=\"params\">(<span class=\"keyword\">int</span> duration)</span> </span>&#123;</div><div class=\"line\">       mDuration = duration;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setInterpolator</span><span class=\"params\">(Interpolator interpolator)</span> </span>&#123;</div><div class=\"line\">       mInterpolator = interpolator;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setMinScrollY</span><span class=\"params\">(<span class=\"keyword\">int</span> minScrollY)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.minScrollY = minScrollY;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> CommonBehavior <span class=\"title\">setScrollYDistance</span><span class=\"params\">(<span class=\"keyword\">int</span> scrollYDistance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.scrollYDistance = scrollYDistance;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">\t    ...</div><div class=\"line\">\t    maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">   dependencies &#123;</div><div class=\"line\">    compile <span class=\"string\">'com.github.Lauzy:LBehavior:1.0.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">CommonBehavior.from(mFloatingActionButton)</div><div class=\"line\">\t.setMinScrollY(<span class=\"number\">20</span>)</div><div class=\"line\">\t.setScrollYDistance(<span class=\"number\">100</span>)</div><div class=\"line\">\t.setDuration(<span class=\"number\">1000</span>)</div><div class=\"line\">\t.setInterpolator(<span class=\"keyword\">new</span> LinearOutSlowInInterpolator());</div></pre></td></tr></table></figure>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>。</p>"},{"title":"拖拽图片","date":"2017-05-05T07:34:59.000Z","_content":"\n闲来无事，在[干货集中营](https://github.com/Lauzy/GankPro)里又撸了个效果。\n\n先来一波效果图：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width = \"270\" height = \"450\" alt=\"效果图\"/>\n\n<!--more-->\n\n实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：\n\n```java\n\n\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\n\t\t//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();\n        switch (event.getActionMasked()) {\n            case MotionEvent.ACTION_DOWN:\n\t\t\t//获取手指按下时X和Y轴的坐标\n                mOriginalY = (int) event.getRawY();\n                mOriginalX = (int) event.getRawX();\n                break;\n            case MotionEvent.ACTION_MOVE:\n\t\t\t//获取移动的距离\n                mMotionY = (int) (event.getRawY() - mOriginalY);\n                mMotionX = (int) (event.getRawX() - mOriginalX);\n\t\t\t//计算缩放比例\n                float ratio = Math.abs(mMotionY) * 1.0f / v.getHeight();\n                float ratioY = Math.abs(mMotionY) <= v.getHeight() ? (ratio <= 0.5f ? ratio : 0.5f) : 0.5f;\n            //根据Y轴变化缩放比例\n                v.setScaleX(1 - ratioY);\n                v.setScaleY(1 - ratioY);\n\t\t\t//设置layoutParams变化\n                layoutParams.topMargin = mMotionY / 2;\n                layoutParams.leftMargin = mMotionX / 2;\n                layoutParams.bottomMargin = -mMotionY / 2;\n                layoutParams.rightMargin = -mMotionX / 2;\n                v.setLayoutParams(layoutParams);\n\t\t\t//调用requestLayout 重置布局\n                v.requestLayout();\n\t\t\t//设置透明度最低值\n                if (Math.abs(mMotionY) > 500) {\n                    mContentLayout.getBackground().setAlpha(100);\n                    mCurAlpha = 100;\n                } else {\n\t\t\t\t//根据移动距离计算透明度\n                    float ratioAlpha = (Math.abs(mMotionY) / 500.0f) * (255 - 100);\n                    mContentLayout.getBackground().setAlpha(255 - (int) ratioAlpha);\n                    mCurAlpha = 255 - (int) ratioAlpha;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n\t\t\t//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法\n                if (Math.abs(mMotionY) > 400) {\n                    mImageEventListener.onActionBack();\n                } else {\n                //无动画返回原状\n                    /*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/\n\t\t\t\t//通过一系列动画将View复原\n                    setScaleAnim(v);\n                    setMarginAnim(v, layoutParams, Direction.LEFT);\n                    setMarginAnim(v, layoutParams, Direction.RIGHT);\n                    setMarginAnim(v, layoutParams, Direction.TOP);\n                    setMarginAnim(v, layoutParams, Direction.BOTTOM);\n                    v.requestLayout();\n                }\n                ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, 255);\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator animation) {\n                        mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());\n                    }\n                });\n                animator.setDuration(300).start();\n                break;\n        }\n\t//消费事件\n        return true;\n    }\n\n```\n\n\n然后在使用的地方直接调用即可：\n\n```java\n\t\timageView.setOnTouchListener(new DragImageOnTouchListener(frameLayout, new DragImageOnTouchListener.ImageEventListener() {\n            @Override\n            public void onActionBack() {\n                onBackPressed();\n\t\t\t\t//可处理具体的逻辑\n            }\n        }));\n```\n\n注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。\n具体代码可参考  [我的Github](https://github.com/Lauzy/LauzyCode) 的[DragImage包下](https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage),\n在我的[干货集中营](https://github.com/Lauzy/GankPro) 中也有具体的使用。","source":"_posts/拖拽图片.md","raw":"---\ntitle: 拖拽图片\ndate: 2017-05-05 15:34:59\ncategory: Android\ntags: Android 交互\n---\n\n闲来无事，在[干货集中营](https://github.com/Lauzy/GankPro)里又撸了个效果。\n\n先来一波效果图：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width = \"270\" height = \"450\" alt=\"效果图\"/>\n\n<!--more-->\n\n实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：\n\n```java\n\n\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\n\t\t//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();\n        switch (event.getActionMasked()) {\n            case MotionEvent.ACTION_DOWN:\n\t\t\t//获取手指按下时X和Y轴的坐标\n                mOriginalY = (int) event.getRawY();\n                mOriginalX = (int) event.getRawX();\n                break;\n            case MotionEvent.ACTION_MOVE:\n\t\t\t//获取移动的距离\n                mMotionY = (int) (event.getRawY() - mOriginalY);\n                mMotionX = (int) (event.getRawX() - mOriginalX);\n\t\t\t//计算缩放比例\n                float ratio = Math.abs(mMotionY) * 1.0f / v.getHeight();\n                float ratioY = Math.abs(mMotionY) <= v.getHeight() ? (ratio <= 0.5f ? ratio : 0.5f) : 0.5f;\n            //根据Y轴变化缩放比例\n                v.setScaleX(1 - ratioY);\n                v.setScaleY(1 - ratioY);\n\t\t\t//设置layoutParams变化\n                layoutParams.topMargin = mMotionY / 2;\n                layoutParams.leftMargin = mMotionX / 2;\n                layoutParams.bottomMargin = -mMotionY / 2;\n                layoutParams.rightMargin = -mMotionX / 2;\n                v.setLayoutParams(layoutParams);\n\t\t\t//调用requestLayout 重置布局\n                v.requestLayout();\n\t\t\t//设置透明度最低值\n                if (Math.abs(mMotionY) > 500) {\n                    mContentLayout.getBackground().setAlpha(100);\n                    mCurAlpha = 100;\n                } else {\n\t\t\t\t//根据移动距离计算透明度\n                    float ratioAlpha = (Math.abs(mMotionY) / 500.0f) * (255 - 100);\n                    mContentLayout.getBackground().setAlpha(255 - (int) ratioAlpha);\n                    mCurAlpha = 255 - (int) ratioAlpha;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n\t\t\t//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法\n                if (Math.abs(mMotionY) > 400) {\n                    mImageEventListener.onActionBack();\n                } else {\n                //无动画返回原状\n                    /*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/\n\t\t\t\t//通过一系列动画将View复原\n                    setScaleAnim(v);\n                    setMarginAnim(v, layoutParams, Direction.LEFT);\n                    setMarginAnim(v, layoutParams, Direction.RIGHT);\n                    setMarginAnim(v, layoutParams, Direction.TOP);\n                    setMarginAnim(v, layoutParams, Direction.BOTTOM);\n                    v.requestLayout();\n                }\n                ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, 255);\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator animation) {\n                        mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());\n                    }\n                });\n                animator.setDuration(300).start();\n                break;\n        }\n\t//消费事件\n        return true;\n    }\n\n```\n\n\n然后在使用的地方直接调用即可：\n\n```java\n\t\timageView.setOnTouchListener(new DragImageOnTouchListener(frameLayout, new DragImageOnTouchListener.ImageEventListener() {\n            @Override\n            public void onActionBack() {\n                onBackPressed();\n\t\t\t\t//可处理具体的逻辑\n            }\n        }));\n```\n\n注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。\n具体代码可参考  [我的Github](https://github.com/Lauzy/LauzyCode) 的[DragImage包下](https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage),\n在我的[干货集中营](https://github.com/Lauzy/GankPro) 中也有具体的使用。","slug":"拖拽图片","published":1,"updated":"2017-05-09T14:42:07.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ho54iu000634v1jp1yzoyf","content":"<p>闲来无事，在<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营</a>里又撸了个效果。</p>\n<p>先来一波效果图：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width=\"270\" height=\"450\" alt=\"效果图\"></p>\n<a id=\"more\"></a>\n<p>实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。</span></div><div class=\"line\">       FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();</div><div class=\"line\">       <span class=\"keyword\">switch</span> (event.getActionMasked()) &#123;</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">\t\t<span class=\"comment\">//获取手指按下时X和Y轴的坐标</span></div><div class=\"line\">               mOriginalY = (<span class=\"keyword\">int</span>) event.getRawY();</div><div class=\"line\">               mOriginalX = (<span class=\"keyword\">int</span>) event.getRawX();</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">\t\t<span class=\"comment\">//获取移动的距离</span></div><div class=\"line\">               mMotionY = (<span class=\"keyword\">int</span>) (event.getRawY() - mOriginalY);</div><div class=\"line\">               mMotionX = (<span class=\"keyword\">int</span>) (event.getRawX() - mOriginalX);</div><div class=\"line\">\t\t<span class=\"comment\">//计算缩放比例</span></div><div class=\"line\">               <span class=\"keyword\">float</span> ratio = Math.abs(mMotionY) * <span class=\"number\">1.0f</span> / v.getHeight();</div><div class=\"line\">               <span class=\"keyword\">float</span> ratioY = Math.abs(mMotionY) &lt;= v.getHeight() ? (ratio &lt;= <span class=\"number\">0.5f</span> ? ratio : <span class=\"number\">0.5f</span>) : <span class=\"number\">0.5f</span>;</div><div class=\"line\">           <span class=\"comment\">//根据Y轴变化缩放比例</span></div><div class=\"line\">               v.setScaleX(<span class=\"number\">1</span> - ratioY);</div><div class=\"line\">               v.setScaleY(<span class=\"number\">1</span> - ratioY);</div><div class=\"line\">\t\t<span class=\"comment\">//设置layoutParams变化</span></div><div class=\"line\">               layoutParams.topMargin = mMotionY / <span class=\"number\">2</span>;</div><div class=\"line\">               layoutParams.leftMargin = mMotionX / <span class=\"number\">2</span>;</div><div class=\"line\">               layoutParams.bottomMargin = -mMotionY / <span class=\"number\">2</span>;</div><div class=\"line\">               layoutParams.rightMargin = -mMotionX / <span class=\"number\">2</span>;</div><div class=\"line\">               v.setLayoutParams(layoutParams);</div><div class=\"line\">\t\t<span class=\"comment\">//调用requestLayout 重置布局</span></div><div class=\"line\">               v.requestLayout();</div><div class=\"line\">\t\t<span class=\"comment\">//设置透明度最低值</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (Math.abs(mMotionY) &gt; <span class=\"number\">500</span>) &#123;</div><div class=\"line\">                   mContentLayout.getBackground().setAlpha(<span class=\"number\">100</span>);</div><div class=\"line\">                   mCurAlpha = <span class=\"number\">100</span>;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//根据移动距离计算透明度</span></div><div class=\"line\">                   <span class=\"keyword\">float</span> ratioAlpha = (Math.abs(mMotionY) / <span class=\"number\">500.0f</span>) * (<span class=\"number\">255</span> - <span class=\"number\">100</span>);</div><div class=\"line\">                   mContentLayout.getBackground().setAlpha(<span class=\"number\">255</span> - (<span class=\"keyword\">int</span>) ratioAlpha);</div><div class=\"line\">                   mCurAlpha = <span class=\"number\">255</span> - (<span class=\"keyword\">int</span>) ratioAlpha;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</div><div class=\"line\">\t\t<span class=\"comment\">//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (Math.abs(mMotionY) &gt; <span class=\"number\">400</span>) &#123;</div><div class=\"line\">                   mImageEventListener.onActionBack();</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">//无动画返回原状</span></div><div class=\"line\">                   <span class=\"comment\">/*v.setScaleY(1);</span></div><div class=\"line\">                   v.setScaleX(1);</div><div class=\"line\">                   layoutParams.topMargin = 0;</div><div class=\"line\">                   layoutParams.bottomMargin = 0;</div><div class=\"line\">                   layoutParams.leftMargin = 0;</div><div class=\"line\">                   layoutParams.rightMargin = 0;</div><div class=\"line\">                   mContentLayout.getBackground().setAlpha(255);*/</div><div class=\"line\">\t\t\t<span class=\"comment\">//通过一系列动画将View复原</span></div><div class=\"line\">                   setScaleAnim(v);</div><div class=\"line\">                   setMarginAnim(v, layoutParams, Direction.LEFT);</div><div class=\"line\">                   setMarginAnim(v, layoutParams, Direction.RIGHT);</div><div class=\"line\">                   setMarginAnim(v, layoutParams, Direction.TOP);</div><div class=\"line\">                   setMarginAnim(v, layoutParams, Direction.BOTTOM);</div><div class=\"line\">                   v.requestLayout();</div><div class=\"line\">               &#125;</div><div class=\"line\">               ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, <span class=\"number\">255</span>);</div><div class=\"line\">               animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">                       mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div><div class=\"line\">               animator.setDuration(<span class=\"number\">300</span>).start();</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"><span class=\"comment\">//消费事件</span></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>然后在使用的地方直接调用即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">imageView.setOnTouchListener(<span class=\"keyword\">new</span> DragImageOnTouchListener(frameLayout, <span class=\"keyword\">new</span> DragImageOnTouchListener.ImageEventListener() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActionBack</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">              onBackPressed();</div><div class=\"line\">\t\t<span class=\"comment\">//可处理具体的逻辑</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;));</div></pre></td></tr></table></figure>\n<p>注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。<br>具体代码可参考  <a href=\"https://github.com/Lauzy/LauzyCode\" target=\"_blank\" rel=\"external\">我的Github</a> 的<a href=\"https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage\" target=\"_blank\" rel=\"external\">DragImage包下</a>,<br>在我的<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营</a> 中也有具体的使用。</p>\n","excerpt":"<p>闲来无事，在<a href=\"https://github.com/Lauzy/GankPro\">干货集中营</a>里又撸了个效果。</p>\n<p>先来一波效果图：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width = \"270\" height = \"450\" alt=\"效果图\"/></p>","more":"<p>实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。</span></div><div class=\"line\">       FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();</div><div class=\"line\">       <span class=\"keyword\">switch</span> (event.getActionMasked()) &#123;</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">\t\t<span class=\"comment\">//获取手指按下时X和Y轴的坐标</span></div><div class=\"line\">               mOriginalY = (<span class=\"keyword\">int</span>) event.getRawY();</div><div class=\"line\">               mOriginalX = (<span class=\"keyword\">int</span>) event.getRawX();</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">\t\t<span class=\"comment\">//获取移动的距离</span></div><div class=\"line\">               mMotionY = (<span class=\"keyword\">int</span>) (event.getRawY() - mOriginalY);</div><div class=\"line\">               mMotionX = (<span class=\"keyword\">int</span>) (event.getRawX() - mOriginalX);</div><div class=\"line\">\t\t<span class=\"comment\">//计算缩放比例</span></div><div class=\"line\">               <span class=\"keyword\">float</span> ratio = Math.abs(mMotionY) * <span class=\"number\">1.0f</span> / v.getHeight();</div><div class=\"line\">               <span class=\"keyword\">float</span> ratioY = Math.abs(mMotionY) &lt;= v.getHeight() ? (ratio &lt;= <span class=\"number\">0.5f</span> ? ratio : <span class=\"number\">0.5f</span>) : <span class=\"number\">0.5f</span>;</div><div class=\"line\">           <span class=\"comment\">//根据Y轴变化缩放比例</span></div><div class=\"line\">               v.setScaleX(<span class=\"number\">1</span> - ratioY);</div><div class=\"line\">               v.setScaleY(<span class=\"number\">1</span> - ratioY);</div><div class=\"line\">\t\t<span class=\"comment\">//设置layoutParams变化</span></div><div class=\"line\">               layoutParams.topMargin = mMotionY / <span class=\"number\">2</span>;</div><div class=\"line\">               layoutParams.leftMargin = mMotionX / <span class=\"number\">2</span>;</div><div class=\"line\">               layoutParams.bottomMargin = -mMotionY / <span class=\"number\">2</span>;</div><div class=\"line\">               layoutParams.rightMargin = -mMotionX / <span class=\"number\">2</span>;</div><div class=\"line\">               v.setLayoutParams(layoutParams);</div><div class=\"line\">\t\t<span class=\"comment\">//调用requestLayout 重置布局</span></div><div class=\"line\">               v.requestLayout();</div><div class=\"line\">\t\t<span class=\"comment\">//设置透明度最低值</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (Math.abs(mMotionY) &gt; <span class=\"number\">500</span>) &#123;</div><div class=\"line\">                   mContentLayout.getBackground().setAlpha(<span class=\"number\">100</span>);</div><div class=\"line\">                   mCurAlpha = <span class=\"number\">100</span>;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//根据移动距离计算透明度</span></div><div class=\"line\">                   <span class=\"keyword\">float</span> ratioAlpha = (Math.abs(mMotionY) / <span class=\"number\">500.0f</span>) * (<span class=\"number\">255</span> - <span class=\"number\">100</span>);</div><div class=\"line\">                   mContentLayout.getBackground().setAlpha(<span class=\"number\">255</span> - (<span class=\"keyword\">int</span>) ratioAlpha);</div><div class=\"line\">                   mCurAlpha = <span class=\"number\">255</span> - (<span class=\"keyword\">int</span>) ratioAlpha;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</div><div class=\"line\">\t\t<span class=\"comment\">//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (Math.abs(mMotionY) &gt; <span class=\"number\">400</span>) &#123;</div><div class=\"line\">                   mImageEventListener.onActionBack();</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">//无动画返回原状</span></div><div class=\"line\">                   <span class=\"comment\">/*v.setScaleY(1);</div><div class=\"line\">                   v.setScaleX(1);</div><div class=\"line\">                   layoutParams.topMargin = 0;</div><div class=\"line\">                   layoutParams.bottomMargin = 0;</div><div class=\"line\">                   layoutParams.leftMargin = 0;</div><div class=\"line\">                   layoutParams.rightMargin = 0;</div><div class=\"line\">                   mContentLayout.getBackground().setAlpha(255);*/</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//通过一系列动画将View复原</span></div><div class=\"line\">                   setScaleAnim(v);</div><div class=\"line\">                   setMarginAnim(v, layoutParams, Direction.LEFT);</div><div class=\"line\">                   setMarginAnim(v, layoutParams, Direction.RIGHT);</div><div class=\"line\">                   setMarginAnim(v, layoutParams, Direction.TOP);</div><div class=\"line\">                   setMarginAnim(v, layoutParams, Direction.BOTTOM);</div><div class=\"line\">                   v.requestLayout();</div><div class=\"line\">               &#125;</div><div class=\"line\">               ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, <span class=\"number\">255</span>);</div><div class=\"line\">               animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">                       mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div><div class=\"line\">               animator.setDuration(<span class=\"number\">300</span>).start();</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"><span class=\"comment\">//消费事件</span></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>然后在使用的地方直接调用即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">imageView.setOnTouchListener(<span class=\"keyword\">new</span> DragImageOnTouchListener(frameLayout, <span class=\"keyword\">new</span> DragImageOnTouchListener.ImageEventListener() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActionBack</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">              onBackPressed();</div><div class=\"line\">\t\t<span class=\"comment\">//可处理具体的逻辑</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;));</div></pre></td></tr></table></figure>\n<p>注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。<br>具体代码可参考  <a href=\"https://github.com/Lauzy/LauzyCode\">我的Github</a> 的<a href=\"https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage\">DragImage包下</a>,<br>在我的<a href=\"https://github.com/Lauzy/GankPro\">干货集中营</a> 中也有具体的使用。</p>"},{"title":"沉浸、透明及白底黑字状态栏技巧","date":"2017-03-30T01:25:46.000Z","_content":"\n\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","source":"_posts/透明(沉浸)状态栏.md","raw":"---\ntitle: 沉浸、透明及白底黑字状态栏技巧\ndate: 2017-03-30 09:25:46\ncategory: Android\ntags: \n\t- Android Tips\n---\n\n\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","slug":"透明(沉浸)状态栏","published":1,"updated":"2017-05-09T14:42:07.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ho54iw000834v1b2lxlmdx","content":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>\n<a id=\"more\"></a>\n<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\" target=\"_blank\" rel=\"external\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">\tView decorView = getWindow().getDecorView();</div><div class=\"line\">\t<span class=\"keyword\">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</div><div class=\"line\">\tdecorView.setSystemUiVisibility(option);</div><div class=\"line\">\tgetWindow().setStatusBarColor(Color.TRANSPARENT);</div><div class=\"line\">\t<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mToolbar = (Toolbar) findViewById(R.id.toolbar_common);</div><div class=\"line\"><span class=\"keyword\">if</span> (mToolbar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());</div><div class=\"line\">\tmToolbar.setPadding(<span class=\"number\">0</span>, ScreenUtils.getStatusHeight(getApplicationContext()), <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\tsetSupportActionBar(mToolbar);</div><div class=\"line\">\tActionBar supportActionBar = getSupportActionBar();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (supportActionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tsupportActionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">false</span>);  <span class=\"comment\">//此处是为了不显示默认的标题</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置状态栏文字为暗色</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">\t<span class=\"comment\">//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。</span></div><div class=\"line\">\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">\tgetWindow().setStatusBarColor(Color.GRAY);  <span class=\"comment\">//21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置</span></div><div class=\"line\">\t<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN)&#123;</div><div class=\"line\">\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class=\"comment\">//4.4版本本身就含有暗色阴影，不作其他处理即可</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hasFocus)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onWindowFocusChanged(hasFocus);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">\t\tView decorView = getWindow().getDecorView();</div><div class=\"line\">\t\tdecorView.setSystemUiVisibility(</div><div class=\"line\">\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</include></p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\" target=\"_blank\" rel=\"external\">我的Github</a> ，在StatusBar包中。</p>\n","excerpt":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>","more":"<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">\tView decorView = getWindow().getDecorView();</div><div class=\"line\">\t<span class=\"keyword\">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</div><div class=\"line\">\tdecorView.setSystemUiVisibility(option);</div><div class=\"line\">\tgetWindow().setStatusBarColor(Color.TRANSPARENT);</div><div class=\"line\">\t<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mToolbar = (Toolbar) findViewById(R.id.toolbar_common);</div><div class=\"line\"><span class=\"keyword\">if</span> (mToolbar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());</div><div class=\"line\">\tmToolbar.setPadding(<span class=\"number\">0</span>, ScreenUtils.getStatusHeight(getApplicationContext()), <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\tsetSupportActionBar(mToolbar);</div><div class=\"line\">\tActionBar supportActionBar = getSupportActionBar();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (supportActionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tsupportActionBar.setDisplayShowTitleEnabled(<span class=\"keyword\">false</span>);  <span class=\"comment\">//此处是为了不显示默认的标题</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置状态栏文字为暗色</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">\t<span class=\"comment\">//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。</span></div><div class=\"line\">\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">\tgetWindow().setStatusBarColor(Color.GRAY);  <span class=\"comment\">//21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置</span></div><div class=\"line\">\t<span class=\"comment\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN)&#123;</div><div class=\"line\">\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class=\"comment\">//4.4版本本身就含有暗色阴影，不作其他处理即可</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hasFocus)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onWindowFocusChanged(hasFocus);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">\t\tView decorView = getWindow().getDecorView();</div><div class=\"line\">\t\tdecorView.setSystemUiVisibility(</div><div class=\"line\">\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN</div><div class=\"line\">\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\">我的Github</a> ，在StatusBar包中。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2ho54iw000834v1b2lxlmdx","category_id":"cj2ho54iq000434v15j56gf9j","_id":"cj2ho54j6000c34v1nyelyjk3"},{"post_id":"cj2ho54i5000034v18cws2pvj","category_id":"cj2ho54iq000434v15j56gf9j","_id":"cj2ho54j9000f34v133dojej9"},{"post_id":"cj2ho54ie000234v184z53k0r","category_id":"cj2ho54iq000434v15j56gf9j","_id":"cj2ho54j9000h34v12y3x2hf9"},{"post_id":"cj2ho54iu000634v1jp1yzoyf","category_id":"cj2ho54iq000434v15j56gf9j","_id":"cj2ho54ja000k34v1qn6x37kc"}],"PostTag":[{"post_id":"cj2ho54i5000034v18cws2pvj","tag_id":"cj2ho54is000534v1xv90k8u9","_id":"cj2ho54j4000b34v103jl31z9"},{"post_id":"cj2ho54ie000234v184z53k0r","tag_id":"cj2ho54j1000a34v10hzsg1h2","_id":"cj2ho54j9000g34v14h9jpfbs"},{"post_id":"cj2ho54iu000634v1jp1yzoyf","tag_id":"cj2ho54j8000e34v1yl0zq26h","_id":"cj2ho54ja000j34v1lalq5ror"},{"post_id":"cj2ho54iw000834v1b2lxlmdx","tag_id":"cj2ho54ja000i34v1a06vetso","_id":"cj2ho54jb000l34v1r3qp52c5"}],"Tag":[{"name":"Android 框架","_id":"cj2ho54is000534v1xv90k8u9"},{"name":"自定义View","_id":"cj2ho54j1000a34v10hzsg1h2"},{"name":"Android 交互","_id":"cj2ho54j8000e34v1yl0zq26h"},{"name":"Android Tips","_id":"cj2ho54ja000i34v1a06vetso"}]}}