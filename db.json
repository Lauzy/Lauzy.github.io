{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar_64.png","path":"img/avatar_64.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/hexo_avatar.png","path":"img/hexo_avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/scent.jpg","path":"img/scent.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/mathjax.js","path":"js/mathjax.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/md_bg.jpg","path":"img/md_bg.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5266cccde3be517a5fdfbe2127507c362ba6c9c9","modified":1490886285970},{"_id":"themes/material/.gitignore","hash":"ac363de61a510d41bcd76abd34fd8f3737ce29c6","modified":1497531857826},{"_id":"themes/material/.eslintrc.json","hash":"f4cdab9b046c8ff4860c1962d3e58c41801ee0fc","modified":1497531857824},{"_id":"themes/material/.travis.yml","hash":"639b4687fa0c080b419405136a5081603a83b6c0","modified":1497531857829},{"_id":"themes/material/CONTRIBUTING.md","hash":"502dc2e3887b9667b898709c3aab649884f3fdfa","modified":1497531857833},{"_id":"themes/material/LICENSE","hash":"2ea9f02239dc6b5fdbfff01fcdf85bcc8c13667c","modified":1497531857842},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"84b5b1d1b77b0ec4e49ebb1a773965ac7c19ba7e","modified":1497531857836},{"_id":"themes/material/README.md","hash":"8fe00c82e71e4f5ecd84fb8757dd612ae91f8dbe","modified":1497531857852},{"_id":"themes/material/_config.yml","hash":"8d5b3c793289c54bf2d621304f5bf612e8ff9dc9","modified":1497531857860},{"_id":"themes/material/_config.template.yml","hash":"17daccd3146b2017b2c5b8eda2c4be49bd073d1c","modified":1497531857856},{"_id":"themes/material/contributing.json","hash":"f6f039672fef8e0267d9586c73d1a425c6c882d8","modified":1497531857865},{"_id":"themes/material/lint.sh","hash":"7d8c693175cf06c5de1dc0b964e13b2f052e6743","modified":1497531858612},{"_id":"themes/material/package.json","hash":"646173f157236fa6d9b71a0bfe4eb048bb40d129","modified":1497531858615},{"_id":"source/_posts/Behavior.md","hash":"f53a8d81b7320122ad0e515ef677fe7561857daa","modified":1494340927720},{"_id":"source/_posts/Java注解，安卓IOC.md","hash":"dbe260e4027a2712b4989302ce1b90ac66e8a5a3","modified":1497801925263},{"_id":"source/_posts/拖拽图片.md","hash":"bfa1b0cf5f750093cb8bafc164bf6541020df188","modified":1497531857815},{"_id":"source/_posts/透明(沉浸)状态栏.md","hash":"f921a80a14c2965229f9b6dc8b269886a25cb965","modified":1494340927728},{"_id":"source/images/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1490886261526},{"_id":"source/about/index.md","hash":"1340175847722ca3f3f27eb15d6778ef39cae020","modified":1497531857818},{"_id":"source/tags/index.md","hash":"aa50962d1ef474cbbbb99b408aec4152aba79f98","modified":1497531857821},{"_id":"source/categories/index.md","hash":"fa63a20c6bc071042793f4c917d7d5ce4bf5a290","modified":1492705210616},{"_id":"themes/material/languages/ar.yml","hash":"bc354f297755815a33a7600301dd73c5c7808b26","modified":1497531857868},{"_id":"themes/material/languages/en.yml","hash":"d29583bc9e2123a8817fff09fb624990d84aed69","modified":1497531857874},{"_id":"themes/material/languages/de.yml","hash":"61e64bacaad5976d37d677d72bec059f72b1c938","modified":1497531857871},{"_id":"themes/material/languages/es.yml","hash":"439865de1856a2143b4d12dbb1bcd0068478de02","modified":1497531857877},{"_id":"themes/material/languages/ja.yml","hash":"3f57faa091d834cafdcb1b250c34cf2f70b2131e","modified":1497531857884},{"_id":"themes/material/languages/fr.yml","hash":"4302fbb571340bbc127decb93ce826c5c94d7e72","modified":1497531857880},{"_id":"themes/material/languages/ms.yml","hash":"b2bc540e75b119e121f9eeaf4512da97e39f75d8","modified":1497531857887},{"_id":"themes/material/languages/pt-BR.yml","hash":"be6b90b8821963f2fa2da8b720617073f42c6c28","modified":1497531857890},{"_id":"themes/material/languages/zh-CN.yml","hash":"1dbd790ef1dde94006c4361f7824924cb4895755","modified":1497531857894},{"_id":"themes/material/languages/zh-TW.yml","hash":"25e9c0817810dc83cf7c079156ee31bd3670ad7e","modified":1497531857897},{"_id":"themes/material/layout/index.ejs","hash":"b68f162e312d6db8fc40b271d932e85fa1bf6961","modified":1497531858557},{"_id":"themes/material/layout/layout.ejs","hash":"5d54f9fbf8f3d3b5b98f7df6bf1742e0dc88475e","modified":1497531858575},{"_id":"themes/material/layout/post.ejs","hash":"67e727e7626ecbb888355513e28f11c5c34ef02a","modified":1497531858609},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497531857897},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"62b7b349f0e58f9add2b6fee1ebfc53dedba0016","modified":1497531857915},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"471a445f57080a804071ff2c48356da5ff8a3d5d","modified":1497531857925},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"c1422af8fba90ad7233531c322bb30d65e013b40","modified":1497531857940},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"0398c977f8343b59fa82b130eea8bc5bec2fbe80","modified":1497531857932},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"a53365c8a50db079eb6602350aa3f53d3712797d","modified":1497531857968},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"930c85b8c94fa6175873d7cd0e055908b4fd308f","modified":1497531857959},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"02b367ba76e1a39788466d51f0a6bfff2a34283c","modified":1497531857995},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"a37017e7cd33b5400368e509813b4a70dd30f352","modified":1497531858007},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"cbf957395338a38aa310a75ab2e1eca3733b6b6f","modified":1497531858017},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"bec0dfa67f67041ffed06e3f6ab2d0e33382756b","modified":1497531858025},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"471b945023673295494a0f32c7ad91d4e70d5712","modified":1497531858029},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"cc37f761abfaa26d2b20695d750078dbed05cb95","modified":1497531858051},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"08b37548a1dccf671289c642ad43b24e37a78c5a","modified":1497531858062},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"eabe53e9d9341101be6529d6331c617864a59b0d","modified":1497531858065},{"_id":"themes/material/layout/_partial/head.ejs","hash":"f8680c31395aae77e246ca8ec00a7d2fe0cd44c2","modified":1497531858127},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"7b946e7c38b48469610c1f7085b51aed6cbe9f32","modified":1497531858162},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"74de1f8ef14b58c21eb7895e9c9b3f3080d40aa4","modified":1497531858165},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"c83c2d75a73fea345cce11532132261d796d507e","modified":1497531858180},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"b5c4974ebd0038a52b7572ce9eeb8a9452fc943b","modified":1497531858188},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"6e9b69fcb444cfc369653d7062721c92b0c04a94","modified":1497531858198},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"05520fdd12408d6ab96dfbe9323faae9187dbd5d","modified":1497531858234},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"6b514c951b2535a0c1d22224c06856588ba18026","modified":1497531858237},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"4a8e5b9e67a898cbe4b67c474a25afc35bac03c0","modified":1497531858250},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"bb8eaf5fc538375b873489715765b9b27ec027d1","modified":1497531858256},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"b64ac5d04ddbe8a8c42b7aaf10e9fddec3a2e109","modified":1497531858259},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"8890efd1d0b04ea6ad7878ecb8b5196677bf1790","modified":1497531858300},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"e3c5c28ffadbca227345e65bc93a16bd313d86cc","modified":1497531858310},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"8ae7e786a10807d671b9413541666da455907e25","modified":1497531858317},{"_id":"themes/material/layout/_widget/changyan.ejs","hash":"720b1fd954577382ebdb60de6a93fb875843a9bb","modified":1497531858337},{"_id":"themes/material/layout/_widget/disqus.ejs","hash":"c8445ed4fa7e8d1de2d24fc44268ded5da571692","modified":1497531858347},{"_id":"themes/material/layout/_widget/disqus_click.ejs","hash":"809c48d5a7d7c4d939f6c19922a51b3158a1e439","modified":1497531858362},{"_id":"themes/material/layout/_widget/duoshuo.ejs","hash":"a978124593ea5cf17099127e7fa35c451a53a43e","modified":1497531858368},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"5483f0c8b753e171400d9c27a585de6de890c8ba","modified":1497531858382},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"69f5f3b2a9a2c84f0c8b424a412ef354cb0481a7","modified":1497531858397},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"a5ce35f2a456dc424e09b7e105b8d789dfe008df","modified":1497531858411},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"93312d47c3fd337babdeb998ea6f18dfe1a4b9d0","modified":1497531858439},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"4900f1d8e40dc0b3b2c01b29f00afb794f538404","modified":1497531858455},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"bec2faa36365b2295f085674dad46fd821ed5840","modified":1497531858472},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"ae562eea1b432e44927a999381c9c2c43d5c1cc4","modified":1497531858481},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"d080683e457fc9b5501d9c1d25b900cdcd4d147e","modified":1497531858490},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"92681f5bf1a0d3d17756ebd85a23168397c10e36","modified":1497531858506},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"af18b4dec62e463c52c612e89afe5ed81e24daf5","modified":1497531858522},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"ff3a8bebfaf298cd362b9bb13639bfacf4c8e380","modified":1497531858530},{"_id":"themes/material/source/css/duoshuo.css","hash":"7372200a8d019d4c368283de089d2e0481cb1de7","modified":1497531858618},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1497531858622},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1497531858626},{"_id":"themes/material/source/css/ie-blocker.css","hash":"121016e89d5f8b1f84f2e0a22da30f3c096de36e","modified":1497531858626},{"_id":"themes/material/source/css/uc.css","hash":"fdd08a03390256c5b89e38cad6e53228a49f02e1","modified":1497531858649},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1497531858673},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1497531858677},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1497531858780},{"_id":"themes/material/source/img/avatar_64.png","hash":"1aa6f07c762c921490463ca6ebe12f8d4180a92f","modified":1497531858781},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1497531858785},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1497531858786},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1497531858791},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1497531858825},{"_id":"themes/material/source/img/hexo_avatar.png","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1497531858825},{"_id":"themes/material/source/img/scent.jpg","hash":"74650d8a4d634786c01651775e49ebc6ce5e8cd7","modified":1497531858861},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1497531858865},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1497531858866},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"0bbd768e3be0081cf8d3fc3a9568c6a0f951ada7","modified":1497531858885},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"198ffa1583343a5b5bf5e52afcfbff96fd0ef569","modified":1497531858886},{"_id":"themes/material/source/js/lazyload.min.js","hash":"bccbdcb5e5c13543dc5cc764073e3a454739d458","modified":1497531858991},{"_id":"themes/material/source/js/mathjax.js","hash":"1bb65ddb64e17d7424af7c29ab9626fc4f4388e6","modified":1497531859018},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1497531859019},{"_id":"themes/material/source/js/queue.js","hash":"1d6f5257cc2392ee2c5c92631833faa39fac3f9f","modified":1497531859020},{"_id":"themes/material/source/js/smoothscroll.js","hash":"53204da28f2ccfd4af92511969319c574da1f7b5","modified":1497531859020},{"_id":"themes/material/source/css/style.css","hash":"5dea2bb9c5f23bfdc3d5852e32625258c4b95004","modified":1497531858645},{"_id":"themes/material/source/css/style.min.css","hash":"b5b75936390079524bf618dcc783fcee352e76b9","modified":1497531858649},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1497531858634},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1497531858655},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1497531858669},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1497531858753},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1497531858775},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1497531858780},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1497531858790},{"_id":"themes/material/source/js/jquery.min.js","hash":"d0c03f4b0c3b72172804cbc5d19e44b3a0a9a171","modified":1497531858924},{"_id":"themes/material/source/js/js.js","hash":"7234923ae42ef5dfecc0566b51a82236131b8a6d","modified":1497531858949},{"_id":"themes/material/source/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1497531858982},{"_id":"themes/material/source/css/material.css","hash":"d67a90e8f30df9874155ba81cff9b0e84b7e67cf","modified":1497531858630},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1497531858663},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1497531858771},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"6f1037ab0c48940f477b8f2d87e719724cde7f44","modified":1497531858820},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"6ca8e1b203728561c756cbd8d0237600f83717ee","modified":1497531858814},{"_id":"themes/material/source/img/gallery/close.svg","hash":"aab6fb81c25c46727357baa705fb3892b4858368","modified":1497531858817},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1497531858800},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1497531858803},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1497531858804},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1497531858806},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1497531858807},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1497531858807},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1497531858808},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1497531858809},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1497531858809},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1497531858810},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1497531858811},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1497531858834},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1497531858836},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1497531858844},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1497531858847},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1497531858849},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1497531858850},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1497531858852},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1497531858855},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1497531858856},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"79688611831faca31d5ef0c6d90397c29781fa98","modified":1497531858884},{"_id":"themes/material/source/img/md_bg.jpg","hash":"5fa5bce198693ed6487e9d711e490498fee59933","modified":1497531858831},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1497531858833},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1497531858835},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1497531858839},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1497531858838},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1497531858841},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1497531858843},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1497531858845},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1497531858848},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1497531858851},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1497531858853},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1497531858765},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1497531858687},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1497531858696},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1497531858715},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1497531858706},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1497531858724},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1497531858735},{"_id":"public/atom.xml","hash":"6c865157fc4f62aa3db3400c360464d19206e52c","modified":1497801974082},{"_id":"public/search.xml","hash":"776dca5204bf50ddeb3e076f91ceb7a49058bdd3","modified":1497801974082},{"_id":"public/categories/index.html","hash":"0ea88db970d15136d5a1c3fc73bb845bc05089de","modified":1497801974254},{"_id":"public/about/index.html","hash":"e06d552b7a588c91bb3259011e88f172f3c21b75","modified":1497801974254},{"_id":"public/2017/05/09/Java注解，安卓IOC/index.html","hash":"42fd84a80f089983aca3274616b11a8a5cb41a41","modified":1497801974316},{"_id":"public/tags/index.html","hash":"747477c261d22e67dcc10d01785483041b9f5a90","modified":1497801974316},{"_id":"public/2017/05/05/拖拽图片/index.html","hash":"8c6bde6e7a996614ded5fc7cdab20ecabbb104b7","modified":1497801974316},{"_id":"public/2017/04/14/Behavior/index.html","hash":"a09dd3727ab45efb628fe8cdc29b5e27e2db7dbd","modified":1497801974316},{"_id":"public/archives/index.html","hash":"ae926868cb0f5b42b4d0075c69c47833782834b8","modified":1497801974316},{"_id":"public/2017/03/30/透明(沉浸)状态栏/index.html","hash":"39f4d573b093bd37110a0a56f89b3f4a0b015e34","modified":1497801974316},{"_id":"public/archives/2017/index.html","hash":"26b84bbc70b96f62e3c580dc11ede3b9e9b0fadf","modified":1497801974316},{"_id":"public/archives/2017/04/index.html","hash":"298bc2d9e42b804938f9324c2b3a168145a9a52c","modified":1497801974316},{"_id":"public/archives/2017/03/index.html","hash":"b5e551587525cae6411471413e1d682db5be2c05","modified":1497801974316},{"_id":"public/index.html","hash":"6f2bf3503c7960ef4f9dad156a7739441c946bac","modified":1497801974332},{"_id":"public/archives/2017/05/index.html","hash":"b0839fdba7a0da22ff73b9574983f218dd21c5a5","modified":1497801974332},{"_id":"public/categories/Android/index.html","hash":"6c077bde51e80bddc69aba3ae5b66d2ca6f00971","modified":1497801974332},{"_id":"public/tags/自定义View/index.html","hash":"6920d3743f529dc4ea5b6db868f01a0497154ab8","modified":1497801974332},{"_id":"public/tags/Android-框架/index.html","hash":"09bc3b8618fe9c56f4daedc422de8c495b1c7e2d","modified":1497801974332},{"_id":"public/tags/Android-交互/index.html","hash":"7b30b2b7fe03f2a31438b6cbd5557bad47372048","modified":1497801974332},{"_id":"public/tags/Android-Tips/index.html","hash":"f7b504618d2cee55ea9b9bc89affb298f1a1bd19","modified":1497801974332},{"_id":"public/CNAME","hash":"5266cccde3be517a5fdfbe2127507c362ba6c9c9","modified":1497801974332},{"_id":"public/images/favicon.ico","hash":"4ecc2a349c6c7a924e4eeac45cdd1d1e81d1b1e2","modified":1497801974332},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1497801974332},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1497801974332},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1497801974332},{"_id":"public/img/avatar_64.png","hash":"1aa6f07c762c921490463ca6ebe12f8d4180a92f","modified":1497801974332},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1497801974332},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1497801974332},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1497801974332},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1497801974332},{"_id":"public/img/hexo_avatar.png","hash":"86706cfacc61e173f0190e003c94e1a0ae816fea","modified":1497801974332},{"_id":"public/img/scent.jpg","hash":"74650d8a4d634786c01651775e49ebc6ce5e8cd7","modified":1497801974332},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1497801974332},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1497801974332},{"_id":"public/img/gallery/spinner.svg","hash":"6f1037ab0c48940f477b8f2d87e719724cde7f44","modified":1497801974332},{"_id":"public/img/gallery/arrow.svg","hash":"6ca8e1b203728561c756cbd8d0237600f83717ee","modified":1497801974332},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1497801974332},{"_id":"public/img/gallery/close.svg","hash":"aab6fb81c25c46727357baa705fb3892b4858368","modified":1497801974332},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1497801974332},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1497801974332},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1497801974332},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1497801974332},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1497801974332},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1497801974332},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1497801974332},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1497801974332},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1497801974332},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1497801974332},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1497801974332},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1497801974332},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1497801974332},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1497801974332},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1497801974332},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1497801974332},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1497801974332},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1497801974332},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1497801974348},{"_id":"public/css/prism-solarizedlight.css","hash":"1ffd219261edb0bf44df2c3fdbdca94909c25ae9","modified":1497801974348},{"_id":"public/css/prism-line-numbers.css","hash":"cafb1ecb236ddf68277894493194e10188ba50e3","modified":1497801974348},{"_id":"public/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1497801974348},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1497801974363},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1497801974363},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1497801974363},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1497801974363},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1497801974363},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1497801974363},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1497801974363},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1497801974363},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1497801974363},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1497801974363},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1497801974363},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1497801974363},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1497801974363},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1497801974363},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1497801974363},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1497801974379},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1497801974379},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1497801974379},{"_id":"public/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1497801974379},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1497801974379},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1497801974379},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1497801974379},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1497801974379},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1497801974379},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1497801974379},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1497801974379},{"_id":"public/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1497801974379},{"_id":"public/css/style.css","hash":"b423b687cfa2723554b7b42eab799a69ababa978","modified":1497801974379},{"_id":"public/css/style.min.css","hash":"25874013ac8a604058ddbe58cb33a2e3fa5b9b3c","modified":1497801974379},{"_id":"public/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1497801974379},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1497801974379},{"_id":"public/js/js.js","hash":"4634558bdb27ca5a2f728d6ff57590fbd91af6f1","modified":1497801974379},{"_id":"public/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1497801974379},{"_id":"public/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1497801974379},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1497801974379},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1497801974379},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1497801974379},{"_id":"public/img/md_bg.jpg","hash":"5fa5bce198693ed6487e9d711e490498fee59933","modified":1497801974395},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1497801974395},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1497801974535},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1497801974535},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1497801974535},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1497801974535},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1497801974535},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1497801974535},{"_id":"source/_posts/201705Behavior.md","hash":"f53a8d81b7320122ad0e515ef677fe7561857daa","modified":1498444482979},{"_id":"source/_posts/201705StatusBar.md","hash":"f921a80a14c2965229f9b6dc8b269886a25cb965","modified":1498444482990},{"_id":"source/_posts/201706DragImage.md","hash":"bfa1b0cf5f750093cb8bafc164bf6541020df188","modified":1498444483000},{"_id":"source/_posts/201706IOC.md","hash":"1909455e192e560d31dbe38af927c2a05e8cf243","modified":1498459384725},{"_id":"source/_posts/201706IOC1.md","hash":"058e66c7591402f5cba6dd392758ce875786af80","modified":1498485750698},{"_id":"source/_posts/201706IOC2.md","hash":"0801d260372e915d35d903d4789bcd8b826cf212","modified":1498486994586}],"Category":[{"name":"Android","_id":"cj42wmfc70004zov1m79tmz8y"}],"Data":[],"Page":[{"title":"PaleRider","date":"2017-03-30T03:22:00.000Z","comment":false,"notag":true,"toc":false,"_content":"\n\n<h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2>\n<center></center>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: PaleRider\ndate: 2017-03-30 11:22:00\ncomment: false\nnotag: true\ntoc: false\n---\n\n\n<h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2>\n<center></center>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","updated":"2017-06-15T13:04:17.818Z","path":"about/index.html","_id":"cj42wmfbr0001zov16w39xrzx","comments":1,"layout":"page","content":"<p></p><h2 align=\"center\">世界微尘里，吾宁爱与憎。</h2><p></p>\n<p><center></center></p>\n<h3 align=\"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"","more":"<p><h2 align = \"center\">世界微尘里，吾宁爱与憎。</h2></p>\n<p><center></center></p>\n<h3 align = \"center\"></h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"标签","date":"2017-03-30T03:15:04.000Z","type":"tags","layout":"tags","comment":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-30 11:15:04\ntype: tags\nlayout: tags\ncomment: false\n---\n","updated":"2017-06-15T13:04:17.821Z","path":"tags/index.html","_id":"cj42wmfbr0003zov19j8xc5j2","comments":1,"content":"","excerpt":"","more":""},{"title":"分类","date":"2017-03-30T03:19:10.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-30 11:19:10\ntype: categories\ncomments: false\n---\n","updated":"2017-04-20T16:20:10.616Z","path":"categories/index.html","_id":"cj42wmfc70007zov1n02z5o6g","layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"LBehavior","date":"2017-04-14T08:25:46.000Z","_content":"\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","source":"_posts/201705Behavior.md","raw":"---\ntitle: LBehavior\ndate: 2017-04-14 16:25:46\ncategory: Android\ntags: \n\t- 自定义View\n---\n\n\n\n> Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。\n本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款[干货集中营的客户端](https://github.com/Lauzy/GankPro)，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。\n\n<!--more-->\n\n## 先来一波效果图：\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/>\n\n## 效果实现思路：\n\n1. 判断手势\n\n2. 计算距离\n\n3. 触发动画\n\n## 文章目录：\n\n1. CoordinatorLayout及Behavior简介\n2. 自定义Behavior\n3. 仿知乎效果的动画实现及个性化\n\n\n## CoordinatorLayout和Behavior简介\n\nAndroid滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的[源码看CoordinatorLayout.Behavior原理](http://blog.csdn.net/qibin0506/article/details/50377592)。\n\n这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。\n\n滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -> 调用NestedScrollingChildHelper不同的方法 -> 处理与NestedScrollingParent交互的逻辑 -> 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑\n (-> 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。\n \n具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法[Behavior官网](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html)。\n\n### 方法\n\n#### 1.layoutDependsOn\n\n确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法\n如AppBarLayout\n\n```java\n\n\t@Override\n\tpublic boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n\t\treturn dependency instanceof AppBarLayout;\n\t}\n\n```\n\n#### 2.onDependentViewChanged\n\n依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。\n\n```java\n\n\t@Override\n\tpublic boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n\t\toffsetChildAsNeeded(parent， child， dependency);\n\t\treturn false;\n\t}\n```\n\n#### 3.onStartNestedScroll\n\n当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。\n\n```java\n\n\t//判断是否垂直滑动\n\t@Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n```\n\n#### 4.onNestedPreScroll\n\n此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。\n如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。\n\n```java\n\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n```\n\t\n\n#### 5.onNestedScroll\n\n此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，\n本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。\n\t\n```java\n\t\n\t/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n\t *\t\t\t\t而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n\t\tint dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n\t\t\tdxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n\n```\n\t\n## 自定义Behavior\n\n### 自定义Behavior主要有两种实现方式：\n\n第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。\n第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。\n由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。\n\n### 具体实现\n\n在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。\n\n```java\n\n\t//判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n\t\n```\n\n触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。\n\n```java\n\n\t@Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n\n```\n\n滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。\n\n```java\n\n\t@Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n\t\tif (dyConsumed < 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed > 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n\n\n```\n\n\n## 仿知乎效果的动画实现及个性化\n\n大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款[干货集中营客户端](https://github.com/Lauzy/GankPro)，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。\n开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。\n\n首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。\n\n```java\n\n\tpublic LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n\t@Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n```\n\n整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。\n\n先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。\n\n```java\n\n\tif(Math.abs(dyConsumed) > minScrollY){\n\t\t...//onNestedScroll里边的逻辑代码\n\t}\n\n```\n\n对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。\n\n```java\n\n\tmTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) > minScrollY || Math.abs(mTotalScrollY) > scrollYDistance) {\n\t\t...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n\n```\n\n接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。\n\n```java\n\n\tpublic static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(\"The view is not a child of CoordinatorLayout\");\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\");\n        }\n        return (CommonBehavior) behavior;\n    }\n\n```\n\n然后可以设置对象的属性：\n\n```java\n\n\tpublic CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n\t\n```\n\n\n至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考[我的Github](https://github.com/Lauzy/LBehavior)\n\n动画已经实现，但是写代码的时候坑貌似永远是填不完的。\n\n当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，\n我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。\n不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。\n\n还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。\n\n此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。\n\n我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。\n\n\n整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。\n\n```java\n\n\tallprojects {\n\t    repositories {\n\t\t    ...\n\t\t    maven { url 'https://jitpack.io' }\n\t    }\n\t}\n\n    dependencies {\n\t    compile 'com.github.Lauzy:LBehavior:1.0.1'\n\t}\n\n```\n\n具体使用也很简单\n\n参数     \t\t\t\t\t\t\t|\t说明\n-----------------------------------|-----------------------\n@string/title_view_behavior   \t\t|   顶部标题栏\n@string/bottom_view_behavior   \t|   底部导航栏\n@string/fab_scale_behavior   \t\t|   浮动按钮（缩放）\n@string/fab_vertical_behavior   \t|    浮动按钮（上下滑动）\n\n\n\n自定义(均设有默认值，可不使用)：\n\n\n| 方法           \t \t\t|    参数           \t| 说明  \t\t\t\t\t|\n| ------------------------- |------------------ | --------------------- |\n| setMinScrollY\t\t\t\t| int y \t\t\t| 设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.|\n| setScrollYDistance\t\t| int y      \t    | 设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.|\n| setDuration\t\t\t\t| int duration     \t| 设置动画持续时间.默认为400ms.|\n| setInterpolator\t\t\t| Interpolator interpolator | 设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. [Interpolator官方文档](https://developer.android.google.cn/reference/android/view/animation/Interpolator.html)|\n\n```java\n\n\tCommonBehavior.from(mFloatingActionButton)\n\t\t.setMinScrollY(20)\n\t\t.setScrollYDistance(100)\n\t\t.setDuration(1000)\n\t\t.setInterpolator(new LinearOutSlowInInterpolator());\n\t\t\n```\n\n最后附上项目的地址，戳  [我的Github](https://github.com/Lauzy/LBehavior) ，顺便可以看看撸的[干货集中营客户端](https://github.com/Lauzy/GankPro)。","slug":"201705Behavior","published":1,"updated":"2017-06-26T02:34:42.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ds1cbr00002kr6cfdco90b","content":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width=\"270\" height=\"450\" alt=\"效果图1\"><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width=\"270\" height=\"450\" alt=\"效果图2\"></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\" target=\"_blank\" rel=\"external\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\" target=\"_blank\" rel=\"external\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">layoutDependsOn</span><span class=\"token punctuation\">(</span>CoordinatorLayout parent， View child， View dependency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> dependency <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AppBarLayout</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onDependentViewChanged</span><span class=\"token punctuation\">(</span>CoordinatorLayout parent， View child， View dependency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">offsetChildAsNeeded</span><span class=\"token punctuation\">(</span>parent， child， dependency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token comment\" spellcheck=\"true\">//判断是否垂直滑动</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onStartNestedScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class=\"token keyword\">int</span> nestedScrollAxes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>nestedScrollAxes <span class=\"token operator\">&amp;</span> ViewCompat<span class=\"token punctuation\">.</span>SCROLL_AXIS_VERTICAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNestedPreScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout， View child， View target， \n        <span class=\"token keyword\">int</span> dx， <span class=\"token keyword\">int</span> dy， <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> consumed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNestedPreScroll</span><span class=\"token punctuation\">(</span>coordinatorLayout， child， target， dx， dy， consumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n     *                而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNestedScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout， View child， View target， \n        <span class=\"token keyword\">int</span> dxConsumed， <span class=\"token keyword\">int</span> dyConsumed， <span class=\"token keyword\">int</span> dxUnconsumed， <span class=\"token keyword\">int</span> dyUnconsumed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNestedScroll</span><span class=\"token punctuation\">(</span>coordinatorLayout， child， target， \n            dxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token comment\" spellcheck=\"true\">//判断垂直滑动</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onStartNestedScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout<span class=\"token punctuation\">,</span> View child<span class=\"token punctuation\">,</span> View directTargetChild<span class=\"token punctuation\">,</span> View target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nestedScrollAxes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">// 设置标记，防止new Anim导致的parent和child坐标变化</span>\n            mCommonAnim <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LTitleBehaviorAnim</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            isInit <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>nestedScrollAxes <span class=\"token operator\">&amp;</span> ViewCompat<span class=\"token punctuation\">.</span>SCROLL_AXIS_VERTICAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNestedPreScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout<span class=\"token punctuation\">,</span> View child<span class=\"token punctuation\">,</span> View target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> consumed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mCommonAnim <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mCommonAnim<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span>mDuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mCommonAnim<span class=\"token punctuation\">.</span><span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span>mInterpolator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNestedPreScroll</span><span class=\"token punctuation\">(</span>coordinatorLayout<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">,</span> consumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNestedScroll</span><span class=\"token punctuation\">(</span>CoordinatorLayout coordinatorLayout<span class=\"token punctuation\">,</span> View child<span class=\"token punctuation\">,</span> View target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dxConsumed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dyConsumed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dxUnconsumed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dyUnconsumed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNestedScroll</span><span class=\"token punctuation\">(</span>coordinatorLayout<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> dxConsumed<span class=\"token punctuation\">,</span> dyConsumed<span class=\"token punctuation\">,</span> dxUnconsumed<span class=\"token punctuation\">,</span> dyUnconsumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dyConsumed <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHide<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mCommonAnim<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                isHide <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dyConsumed <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isHide<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mCommonAnim<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                isHide <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">public</span> <span class=\"token function\">LBottomBehaviorAnim</span><span class=\"token punctuation\">(</span>View bottomView<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mBottomView <span class=\"token operator\">=</span> bottomView<span class=\"token punctuation\">;</span>\n        mOriginalY <span class=\"token operator\">=</span> mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//显示</span>\n        ValueAnimator animator <span class=\"token operator\">=</span> ValueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">ofFloat</span><span class=\"token punctuation\">(</span>mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mOriginalY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">addUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValueAnimator<span class=\"token punctuation\">.</span>AnimatorUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationUpdate</span><span class=\"token punctuation\">(</span>ValueAnimator valueAnimator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Float<span class=\"token punctuation\">)</span> valueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">getAnimatedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//隐藏</span>\n        ValueAnimator animator <span class=\"token operator\">=</span> ValueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">ofFloat</span><span class=\"token punctuation\">(</span>mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mOriginalY <span class=\"token operator\">+</span> mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">addUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValueAnimator<span class=\"token punctuation\">.</span>AnimatorUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationUpdate</span><span class=\"token punctuation\">(</span>ValueAnimator valueAnimator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mBottomView<span class=\"token punctuation\">.</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Float<span class=\"token punctuation\">)</span> valueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">getAnimatedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        animator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>dyConsumed<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> minScrollY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\" spellcheck=\"true\">//onNestedScroll里边的逻辑代码</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    mTotalScrollY <span class=\"token operator\">+=</span> dyConsumed<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//累加消费的距离</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>dyConsumed<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> minScrollY <span class=\"token operator\">||</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mTotalScrollY<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> scrollYDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\" spellcheck=\"true\">//onNestedScroll里边的逻辑代码</span>\n        mTotalScrollY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//动画执行完毕后重置</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> CommonBehavior <span class=\"token function\">from</span><span class=\"token punctuation\">(</span>View view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ViewGroup<span class=\"token punctuation\">.</span>LayoutParams params <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>params <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CoordinatorLayout<span class=\"token punctuation\">.</span>LayoutParams</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The view is not a child of CoordinatorLayout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        CoordinatorLayout<span class=\"token punctuation\">.</span>Behavior behavior <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CoordinatorLayout<span class=\"token punctuation\">.</span>LayoutParams<span class=\"token punctuation\">)</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>behavior <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CommonBehavior</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>CommonBehavior<span class=\"token punctuation\">)</span> behavior<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后可以设置对象的属性：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">public</span> CommonBehavior <span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mDuration <span class=\"token operator\">=</span> duration<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> CommonBehavior <span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span>Interpolator interpolator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mInterpolator <span class=\"token operator\">=</span> interpolator<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> CommonBehavior <span class=\"token function\">setMinScrollY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minScrollY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minScrollY <span class=\"token operator\">=</span> minScrollY<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> CommonBehavior <span class=\"token function\">setScrollYDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> scrollYDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scrollYDistance <span class=\"token operator\">=</span> scrollYDistance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    allprojects <span class=\"token punctuation\">{</span>\n        repositories <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://jitpack.io'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    dependencies <span class=\"token punctuation\">{</span>\n        compile <span class=\"token string\">'com.github.Lauzy:LBehavior:1.0.1'</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\" target=\"_blank\" rel=\"external\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    CommonBehavior<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>mFloatingActionButton<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setMinScrollY</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setScrollYDistance</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinearOutSlowInInterpolator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\" target=\"_blank\" rel=\"external\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营客户端</a>。</p>\n","excerpt":"<blockquote>\n<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>\n</blockquote>","more":"<h2 id=\"先来一波效果图：\"><a href=\"#先来一波效果图：\" class=\"headerlink\" title=\"先来一波效果图：\"></a>先来一波效果图：</h2><p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B01.gif\" width = \"270\" height = \"450\" alt=\"效果图1\"/><img src=\"http://oop6dcmck.bkt.clouddn.com/20170420B02.gif\" width = \"270\" height = \"450\" alt=\"效果图2\"/></p>\n<h2 id=\"效果实现思路：\"><a href=\"#效果实现思路：\" class=\"headerlink\" title=\"效果实现思路：\"></a>效果实现思路：</h2><ol>\n<li><p>判断手势</p>\n</li>\n<li><p>计算距离</p>\n</li>\n<li><p>触发动画</p>\n</li>\n</ol>\n<h2 id=\"文章目录：\"><a href=\"#文章目录：\" class=\"headerlink\" title=\"文章目录：\"></a>文章目录：</h2><ol>\n<li>CoordinatorLayout及Behavior简介</li>\n<li>自定义Behavior</li>\n<li>仿知乎效果的动画实现及个性化</li>\n</ol>\n<h2 id=\"CoordinatorLayout和Behavior简介\"><a href=\"#CoordinatorLayout和Behavior简介\" class=\"headerlink\" title=\"CoordinatorLayout和Behavior简介\"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href=\"http://blog.csdn.net/qibin0506/article/details/50377592\">源码看CoordinatorLayout.Behavior原理</a>。</p>\n<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>\n<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>\n<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href=\"https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html\">Behavior官网</a>。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-layoutDependsOn\"><a href=\"#1-layoutDependsOn\" class=\"headerlink\" title=\"1.layoutDependsOn\"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>\n<pre><code class=\"java\">\n    @Override\n    public boolean layoutDependsOn(CoordinatorLayout parent， View child， View dependency) {\n        return dependency instanceof AppBarLayout;\n    }\n</code></pre>\n<h4 id=\"2-onDependentViewChanged\"><a href=\"#2-onDependentViewChanged\" class=\"headerlink\" title=\"2.onDependentViewChanged\"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>\n<pre><code class=\"java\">\n    @Override\n    public boolean onDependentViewChanged(CoordinatorLayout parent， View child， View dependency) {\n        offsetChildAsNeeded(parent， child， dependency);\n        return false;\n    }\n</code></pre>\n<h4 id=\"3-onStartNestedScroll\"><a href=\"#3-onStartNestedScroll\" class=\"headerlink\" title=\"3.onStartNestedScroll\"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>\n<pre><code class=\"java\">\n    //判断是否垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， int nestedScrollAxes) {\n        return (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n</code></pre>\n<h4 id=\"4-onNestedPreScroll\"><a href=\"#4-onNestedPreScroll\" class=\"headerlink\" title=\"4.onNestedPreScroll\"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>\n<pre><code class=\"java\">\n    /**\n     * 触发滑动嵌套滚动之前调用的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)\n     * @param dx                滑动的X轴距离\n     * @param dy                滑动的Y轴距离\n     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0\n     */\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n        int dx， int dy， int[] consumed) {\n        super.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);\n    }\n</code></pre>\n<h4 id=\"5-onNestedScroll\"><a href=\"#5-onNestedScroll\" class=\"headerlink\" title=\"5.onNestedScroll\"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>\n<pre><code class=\"java\">\n    /**\n     * 滑动嵌套滚动时触发的方法\n     *\n     * @param coordinatorLayout coordinatorLayout父布局\n     * @param child             使用Behavior的子View\n     * @param target            触发滑动嵌套的View\n     * @param dxConsumed        TargetView消费的X轴距离\n     * @param dyConsumed        TargetView消费的Y轴距离\n     * @param dxUnconsumed      未被TargetView消费的X轴距离\n     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，\n     *                而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)\n     */\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout， View child， View target， \n        int dxConsumed， int dyConsumed， int dxUnconsumed， int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout， child， target， \n            dxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);\n    }\n</code></pre>\n<h2 id=\"自定义Behavior\"><a href=\"#自定义Behavior\" class=\"headerlink\" title=\"自定义Behavior\"></a>自定义Behavior</h2><h3 id=\"自定义Behavior主要有两种实现方式：\"><a href=\"#自定义Behavior主要有两种实现方式：\" class=\"headerlink\" title=\"自定义Behavior主要有两种实现方式：\"></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>\n<pre><code class=\"java\">\n    //判断垂直滑动\n    @Override\n    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {\n        if (isInit) {// 设置标记，防止new Anim导致的parent和child坐标变化\n            mCommonAnim = new LTitleBehaviorAnim(child);\n            isInit = false;\n        }\n        return (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != 0;\n    }\n</code></pre>\n<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>\n<pre><code class=\"java\">\n    @Override\n    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {\n        if (mCommonAnim != null) {\n            mCommonAnim.setDuration(mDuration);\n            mCommonAnim.setInterpolator(mInterpolator);\n        }\n        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);\n    }\n</code></pre>\n<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>\n<pre><code class=\"java\">\n    @Override\n    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {\n        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);\n        if (dyConsumed &lt; 0) {\n            if (isHide) {\n                mCommonAnim.show();\n                isHide = false;\n            }\n        } else if (dyConsumed &gt; 0) {\n            if (!isHide) {\n                mCommonAnim.hide();\n                isHide = true;\n            }\n        }\n    }\n</code></pre>\n<h2 id=\"仿知乎效果的动画实现及个性化\"><a href=\"#仿知乎效果的动画实现及个性化\" class=\"headerlink\" title=\"仿知乎效果的动画实现及个性化\"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>\n<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>\n<pre><code class=\"java\">\n    public LBottomBehaviorAnim(View bottomView) {\n        mBottomView = bottomView;\n        mOriginalY = mBottomView.getY();//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。\n    }\n\n    @Override\n    public void show() {//显示\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n\n    @Override\n    public void hide() {//隐藏\n        ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());\n        animator.setDuration(getDuration());\n        animator.setInterpolator(getInterpolator());\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                mBottomView.setY((Float) valueAnimator.getAnimatedValue());\n            }\n        });\n        animator.start();\n    }\n</code></pre>\n<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>\n<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>\n<pre><code class=\"java\">\n    if(Math.abs(dyConsumed) &gt; minScrollY){\n        ...//onNestedScroll里边的逻辑代码\n    }\n</code></pre>\n<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>\n<pre><code class=\"java\">\n    mTotalScrollY += dyConsumed;//累加消费的距离\n    if (Math.abs(dyConsumed) &gt; minScrollY || Math.abs(mTotalScrollY) &gt; scrollYDistance) {\n        ...//onNestedScroll里边的逻辑代码\n        mTotalScrollY = 0;//动画执行完毕后重置\n    }\n</code></pre>\n<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>\n<pre><code class=\"java\">\n    public static CommonBehavior from(View view) {\n        ViewGroup.LayoutParams params = view.getLayoutParams();\n        if (!(params instanceof CoordinatorLayout.LayoutParams)) {\n            throw new IllegalArgumentException(&quot;The view is not a child of CoordinatorLayout&quot;);\n        }\n        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();\n        if (!(behavior instanceof CommonBehavior)) {\n            throw new IllegalArgumentException(&quot;The view&#39;s behavior isn&#39;t an instance of CommonBehavior. Try to check the [app:layout_behavior]&quot;);\n        }\n        return (CommonBehavior) behavior;\n    }\n</code></pre>\n<p>然后可以设置对象的属性：</p>\n<pre><code class=\"java\">\n    public CommonBehavior setDuration(int duration) {\n        mDuration = duration;\n        return this;\n    }\n\n    public CommonBehavior setInterpolator(Interpolator interpolator) {\n        mInterpolator = interpolator;\n        return this;\n    }\n\n    public CommonBehavior setMinScrollY(int minScrollY) {\n        this.minScrollY = minScrollY;\n        return this;\n    }\n\n    public CommonBehavior setScrollYDistance(int scrollYDistance) {\n        this.scrollYDistance = scrollYDistance;\n        return this;\n    }\n</code></pre>\n<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a></p>\n<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>\n<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>\n<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>\n<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>\n<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>\n<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>\n<pre><code class=\"java\">\n    allprojects {\n        repositories {\n            ...\n            maven { url &#39;https://jitpack.io&#39; }\n        }\n    }\n\n    dependencies {\n        compile &#39;com.github.Lauzy:LBehavior:1.0.1&#39;\n    }\n</code></pre>\n<p>具体使用也很简单</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@string/title_view_behavior</td>\n<td>顶部标题栏</td>\n</tr>\n<tr>\n<td>@string/bottom_view_behavior</td>\n<td>底部导航栏</td>\n</tr>\n<tr>\n<td>@string/fab_scale_behavior</td>\n<td>浮动按钮（缩放）</td>\n</tr>\n<tr>\n<td>@string/fab_vertical_behavior</td>\n<td>浮动按钮（上下滑动）</td>\n</tr>\n</tbody>\n</table>\n<p>自定义(均设有默认值，可不使用)：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setMinScrollY</td>\n<td>int y</td>\n<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>\n</tr>\n<tr>\n<td>setScrollYDistance</td>\n<td>int y</td>\n<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>\n</tr>\n<tr>\n<td>setDuration</td>\n<td>int duration</td>\n<td>设置动画持续时间.默认为400ms.</td>\n</tr>\n<tr>\n<td>setInterpolator</td>\n<td>Interpolator interpolator</td>\n<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href=\"https://developer.android.google.cn/reference/android/view/animation/Interpolator.html\">Interpolator官方文档</a></td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"java\">\n    CommonBehavior.from(mFloatingActionButton)\n        .setMinScrollY(20)\n        .setScrollYDistance(100)\n        .setDuration(1000)\n        .setInterpolator(new LinearOutSlowInInterpolator());\n</code></pre>\n<p>最后附上项目的地址，戳  <a href=\"https://github.com/Lauzy/LBehavior\">我的Github</a> ，顺便可以看看撸的<a href=\"https://github.com/Lauzy/GankPro\">干货集中营客户端</a>。</p>"},{"title":"沉浸、透明及白底黑字状态栏技巧","date":"2017-03-30T01:25:46.000Z","_content":"\n\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","source":"_posts/201705StatusBar.md","raw":"---\ntitle: 沉浸、透明及白底黑字状态栏技巧\ndate: 2017-03-30 09:25:46\ncategory: Android\ntags: \n\t- Android Tips\n---\n\n\n我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:\n\n![透明](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png)\n\n![半透明](http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png)\n\n<!--more-->\n\n读这篇文章之前建议研读郭神的[Android状态栏微技巧，带你真正理解沉浸式模式](http://blog.csdn.net/guolin_blog/article/details/51763825)。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。\n\n本篇文章目录：\n1.透明与半透明状态栏\n2.结合Toolbar使用技巧\n3.白底黑字状态栏\n4.其他注意事项\n\n## 透明与半透明状态栏\n\n首先我们实现上边两图的效果，注意下版本的判断，直接上代码：\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tView decorView = getWindow().getDecorView();\n\tint option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\tdecorView.setSystemUiVisibility(option);\n\tgetWindow().setStatusBarColor(Color.TRANSPARENT);\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n\n```\n\n版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：\n\n![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png)\n\n\n## 结合标题栏使用的技巧\n\n上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：\n\n![上移效果](http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png)\n\n部分开发者用android:fitsSystemWindows = \"true\"，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。\n这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：\n\n```java \nmToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n\tmToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n\tmToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n\tsetSupportActionBar(mToolbar);\n\tActionBar supportActionBar = getSupportActionBar();\n\tif (supportActionBar != null) {\n\t\tsupportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n\t}\n}\n\n```\n\n设置之后，就达到我们想要的效果了。\n\n## 白底黑字状态栏\n\n有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:\n\n```java\n//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\tgetWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n\t//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));\n} else  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n\n```\n\n效果图如下：\n6.0效果：![6.0白色](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png)\n5.0以上6.0以下： ![5.0以上6.0以下](http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png)\n4.4效果： ![4.4效果](http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png)\n\n## 注意事项\n\n上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：\n\n![沉浸](http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png)\n\n代码如下：\n\n```java \n\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n\tsuper.onWindowFocusChanged(hasFocus);\n\tif (hasFocus && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n\t\tView decorView = getWindow().getDecorView();\n\t\tdecorView.setSystemUiVisibility(\n\t\tView.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n\t\t| View.SYSTEM_UI_FLAG_FULLSCREEN\n\t\t| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n\t}\n}\n\n```\n\n实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。\nDemo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。\n\n本文所有代码的地址,戳 [我的Github](https://github.com/Lauzy/LauzyCode) ，在StatusBar包中。\n","slug":"201705StatusBar","published":1,"updated":"2017-06-26T02:34:42.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ds1cbr00012kr6d9sds8n1","content":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>\n<a id=\"more\"></a>\n<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\" target=\"_blank\" rel=\"external\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>LOLLIPOP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    View decorView <span class=\"token operator\">=</span> <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecorView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> option <span class=\"token operator\">=</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_STABLE<span class=\"token punctuation\">;</span>\n    decorView<span class=\"token punctuation\">.</span><span class=\"token function\">setSystemUiVisibility</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatusBarColor</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>TRANSPARENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));  //此种效果为类似QQ的半透明状态栏</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>KITKAT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFlags</span><span class=\"token punctuation\">(</span>WindowManager<span class=\"token punctuation\">.</span>LayoutParams<span class=\"token punctuation\">.</span>FLAG_TRANSLUCENT_STATUS<span class=\"token punctuation\">,</span> WindowManager<span class=\"token punctuation\">.</span>LayoutParams<span class=\"token punctuation\">.</span>FLAG_TRANSLUCENT_STATUS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">mToolbar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Toolbar<span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>toolbar_common<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mToolbar <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mToolbar<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">+=</span> ScreenUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusHeight</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mToolbar<span class=\"token punctuation\">.</span><span class=\"token function\">setPadding</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ScreenUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusHeight</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setSupportActionBar</span><span class=\"token punctuation\">(</span>mToolbar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ActionBar supportActionBar <span class=\"token operator\">=</span> <span class=\"token function\">getSupportActionBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>supportActionBar <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        supportActionBar<span class=\"token punctuation\">.</span><span class=\"token function\">setDisplayShowTitleEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//此处是为了不显示默认的标题</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//设置状态栏文字为暗色</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecorView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSystemUiVisibility</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LIGHT_STATUS_BAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>LOLLIPOP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatusBarColor</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置</span>\n    <span class=\"token comment\" spellcheck=\"true\">//getWindow().setStatusBarColor(Color.parseColor(\"#40000000\"));</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>JELLY_BEAN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecorView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSystemUiVisibility</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//4.4版本本身就含有暗色阴影，不作其他处理即可</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onWindowFocusChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> hasFocus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onWindowFocusChanged</span><span class=\"token punctuation\">(</span>hasFocus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasFocus <span class=\"token operator\">&amp;&amp;</span> Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>KITKAT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        View decorView <span class=\"token operator\">=</span> <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecorView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        decorView<span class=\"token punctuation\">.</span><span class=\"token function\">setSystemUiVisibility</span><span class=\"token punctuation\">(</span>\n        View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_STABLE\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_HIDE_NAVIGATION\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_FULLSCREEN\n        <span class=\"token operator\">|</span> View<span class=\"token punctuation\">.</span>SYSTEM_UI_FLAG_IMMERSIVE_STICKY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</include></p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\" target=\"_blank\" rel=\"external\">我的Github</a> ，在StatusBar包中。</p>\n","excerpt":"<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png\" alt=\"透明\"></p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png\" alt=\"半透明\"></p>","more":"<p>读这篇文章之前建议研读郭神的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>\n<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>\n<h2 id=\"透明与半透明状态栏\"><a href=\"#透明与半透明状态栏\" class=\"headerlink\" title=\"透明与半透明状态栏\"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>\n<pre><code class=\"java\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {\n    View decorView = getWindow().getDecorView();\n    int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n    decorView.setSystemUiVisibility(option);\n    getWindow().setStatusBarColor(Color.TRANSPARENT);\n    //getWindow().setStatusBarColor(Color.parseColor(&quot;#40000000&quot;));  //此种效果为类似QQ的半透明状态栏\n} else if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {\n    getWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n}\n</code></pre>\n<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"结合标题栏使用的技巧\"><a href=\"#结合标题栏使用的技巧\" class=\"headerlink\" title=\"结合标题栏使用的技巧\"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png\" alt=\"上移效果\"></p>\n<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>\n<pre><code class=\"java\">mToolbar = (Toolbar) findViewById(R.id.toolbar_common);\nif (mToolbar != null) {\n    mToolbar.getLayoutParams().height += ScreenUtils.getStatusHeight(getApplicationContext());\n    mToolbar.setPadding(0, ScreenUtils.getStatusHeight(getApplicationContext()), 0, 0);\n    setSupportActionBar(mToolbar);\n    ActionBar supportActionBar = getSupportActionBar();\n    if (supportActionBar != null) {\n        supportActionBar.setDisplayShowTitleEnabled(false);  //此处是为了不显示默认的标题\n    }\n}\n</code></pre>\n<p>设置之后，就达到我们想要的效果了。</p>\n<h2 id=\"白底黑字状态栏\"><a href=\"#白底黑字状态栏\" class=\"headerlink\" title=\"白底黑字状态栏\"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>\n<pre><code class=\"java\">//设置状态栏文字为暗色\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n    //6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。\n    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n} else if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {\n    getWindow().setStatusBarColor(Color.GRAY);  //21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置\n    //getWindow().setStatusBarColor(Color.parseColor(&quot;#40000000&quot;));\n} else  if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN){\n    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//4.4版本本身就含有暗色阴影，不作其他处理即可\n}\n</code></pre>\n<p>效果图如下：<br>6.0效果：<img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png\" alt=\"6.0白色\"><br>5.0以上6.0以下： <img src=\"http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png\" alt=\"5.0以上6.0以下\"><br>4.4效果： <img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png\" alt=\"4.4效果\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png\" alt=\"沉浸\"></p>\n<p>代码如下：</p>\n<pre><code class=\"java\">\n@Override\npublic void onWindowFocusChanged(boolean hasFocus) {\n    super.onWindowFocusChanged(hasFocus);\n    if (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {\n        View decorView = getWindow().getDecorView();\n        decorView.setSystemUiVisibility(\n        View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n        | View.SYSTEM_UI_FLAG_FULLSCREEN\n        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n    }\n}\n</code></pre>\n<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</p>\n<p>本文所有代码的地址,戳 <a href=\"https://github.com/Lauzy/LauzyCode\">我的Github</a> ，在StatusBar包中。</p>"},{"title":"拖拽图片","date":"2017-05-05T07:34:59.000Z","toc":false,"_content":"\n闲来无事，在[干货集中营](https://github.com/Lauzy/GankPro)里又撸了个效果。\n\n先来一波效果图：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width = \"270\" height = \"450\" alt=\"效果图\"/>\n\n<!--more-->\n\n实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：\n\n```java\n\n\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\n\t\t//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();\n        switch (event.getActionMasked()) {\n            case MotionEvent.ACTION_DOWN:\n\t\t\t//获取手指按下时X和Y轴的坐标\n                mOriginalY = (int) event.getRawY();\n                mOriginalX = (int) event.getRawX();\n                break;\n            case MotionEvent.ACTION_MOVE:\n\t\t\t//获取移动的距离\n                mMotionY = (int) (event.getRawY() - mOriginalY);\n                mMotionX = (int) (event.getRawX() - mOriginalX);\n\t\t\t//计算缩放比例\n                float ratio = Math.abs(mMotionY) * 1.0f / v.getHeight();\n                float ratioY = Math.abs(mMotionY) <= v.getHeight() ? (ratio <= 0.5f ? ratio : 0.5f) : 0.5f;\n            //根据Y轴变化缩放比例\n                v.setScaleX(1 - ratioY);\n                v.setScaleY(1 - ratioY);\n\t\t\t//设置layoutParams变化\n                layoutParams.topMargin = mMotionY / 2;\n                layoutParams.leftMargin = mMotionX / 2;\n                layoutParams.bottomMargin = -mMotionY / 2;\n                layoutParams.rightMargin = -mMotionX / 2;\n                v.setLayoutParams(layoutParams);\n\t\t\t//调用requestLayout 重置布局\n                v.requestLayout();\n\t\t\t//设置透明度最低值\n                if (Math.abs(mMotionY) > 500) {\n                    mContentLayout.getBackground().setAlpha(100);\n                    mCurAlpha = 100;\n                } else {\n\t\t\t\t//根据移动距离计算透明度\n                    float ratioAlpha = (Math.abs(mMotionY) / 500.0f) * (255 - 100);\n                    mContentLayout.getBackground().setAlpha(255 - (int) ratioAlpha);\n                    mCurAlpha = 255 - (int) ratioAlpha;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n\t\t\t//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法\n                if (Math.abs(mMotionY) > 400) {\n                    mImageEventListener.onActionBack();\n                } else {\n                //无动画返回原状\n                    /*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/\n\t\t\t\t//通过一系列动画将View复原\n                    setScaleAnim(v);\n                    setMarginAnim(v, layoutParams, Direction.LEFT);\n                    setMarginAnim(v, layoutParams, Direction.RIGHT);\n                    setMarginAnim(v, layoutParams, Direction.TOP);\n                    setMarginAnim(v, layoutParams, Direction.BOTTOM);\n                    v.requestLayout();\n                }\n                ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, 255);\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator animation) {\n                        mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());\n                    }\n                });\n                animator.setDuration(300).start();\n                break;\n        }\n\t//消费事件\n        return true;\n    }\n\n```\n\n\n然后在使用的地方直接调用即可：\n\n```java\n\t\timageView.setOnTouchListener(new DragImageOnTouchListener(frameLayout, new DragImageOnTouchListener.ImageEventListener() {\n            @Override\n            public void onActionBack() {\n                onBackPressed();\n\t\t\t\t//可处理具体的逻辑\n            }\n        }));\n```\n\n注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。\n具体代码可参考  [我的Github](https://github.com/Lauzy/LauzyCode) 的[DragImage包下](https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage),\n在我的[干货集中营](https://github.com/Lauzy/GankPro) 中也有具体的使用。","source":"_posts/201706DragImage.md","raw":"---\ntitle: 拖拽图片\ndate: 2017-05-05 15:34:59\ncategory: Android\ntoc: false\ntags: Android 交互\n---\n\n闲来无事，在[干货集中营](https://github.com/Lauzy/GankPro)里又撸了个效果。\n\n先来一波效果图：\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width = \"270\" height = \"450\" alt=\"效果图\"/>\n\n<!--more-->\n\n实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：\n\n```java\n\n\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\n\t\t//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();\n        switch (event.getActionMasked()) {\n            case MotionEvent.ACTION_DOWN:\n\t\t\t//获取手指按下时X和Y轴的坐标\n                mOriginalY = (int) event.getRawY();\n                mOriginalX = (int) event.getRawX();\n                break;\n            case MotionEvent.ACTION_MOVE:\n\t\t\t//获取移动的距离\n                mMotionY = (int) (event.getRawY() - mOriginalY);\n                mMotionX = (int) (event.getRawX() - mOriginalX);\n\t\t\t//计算缩放比例\n                float ratio = Math.abs(mMotionY) * 1.0f / v.getHeight();\n                float ratioY = Math.abs(mMotionY) <= v.getHeight() ? (ratio <= 0.5f ? ratio : 0.5f) : 0.5f;\n            //根据Y轴变化缩放比例\n                v.setScaleX(1 - ratioY);\n                v.setScaleY(1 - ratioY);\n\t\t\t//设置layoutParams变化\n                layoutParams.topMargin = mMotionY / 2;\n                layoutParams.leftMargin = mMotionX / 2;\n                layoutParams.bottomMargin = -mMotionY / 2;\n                layoutParams.rightMargin = -mMotionX / 2;\n                v.setLayoutParams(layoutParams);\n\t\t\t//调用requestLayout 重置布局\n                v.requestLayout();\n\t\t\t//设置透明度最低值\n                if (Math.abs(mMotionY) > 500) {\n                    mContentLayout.getBackground().setAlpha(100);\n                    mCurAlpha = 100;\n                } else {\n\t\t\t\t//根据移动距离计算透明度\n                    float ratioAlpha = (Math.abs(mMotionY) / 500.0f) * (255 - 100);\n                    mContentLayout.getBackground().setAlpha(255 - (int) ratioAlpha);\n                    mCurAlpha = 255 - (int) ratioAlpha;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n\t\t\t//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法\n                if (Math.abs(mMotionY) > 400) {\n                    mImageEventListener.onActionBack();\n                } else {\n                //无动画返回原状\n                    /*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/\n\t\t\t\t//通过一系列动画将View复原\n                    setScaleAnim(v);\n                    setMarginAnim(v, layoutParams, Direction.LEFT);\n                    setMarginAnim(v, layoutParams, Direction.RIGHT);\n                    setMarginAnim(v, layoutParams, Direction.TOP);\n                    setMarginAnim(v, layoutParams, Direction.BOTTOM);\n                    v.requestLayout();\n                }\n                ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, 255);\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator animation) {\n                        mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());\n                    }\n                });\n                animator.setDuration(300).start();\n                break;\n        }\n\t//消费事件\n        return true;\n    }\n\n```\n\n\n然后在使用的地方直接调用即可：\n\n```java\n\t\timageView.setOnTouchListener(new DragImageOnTouchListener(frameLayout, new DragImageOnTouchListener.ImageEventListener() {\n            @Override\n            public void onActionBack() {\n                onBackPressed();\n\t\t\t\t//可处理具体的逻辑\n            }\n        }));\n```\n\n注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。\n具体代码可参考  [我的Github](https://github.com/Lauzy/LauzyCode) 的[DragImage包下](https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage),\n在我的[干货集中营](https://github.com/Lauzy/GankPro) 中也有具体的使用。","slug":"201706DragImage","published":1,"updated":"2017-06-26T02:34:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ds1cbr00032kr6u6hsldvv","content":"<p>闲来无事，在<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营</a>里又撸了个效果。</p>\n<p>先来一波效果图：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width=\"270\" height=\"450\" alt=\"效果图\"></p>\n<a id=\"more\"></a>\n<p>实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onTouch</span><span class=\"token punctuation\">(</span>View v<span class=\"token punctuation\">,</span> MotionEvent event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。</span>\n        FrameLayout<span class=\"token punctuation\">.</span>LayoutParams layoutParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FrameLayout<span class=\"token punctuation\">.</span>LayoutParams<span class=\"token punctuation\">)</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getActionMasked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> MotionEvent<span class=\"token punctuation\">.</span>ACTION_DOWN<span class=\"token operator\">:</span>\n            <span class=\"token comment\" spellcheck=\"true\">//获取手指按下时X和Y轴的坐标</span>\n                mOriginalY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getRawY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mOriginalX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getRawX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> MotionEvent<span class=\"token punctuation\">.</span>ACTION_MOVE<span class=\"token operator\">:</span>\n            <span class=\"token comment\" spellcheck=\"true\">//获取移动的距离</span>\n                mMotionY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getRawY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mOriginalY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mMotionX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getRawX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mOriginalX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//计算缩放比例</span>\n                <span class=\"token keyword\">float</span> ratio <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">/</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> ratioY <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>ratio <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">?</span> ratio <span class=\"token operator\">:</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//根据Y轴变化缩放比例</span>\n                v<span class=\"token punctuation\">.</span><span class=\"token function\">setScaleX</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> ratioY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                v<span class=\"token punctuation\">.</span><span class=\"token function\">setScaleY</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> ratioY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//设置layoutParams变化</span>\n                layoutParams<span class=\"token punctuation\">.</span>topMargin <span class=\"token operator\">=</span> mMotionY <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                layoutParams<span class=\"token punctuation\">.</span>leftMargin <span class=\"token operator\">=</span> mMotionX <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                layoutParams<span class=\"token punctuation\">.</span>bottomMargin <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>mMotionY <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                layoutParams<span class=\"token punctuation\">.</span>rightMargin <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>mMotionX <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                v<span class=\"token punctuation\">.</span><span class=\"token function\">setLayoutParams</span><span class=\"token punctuation\">(</span>layoutParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//调用requestLayout 重置布局</span>\n                v<span class=\"token punctuation\">.</span><span class=\"token function\">requestLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//设置透明度最低值</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    mContentLayout<span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAlpha</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    mCurAlpha <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//根据移动距离计算透明度</span>\n                    <span class=\"token keyword\">float</span> ratioAlpha <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">500.0f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    mContentLayout<span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAlpha</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> ratioAlpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    mCurAlpha <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> ratioAlpha<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> MotionEvent<span class=\"token punctuation\">.</span>ACTION_UP<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> MotionEvent<span class=\"token punctuation\">.</span>ACTION_CANCEL<span class=\"token operator\">:</span>\n            <span class=\"token comment\" spellcheck=\"true\">//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>mMotionY<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    mImageEventListener<span class=\"token punctuation\">.</span><span class=\"token function\">onActionBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//无动画返回原状</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/</span>\n                <span class=\"token comment\" spellcheck=\"true\">//通过一系列动画将View复原</span>\n                    <span class=\"token function\">setScaleAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setMarginAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> layoutParams<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>LEFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setMarginAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> layoutParams<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setMarginAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> layoutParams<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>TOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setMarginAnim</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> layoutParams<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>BOTTOM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    v<span class=\"token punctuation\">.</span><span class=\"token function\">requestLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                ValueAnimator animator <span class=\"token operator\">=</span> ValueAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">ofInt</span><span class=\"token punctuation\">(</span>mCurAlpha<span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                animator<span class=\"token punctuation\">.</span><span class=\"token function\">addUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValueAnimator<span class=\"token punctuation\">.</span>AnimatorUpdateListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationUpdate</span><span class=\"token punctuation\">(</span>ValueAnimator animation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        mContentLayout<span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAlpha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span> animation<span class=\"token punctuation\">.</span><span class=\"token function\">getAnimatedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                animator<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//消费事件</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后在使用的地方直接调用即可：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">        imageView<span class=\"token punctuation\">.</span><span class=\"token function\">setOnTouchListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DragImageOnTouchListener</span><span class=\"token punctuation\">(</span>frameLayout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DragImageOnTouchListener<span class=\"token punctuation\">.</span>ImageEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActionBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">onBackPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//可处理具体的逻辑</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。<br>具体代码可参考  <a href=\"https://github.com/Lauzy/LauzyCode\" target=\"_blank\" rel=\"external\">我的Github</a> 的<a href=\"https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage\" target=\"_blank\" rel=\"external\">DragImage包下</a>,<br>在我的<a href=\"https://github.com/Lauzy/GankPro\" target=\"_blank\" rel=\"external\">干货集中营</a> 中也有具体的使用。</p>\n","excerpt":"<p>闲来无事，在<a href=\"https://github.com/Lauzy/GankPro\">干货集中营</a>里又撸了个效果。</p>\n<p>先来一波效果图：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif\" width = \"270\" height = \"450\" alt=\"效果图\"/></p>","more":"<p>实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：</p>\n<pre><code class=\"java\">\n    public boolean onTouch(View v, MotionEvent event) {\n\n        //获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) v.getLayoutParams();\n        switch (event.getActionMasked()) {\n            case MotionEvent.ACTION_DOWN:\n            //获取手指按下时X和Y轴的坐标\n                mOriginalY = (int) event.getRawY();\n                mOriginalX = (int) event.getRawX();\n                break;\n            case MotionEvent.ACTION_MOVE:\n            //获取移动的距离\n                mMotionY = (int) (event.getRawY() - mOriginalY);\n                mMotionX = (int) (event.getRawX() - mOriginalX);\n            //计算缩放比例\n                float ratio = Math.abs(mMotionY) * 1.0f / v.getHeight();\n                float ratioY = Math.abs(mMotionY) &lt;= v.getHeight() ? (ratio &lt;= 0.5f ? ratio : 0.5f) : 0.5f;\n            //根据Y轴变化缩放比例\n                v.setScaleX(1 - ratioY);\n                v.setScaleY(1 - ratioY);\n            //设置layoutParams变化\n                layoutParams.topMargin = mMotionY / 2;\n                layoutParams.leftMargin = mMotionX / 2;\n                layoutParams.bottomMargin = -mMotionY / 2;\n                layoutParams.rightMargin = -mMotionX / 2;\n                v.setLayoutParams(layoutParams);\n            //调用requestLayout 重置布局\n                v.requestLayout();\n            //设置透明度最低值\n                if (Math.abs(mMotionY) &gt; 500) {\n                    mContentLayout.getBackground().setAlpha(100);\n                    mCurAlpha = 100;\n                } else {\n                //根据移动距离计算透明度\n                    float ratioAlpha = (Math.abs(mMotionY) / 500.0f) * (255 - 100);\n                    mContentLayout.getBackground().setAlpha(255 - (int) ratioAlpha);\n                    mCurAlpha = 255 - (int) ratioAlpha;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n            //手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法\n                if (Math.abs(mMotionY) &gt; 400) {\n                    mImageEventListener.onActionBack();\n                } else {\n                //无动画返回原状\n                    /*v.setScaleY(1);\n                    v.setScaleX(1);\n                    layoutParams.topMargin = 0;\n                    layoutParams.bottomMargin = 0;\n                    layoutParams.leftMargin = 0;\n                    layoutParams.rightMargin = 0;\n                    mContentLayout.getBackground().setAlpha(255);*/\n                //通过一系列动画将View复原\n                    setScaleAnim(v);\n                    setMarginAnim(v, layoutParams, Direction.LEFT);\n                    setMarginAnim(v, layoutParams, Direction.RIGHT);\n                    setMarginAnim(v, layoutParams, Direction.TOP);\n                    setMarginAnim(v, layoutParams, Direction.BOTTOM);\n                    v.requestLayout();\n                }\n                ValueAnimator animator = ValueAnimator.ofInt(mCurAlpha, 255);\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator animation) {\n                        mContentLayout.getBackground().setAlpha((Integer) animation.getAnimatedValue());\n                    }\n                });\n                animator.setDuration(300).start();\n                break;\n        }\n    //消费事件\n        return true;\n    }\n</code></pre>\n<p>然后在使用的地方直接调用即可：</p>\n<pre><code class=\"java\">        imageView.setOnTouchListener(new DragImageOnTouchListener(frameLayout, new DragImageOnTouchListener.ImageEventListener() {\n            @Override\n            public void onActionBack() {\n                onBackPressed();\n                //可处理具体的逻辑\n            }\n        }));\n</code></pre>\n<p>注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。<br>具体代码可参考  <a href=\"https://github.com/Lauzy/LauzyCode\">我的Github</a> 的<a href=\"https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage\">DragImage包下</a>,<br>在我的<a href=\"https://github.com/Lauzy/GankPro\">干货集中营</a> 中也有具体的使用。</p>"},{"title":"Java注解、反射，安卓IOC（一）","date":"2017-05-09T14:43:44.000Z","toc":false,"_content":"\n\n## Java注解(Annotation)\n\nJava注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation可用于修饰包、类、构造器、方法、变量等。\n\n<!--more-->\n\n### Annotation 类型\n\n此处来一张网上的图 (可在新标签页中放大查看)\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg\" width = \"710\" height = \"670\" alt=\"注解大全\"/>\n\n转自[深入理解Java：注解(Annotation)](http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html)\n\n#### 基本Annotation\n\nJava中5个基本的注解分别为：\n- @Override  ————  用来限定子类重写父类的方法。\n- @Deprecated  ————  标记已经过时的方法。\n- @SuppressWarnings  ————  抑制编译器的警告。\n- @SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。\n- @FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。\n\n#### 元Annotation\n\n元Annotation是用来修饰其他注解定义，即注解其他注解。\nJava中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。\n\n1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。\n\n```java \n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Retention {\n    RetentionPolicy value();\n}\n```\n- RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。\n- RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。\n- RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。\n\n2、@Target：指定被修饰的注解能用于哪些程序元素。\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Target {\n    ElementType[] value();\n}\n```\n\n- ElementType.ANNOTATION_TYPE: 修饰Annotation。\n- ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。\n- ElementType.FIELD: 修饰成员变量。\n- ElementType.METHOD: 修饰方法定义。\n- ElementType.PARAMETER: 修饰参数定义。\n- ElementType.CONSTRUCTOR: 修饰构造方法。\n- ElementType.LOCAL_VARIABLE: 修饰局部变量。\n- ElementType.PACKAGE: 修饰包定义。\n\n在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注\n- ElementType.TYPE_PARAMETER:  类型变量\n- ElementType.TYPE_USE:  使用类型的任何语句\n\nTYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：\n\n```java\n@Target(ElementType.TYPE_PARAMETER)\npublic @interface Animal{}\n\npublic class Zoo<@Animal T>{\n\t...\n}\n```\n\nTYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：\n\n```java\n\n定义：\n@Target(ElementType.TYPE_USE)\npublic interface UseTest{}\n\n使用：\n@UseTest String content; 修饰类型，\n此种写法相当于java.lang.@UseTest String content; \n若@UseTest java.lang.String content; 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。\n\nString content = (@UseTest String) obj; //类型转换\nList<@UseTest String> infos = new ArrayList<>();  //泛型\nimplements @UseTest XXXX;  //实现接口\nthrows @UseTest NullPointException;  //声明抛出异常\n\n```\n\n3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。\n\n4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。\n\n5、@Repeatable：重复注解，Java8的新特性。\n\n在Java8之前，重复注解的解决方案代码如下：\n\n```java \n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Student{\n\tString name();\n}\n\n定义一个容器注解：\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Students{\n\tStudent[] value();\n}\n\n使用：\n@Students({@Student(name = \"Jack\"), @Student(name = \"Will\")})\npublic class StudentTest{\n\t......\n}\n\n```\n\n在Java8中的方案则如下：\n\n```java\n//定义如上的容器注解Students，添加Repeatable注解，如下所示\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Repeatable(Students.class)\npublic @interface Student{\n\tString name();\n}\n\n使用：\n@Student(name = \"Jack\")\n@Student(name = \"Will\")\npublic class StudentTest{\n\t......\n}\n```\n\n## Java反射简介\n\n通过Java反射可以获取对象的属性、方法等。\n\n1、获取类\n\n```java\n\n//第一种方式\nClass stuClazz1 = Class.forName(\"com.lauzy.freedom.ReflectDemo.Student\");\n\t\n//第二种方式\nClass stuClazz2 = Student.class;\n    \n//第三种方式\nStudent stu3 = new Student();\nClass stuClazz3 = stu3.getClass();\n\n```\n2、创建对象\n\n```java\n\nClass stuClazz2 = Student.class;\nObject stu = stuClazz2.newInstance();\n\t\n```\n\n3、获取属性例子\n\n```java\n\nObject stu = stuClazz2.newInstance();   //获取实例\nField age = stuClazz2.getDeclaredField(\"age\");  //获取特定属性\nage.setAccessible(true);    //打破封装性\nage.set(stu, 25);   //设置属性\n\n```\n\n4、方法总结\n\n- getDeclaredFields(): 获取所有属性。\n- getDeclaredField(\"***\"): 获取特定的属性。\n- getModifiers(): 获取属性或方法的修饰符。\n- getType(): 获取属性或方法的类型名。\n- getDeclaredMethods()：获取所有方法。\n- getReturnType()：获取方法的返回类型。\n- getParameterTypes()：获取方法的参数类型。\n- getDeclaredMethod(\"***\",参数类型.class,……): 获取特定的方法。\n- getDeclaredConstructors(): 获取所有的构造方法。\n- getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。\n- getSuperclass()：获取继承的父类。\n- getInterfaces()：获取实现的所有接口。\n\n- field.set(Object object, Object value);//设置object对象的value属性\n- method.invoke(Object object, Object... values); //调用方法，values为方法的参数\n\n5、代码实例\n\n```java\n\ntry {\n    Class stuClazz1 = Class.forName(\"com.lauzy.freedom.ReflectDemo.Student\");\n    Class stuClazz2 = Student.class;\n    Student stu3 = new Student();\n    Class stuClazz3 = stu3.getClass();\n\tfor (Field field : stuClazz1.getDeclaredFields()) {\n        System.out.println(Modifier.toString(field.getModifiers())  //获取属性修饰符\n                + \"-\" + field.getType().getSimpleName()     //获取属性类型名\n                + \"-\" + field.getName());  //获取属性名\n    }\n    System.out.println(\"--------\");\n    for (Method method : stuClazz2.getDeclaredMethods()) {\n        System.out.println(Modifier.toString(method.getModifiers())  //获取方法修饰符\n                + \"-\" + method.getReturnType().toString()   //方法返回类型名\n                + \"-\" + method.getName());  //方法名\n    }\n    System.out.println(\"--------\");\n    System.out.println(stuClazz2.getDeclaredConstructor(String.class, String.class, int.class).toString());\n    System.out.println(\"--------\");\n    System.out.println(stuClazz2.getSuperclass().getName().toString());\n    System.out.println(\"--------\");\n    for (Class aClass : stuClazz2.getInterfaces()) {\n        System.out.println(aClass.getName());\n    }\n    System.out.println(\"--------\");\n    Object stu = stuClazz2.newInstance();   //获取实例\n    Field age = stuClazz2.getDeclaredField(\"age\");  //获取特定属性\n    age.setAccessible(true);    //打破封装性\n    age.set(stu, 25);   //设置属性\n    System.out.println(age.get(stu));\n} catch (Exception e) {\n    e.printStackTrace();\n}\n\n```\n\n输出结果：\n\n```java\n\nprivate-String-name\npublic-String-gender\nprivate-int-age\n--------\npublic-class java.lang.String-getName\npublic-void-setName\npublic-void-setAge\npublic-int-getAge\nprivate-class java.lang.String-getProfile\n--------\npublic com.lauzy.freedom.ReflectDemo.Student(java.lang.String,java.lang.String,int)\n--------\ncom.lauzy.freedom.AnnotationDemo.Person\n--------\njava.io.Serializable\n--------\n25\n\n```\n\n## 自定义注解、反射获取属性\n\n分别定义Name、Gender和SaveMoney注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\n@interface Name {\n    String value() default \"Will\";\n}\n\n```\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface Gender {\n    String value() default \"\";\n}\n\n```\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface SaveMoney {\n\n    int money() default 10000;\n\n    int term() default 1;\n\n    String platform() default \"XXX\";\n}\n\n```\n\n注解的使用：\n\n```java\n\npublic class Person {\n    @Name(value = \"Jack\")\n    @Gender(value = \"man\")\n    public String name;\n\n    @SaveMoney(money = 20000, term = 5, platform = \"ChinaBank\")\n    public void saveMoney(int money) {\n        System.out.println(\"and then he spent \" + money  + \" on clothes.\");\n    }\n}\n\n```\n\n利用反射获取注解的属性和方法：\n\n```java\n\npublic class AnnUtils {\n    public static void test(Class<?> clazz) {\n\n        for (Field field : clazz.getFields()) {\n            if (field.isAnnotationPresent(Name.class) && field.isAnnotationPresent(Gender.class)) {\n                Name name = field.getAnnotation(Name.class);\n                Gender gender = field.getAnnotation(Gender.class);\n                System.out.print(\"A \" + gender.value() + \" called \" + name.value());\n            }\n        }\n\n        try {\n            Class<Person> personClass = Person.class;\n            Method[] methods = personClass.getMethods();\n            for (Method method : methods) {\n                if (method.isAnnotationPresent(SaveMoney.class)) {\n                    SaveMoney saveMoney = method.getAnnotation(SaveMoney.class);\n                    System.out.print(\" deposited \" + saveMoney.money() + \"RMB to \" +\n                            saveMoney.platform() + \" for \" + saveMoney.term() + \" months, \");\n\n                    method.invoke(personClass.newInstance(), 1000);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n执行 \n\n```java\nAnnUtils.test(Person.class);\n```\n\n此时的输出结果为：\n\n```java\nA man named Jack deposited 20000RMB to ChinaBank for 5 months, and then he spent 1000 on clothes.\n```\n\n此篇博客为基础用法及实例，下一篇[Java注解、反射，安卓IOC（二）](http://lauzy.me/2017/05/09/201706IOC2/)会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。\n","source":"_posts/201706IOC1.md","raw":"---\ntitle: Java注解、反射，安卓IOC（一）\ndate: 2017-05-09 22:43:44\ntags: Android 框架\ntoc: false\ncategory: Android\n---\n\n\n## Java注解(Annotation)\n\nJava注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation可用于修饰包、类、构造器、方法、变量等。\n\n<!--more-->\n\n### Annotation 类型\n\n此处来一张网上的图 (可在新标签页中放大查看)\n\n<img src=\"http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg\" width = \"710\" height = \"670\" alt=\"注解大全\"/>\n\n转自[深入理解Java：注解(Annotation)](http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html)\n\n#### 基本Annotation\n\nJava中5个基本的注解分别为：\n- @Override  ————  用来限定子类重写父类的方法。\n- @Deprecated  ————  标记已经过时的方法。\n- @SuppressWarnings  ————  抑制编译器的警告。\n- @SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。\n- @FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。\n\n#### 元Annotation\n\n元Annotation是用来修饰其他注解定义，即注解其他注解。\nJava中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。\n\n1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。\n\n```java \n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Retention {\n    RetentionPolicy value();\n}\n```\n- RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。\n- RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。\n- RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。\n\n2、@Target：指定被修饰的注解能用于哪些程序元素。\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Target {\n    ElementType[] value();\n}\n```\n\n- ElementType.ANNOTATION_TYPE: 修饰Annotation。\n- ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。\n- ElementType.FIELD: 修饰成员变量。\n- ElementType.METHOD: 修饰方法定义。\n- ElementType.PARAMETER: 修饰参数定义。\n- ElementType.CONSTRUCTOR: 修饰构造方法。\n- ElementType.LOCAL_VARIABLE: 修饰局部变量。\n- ElementType.PACKAGE: 修饰包定义。\n\n在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注\n- ElementType.TYPE_PARAMETER:  类型变量\n- ElementType.TYPE_USE:  使用类型的任何语句\n\nTYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：\n\n```java\n@Target(ElementType.TYPE_PARAMETER)\npublic @interface Animal{}\n\npublic class Zoo<@Animal T>{\n\t...\n}\n```\n\nTYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：\n\n```java\n\n定义：\n@Target(ElementType.TYPE_USE)\npublic interface UseTest{}\n\n使用：\n@UseTest String content; 修饰类型，\n此种写法相当于java.lang.@UseTest String content; \n若@UseTest java.lang.String content; 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。\n\nString content = (@UseTest String) obj; //类型转换\nList<@UseTest String> infos = new ArrayList<>();  //泛型\nimplements @UseTest XXXX;  //实现接口\nthrows @UseTest NullPointException;  //声明抛出异常\n\n```\n\n3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。\n\n4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。\n\n5、@Repeatable：重复注解，Java8的新特性。\n\n在Java8之前，重复注解的解决方案代码如下：\n\n```java \n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Student{\n\tString name();\n}\n\n定义一个容器注解：\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Students{\n\tStudent[] value();\n}\n\n使用：\n@Students({@Student(name = \"Jack\"), @Student(name = \"Will\")})\npublic class StudentTest{\n\t......\n}\n\n```\n\n在Java8中的方案则如下：\n\n```java\n//定义如上的容器注解Students，添加Repeatable注解，如下所示\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Repeatable(Students.class)\npublic @interface Student{\n\tString name();\n}\n\n使用：\n@Student(name = \"Jack\")\n@Student(name = \"Will\")\npublic class StudentTest{\n\t......\n}\n```\n\n## Java反射简介\n\n通过Java反射可以获取对象的属性、方法等。\n\n1、获取类\n\n```java\n\n//第一种方式\nClass stuClazz1 = Class.forName(\"com.lauzy.freedom.ReflectDemo.Student\");\n\t\n//第二种方式\nClass stuClazz2 = Student.class;\n    \n//第三种方式\nStudent stu3 = new Student();\nClass stuClazz3 = stu3.getClass();\n\n```\n2、创建对象\n\n```java\n\nClass stuClazz2 = Student.class;\nObject stu = stuClazz2.newInstance();\n\t\n```\n\n3、获取属性例子\n\n```java\n\nObject stu = stuClazz2.newInstance();   //获取实例\nField age = stuClazz2.getDeclaredField(\"age\");  //获取特定属性\nage.setAccessible(true);    //打破封装性\nage.set(stu, 25);   //设置属性\n\n```\n\n4、方法总结\n\n- getDeclaredFields(): 获取所有属性。\n- getDeclaredField(\"***\"): 获取特定的属性。\n- getModifiers(): 获取属性或方法的修饰符。\n- getType(): 获取属性或方法的类型名。\n- getDeclaredMethods()：获取所有方法。\n- getReturnType()：获取方法的返回类型。\n- getParameterTypes()：获取方法的参数类型。\n- getDeclaredMethod(\"***\",参数类型.class,……): 获取特定的方法。\n- getDeclaredConstructors(): 获取所有的构造方法。\n- getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。\n- getSuperclass()：获取继承的父类。\n- getInterfaces()：获取实现的所有接口。\n\n- field.set(Object object, Object value);//设置object对象的value属性\n- method.invoke(Object object, Object... values); //调用方法，values为方法的参数\n\n5、代码实例\n\n```java\n\ntry {\n    Class stuClazz1 = Class.forName(\"com.lauzy.freedom.ReflectDemo.Student\");\n    Class stuClazz2 = Student.class;\n    Student stu3 = new Student();\n    Class stuClazz3 = stu3.getClass();\n\tfor (Field field : stuClazz1.getDeclaredFields()) {\n        System.out.println(Modifier.toString(field.getModifiers())  //获取属性修饰符\n                + \"-\" + field.getType().getSimpleName()     //获取属性类型名\n                + \"-\" + field.getName());  //获取属性名\n    }\n    System.out.println(\"--------\");\n    for (Method method : stuClazz2.getDeclaredMethods()) {\n        System.out.println(Modifier.toString(method.getModifiers())  //获取方法修饰符\n                + \"-\" + method.getReturnType().toString()   //方法返回类型名\n                + \"-\" + method.getName());  //方法名\n    }\n    System.out.println(\"--------\");\n    System.out.println(stuClazz2.getDeclaredConstructor(String.class, String.class, int.class).toString());\n    System.out.println(\"--------\");\n    System.out.println(stuClazz2.getSuperclass().getName().toString());\n    System.out.println(\"--------\");\n    for (Class aClass : stuClazz2.getInterfaces()) {\n        System.out.println(aClass.getName());\n    }\n    System.out.println(\"--------\");\n    Object stu = stuClazz2.newInstance();   //获取实例\n    Field age = stuClazz2.getDeclaredField(\"age\");  //获取特定属性\n    age.setAccessible(true);    //打破封装性\n    age.set(stu, 25);   //设置属性\n    System.out.println(age.get(stu));\n} catch (Exception e) {\n    e.printStackTrace();\n}\n\n```\n\n输出结果：\n\n```java\n\nprivate-String-name\npublic-String-gender\nprivate-int-age\n--------\npublic-class java.lang.String-getName\npublic-void-setName\npublic-void-setAge\npublic-int-getAge\nprivate-class java.lang.String-getProfile\n--------\npublic com.lauzy.freedom.ReflectDemo.Student(java.lang.String,java.lang.String,int)\n--------\ncom.lauzy.freedom.AnnotationDemo.Person\n--------\njava.io.Serializable\n--------\n25\n\n```\n\n## 自定义注解、反射获取属性\n\n分别定义Name、Gender和SaveMoney注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\n@interface Name {\n    String value() default \"Will\";\n}\n\n```\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface Gender {\n    String value() default \"\";\n}\n\n```\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface SaveMoney {\n\n    int money() default 10000;\n\n    int term() default 1;\n\n    String platform() default \"XXX\";\n}\n\n```\n\n注解的使用：\n\n```java\n\npublic class Person {\n    @Name(value = \"Jack\")\n    @Gender(value = \"man\")\n    public String name;\n\n    @SaveMoney(money = 20000, term = 5, platform = \"ChinaBank\")\n    public void saveMoney(int money) {\n        System.out.println(\"and then he spent \" + money  + \" on clothes.\");\n    }\n}\n\n```\n\n利用反射获取注解的属性和方法：\n\n```java\n\npublic class AnnUtils {\n    public static void test(Class<?> clazz) {\n\n        for (Field field : clazz.getFields()) {\n            if (field.isAnnotationPresent(Name.class) && field.isAnnotationPresent(Gender.class)) {\n                Name name = field.getAnnotation(Name.class);\n                Gender gender = field.getAnnotation(Gender.class);\n                System.out.print(\"A \" + gender.value() + \" called \" + name.value());\n            }\n        }\n\n        try {\n            Class<Person> personClass = Person.class;\n            Method[] methods = personClass.getMethods();\n            for (Method method : methods) {\n                if (method.isAnnotationPresent(SaveMoney.class)) {\n                    SaveMoney saveMoney = method.getAnnotation(SaveMoney.class);\n                    System.out.print(\" deposited \" + saveMoney.money() + \"RMB to \" +\n                            saveMoney.platform() + \" for \" + saveMoney.term() + \" months, \");\n\n                    method.invoke(personClass.newInstance(), 1000);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n执行 \n\n```java\nAnnUtils.test(Person.class);\n```\n\n此时的输出结果为：\n\n```java\nA man named Jack deposited 20000RMB to ChinaBank for 5 months, and then he spent 1000 on clothes.\n```\n\n此篇博客为基础用法及实例，下一篇[Java注解、反射，安卓IOC（二）](http://lauzy.me/2017/05/09/201706IOC2/)会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。\n","slug":"201706IOC1","published":1,"updated":"2017-06-26T14:02:30.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4e8hiln0000n0v1zvymu2fy","content":"<h2 id=\"Java注解-Annotation\"><a href=\"#Java注解-Annotation\" class=\"headerlink\" title=\"Java注解(Annotation)\"></a>Java注解(Annotation)</h2><p>Java注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation可用于修饰包、类、构造器、方法、变量等。</p>\n<a id=\"more\"></a>\n<h3 id=\"Annotation-类型\"><a href=\"#Annotation-类型\" class=\"headerlink\" title=\"Annotation 类型\"></a>Annotation 类型</h3><p>此处来一张网上的图 (可在新标签页中放大查看)</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg\" width=\"710\" height=\"670\" alt=\"注解大全\"></p>\n<p>转自<a href=\"http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html\" target=\"_blank\" rel=\"external\">深入理解Java：注解(Annotation)</a></p>\n<h4 id=\"基本Annotation\"><a href=\"#基本Annotation\" class=\"headerlink\" title=\"基本Annotation\"></a>基本Annotation</h4><p>Java中5个基本的注解分别为：</p>\n<ul>\n<li>@Override  ————  用来限定子类重写父类的方法。</li>\n<li>@Deprecated  ————  标记已经过时的方法。</li>\n<li>@SuppressWarnings  ————  抑制编译器的警告。</li>\n<li>@SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。</li>\n<li>@FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。</li>\n</ul>\n<h4 id=\"元Annotation\"><a href=\"#元Annotation\" class=\"headerlink\" title=\"元Annotation\"></a>元Annotation</h4><p>元Annotation是用来修饰其他注解定义，即注解其他注解。<br>Java中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。</p>\n<p>1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Retention</span> <span class=\"token punctuation\">{</span>\n    RetentionPolicy <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。</li>\n<li>RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。</li>\n<li>RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。</li>\n</ul>\n<p>2、@Target：指定被修饰的注解能用于哪些程序元素。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">{</span>\n    ElementType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>ElementType.ANNOTATION_TYPE: 修饰Annotation。</li>\n<li>ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。</li>\n<li>ElementType.FIELD: 修饰成员变量。</li>\n<li>ElementType.METHOD: 修饰方法定义。</li>\n<li>ElementType.PARAMETER: 修饰参数定义。</li>\n<li>ElementType.CONSTRUCTOR: 修饰构造方法。</li>\n<li>ElementType.LOCAL_VARIABLE: 修饰局部变量。</li>\n<li>ElementType.PACKAGE: 修饰包定义。</li>\n</ul>\n<p>在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注</p>\n<ul>\n<li>ElementType.TYPE_PARAMETER:  类型变量</li>\n<li>ElementType.TYPE_USE:  使用类型的任何语句</li>\n</ul>\n<p>TYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>TYPE_PARAMETER<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Zoo</span><span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@Animal</span> T<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>TYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n定义：\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>TYPE_USE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UseTest</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n使用：\n<span class=\"token annotation punctuation\">@UseTest</span> String content<span class=\"token punctuation\">;</span> 修饰类型，\n此种写法相当于java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>@UseTest String content<span class=\"token punctuation\">;</span> \n若<span class=\"token annotation punctuation\">@UseTest</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>String content<span class=\"token punctuation\">;</span> 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。\n\nString content <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@UseTest</span> String<span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//类型转换</span>\nList<span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@UseTest</span> String<span class=\"token operator\">></span> infos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//泛型</span>\n<span class=\"token keyword\">implements</span> <span class=\"token annotation punctuation\">@UseTest</span> XXXX<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//实现接口</span>\n<span class=\"token keyword\">throws</span> <span class=\"token annotation punctuation\">@UseTest</span> NullPointException<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//声明抛出异常</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。</p>\n<p>4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。</p>\n<p>5、@Repeatable：重复注解，Java8的新特性。</p>\n<p>在Java8之前，重复注解的解决方案代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{</span>\n    String <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n定义一个容器注解：\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Students</span><span class=\"token punctuation\">{</span>\n    Student<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n使用：\n<span class=\"token annotation punctuation\">@Students</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token annotation punctuation\">@Student</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Student</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Will\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentTest</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在Java8中的方案则如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//定义如上的容器注解Students，添加Repeatable注解，如下所示</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Repeatable</span><span class=\"token punctuation\">(</span>Students<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{</span>\n    String <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n使用：\n<span class=\"token annotation punctuation\">@Student</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Student</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Will\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentTest</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Java反射简介\"><a href=\"#Java反射简介\" class=\"headerlink\" title=\"Java反射简介\"></a>Java反射简介</h2><p>通过Java反射可以获取对象的属性、方法等。</p>\n<p>1、获取类</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token comment\" spellcheck=\"true\">//第一种方式</span>\nClass <span class=\"token class-name\">stuClazz1</span> <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.lauzy.freedom.ReflectDemo.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//第二种方式</span>\nClass <span class=\"token class-name\">stuClazz2</span> <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//第三种方式</span>\nStudent stu3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nClass <span class=\"token class-name\">stuClazz3</span> <span class=\"token operator\">=</span> stu3<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2、创建对象</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\nClass <span class=\"token class-name\">stuClazz2</span> <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\nObject stu <span class=\"token operator\">=</span> stuClazz2<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>3、获取属性例子</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\nObject stu <span class=\"token operator\">=</span> stuClazz2<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//获取实例</span>\nField age <span class=\"token operator\">=</span> stuClazz2<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//获取特定属性</span>\nage<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//打破封装性</span>\nage<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//设置属性</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4、方法总结</p>\n<ul>\n<li>getDeclaredFields(): 获取所有属性。</li>\n<li>getDeclaredField(“<em>*</em>“): 获取特定的属性。</li>\n<li>getModifiers(): 获取属性或方法的修饰符。</li>\n<li>getType(): 获取属性或方法的类型名。</li>\n<li>getDeclaredMethods()：获取所有方法。</li>\n<li>getReturnType()：获取方法的返回类型。</li>\n<li>getParameterTypes()：获取方法的参数类型。</li>\n<li>getDeclaredMethod(“<em>*</em>“,参数类型.class,……): 获取特定的方法。</li>\n<li>getDeclaredConstructors(): 获取所有的构造方法。</li>\n<li>getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。</li>\n<li>getSuperclass()：获取继承的父类。</li>\n<li><p>getInterfaces()：获取实现的所有接口。</p>\n</li>\n<li><p>field.set(Object object, Object value);//设置object对象的value属性</p>\n</li>\n<li>method.invoke(Object object, Object… values); //调用方法，values为方法的参数</li>\n</ul>\n<p>5、代码实例</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    Class <span class=\"token class-name\">stuClazz1</span> <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.lauzy.freedom.ReflectDemo.Student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Class <span class=\"token class-name\">stuClazz2</span> <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n    Student stu3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Class <span class=\"token class-name\">stuClazz3</span> <span class=\"token operator\">=</span> stu3<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Field field <span class=\"token operator\">:</span> stuClazz1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">//获取属性修饰符</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\">//获取属性类型名</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//获取属性名</span>\n    <span class=\"token punctuation\">}</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Method method <span class=\"token operator\">:</span> stuClazz2<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">//获取方法修饰符</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\">//方法返回类型名</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//方法名</span>\n    <span class=\"token punctuation\">}</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stuClazz2<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stuClazz2<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Class <span class=\"token class-name\">aClass</span> <span class=\"token operator\">:</span> stuClazz2<span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Object stu <span class=\"token operator\">=</span> stuClazz2<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//获取实例</span>\n    Field age <span class=\"token operator\">=</span> stuClazz2<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//获取特定属性</span>\n    age<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//打破封装性</span>\n    age<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//设置属性</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">private</span><span class=\"token operator\">-</span>String<span class=\"token operator\">-</span>name\n<span class=\"token keyword\">public</span><span class=\"token operator\">-</span>String<span class=\"token operator\">-</span>gender\n<span class=\"token keyword\">private</span><span class=\"token operator\">-</span><span class=\"token keyword\">int</span><span class=\"token operator\">-</span>age\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">-</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>String</span><span class=\"token operator\">-</span>getName\n<span class=\"token keyword\">public</span><span class=\"token operator\">-</span><span class=\"token keyword\">void</span><span class=\"token operator\">-</span>setName\n<span class=\"token keyword\">public</span><span class=\"token operator\">-</span><span class=\"token keyword\">void</span><span class=\"token operator\">-</span>setAge\n<span class=\"token keyword\">public</span><span class=\"token operator\">-</span><span class=\"token keyword\">int</span><span class=\"token operator\">-</span>getAge\n<span class=\"token keyword\">private</span><span class=\"token operator\">-</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>String</span><span class=\"token operator\">-</span>getProfile\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token keyword\">public</span> com<span class=\"token punctuation\">.</span>lauzy<span class=\"token punctuation\">.</span>freedom<span class=\"token punctuation\">.</span>ReflectDemo<span class=\"token punctuation\">.</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">,</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\ncom<span class=\"token punctuation\">.</span>lauzy<span class=\"token punctuation\">.</span>freedom<span class=\"token punctuation\">.</span>AnnotationDemo<span class=\"token punctuation\">.</span>Person\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\njava<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Serializable\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token number\">25</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"自定义注解、反射获取属性\"><a href=\"#自定义注解、反射获取属性\" class=\"headerlink\" title=\"自定义注解、反射获取属性\"></a>自定义注解、反射获取属性</h2><p>分别定义Name、Gender和SaveMoney注解：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">)</span>\n@<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n    String <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"Will\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Gender</span> <span class=\"token punctuation\">{</span>\n    String <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SaveMoney</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">money</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">term</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    String <span class=\"token function\">platform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"XXX\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注解的使用：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Name</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Gender</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"man\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> String name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@SaveMoney</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">=</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">,</span> term <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> platform <span class=\"token operator\">=</span> <span class=\"token string\">\"ChinaBank\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveMoney</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"and then he spent \"</span> <span class=\"token operator\">+</span> money  <span class=\"token operator\">+</span> <span class=\"token string\">\" on clothes.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>利用反射获取注解的属性和方法：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnnUtils</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Field field <span class=\"token operator\">:</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>Gender<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                Name name <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Gender gender <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>Gender<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A \"</span> <span class=\"token operator\">+</span> gender<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" called \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            Class<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> personClass <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n            Method<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Method method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>SaveMoney<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    SaveMoney saveMoney <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>SaveMoney<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" deposited \"</span> <span class=\"token operator\">+</span> saveMoney<span class=\"token punctuation\">.</span><span class=\"token function\">money</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"RMB to \"</span> <span class=\"token operator\">+</span>\n                            saveMoney<span class=\"token punctuation\">.</span><span class=\"token function\">platform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" for \"</span> <span class=\"token operator\">+</span> saveMoney<span class=\"token punctuation\">.</span><span class=\"token function\">term</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" months, \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>personClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行 </p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">AnnUtils<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时的输出结果为：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">A man named Jack deposited 20000RMB to ChinaBank <span class=\"token keyword\">for</span> <span class=\"token number\">5</span> months<span class=\"token punctuation\">,</span> and then he spent <span class=\"token number\">1000</span> on clothes<span class=\"token punctuation\">.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此篇博客为基础用法及实例，下一篇<a href=\"http://lauzy.me/2017/05/09/201706IOC2/\" target=\"_blank\" rel=\"external\">Java注解、反射，安卓IOC（二）</a>会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。</p>\n","excerpt":"<h2 id=\"Java注解-Annotation\"><a href=\"#Java注解-Annotation\" class=\"headerlink\" title=\"Java注解(Annotation)\"></a>Java注解(Annotation)</h2><p>Java注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation可用于修饰包、类、构造器、方法、变量等。</p>","more":"<h3 id=\"Annotation-类型\"><a href=\"#Annotation-类型\" class=\"headerlink\" title=\"Annotation 类型\"></a>Annotation 类型</h3><p>此处来一张网上的图 (可在新标签页中放大查看)</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg\" width = \"710\" height = \"670\" alt=\"注解大全\"/></p>\n<p>转自<a href=\"http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html\">深入理解Java：注解(Annotation)</a></p>\n<h4 id=\"基本Annotation\"><a href=\"#基本Annotation\" class=\"headerlink\" title=\"基本Annotation\"></a>基本Annotation</h4><p>Java中5个基本的注解分别为：</p>\n<ul>\n<li>@Override  ————  用来限定子类重写父类的方法。</li>\n<li>@Deprecated  ————  标记已经过时的方法。</li>\n<li>@SuppressWarnings  ————  抑制编译器的警告。</li>\n<li>@SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。</li>\n<li>@FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。</li>\n</ul>\n<h4 id=\"元Annotation\"><a href=\"#元Annotation\" class=\"headerlink\" title=\"元Annotation\"></a>元Annotation</h4><p>元Annotation是用来修饰其他注解定义，即注解其他注解。<br>Java中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。</p>\n<p>1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。</p>\n<pre><code class=\"java\">@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Retention {\n    RetentionPolicy value();\n}\n</code></pre>\n<ul>\n<li>RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。</li>\n<li>RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。</li>\n<li>RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。</li>\n</ul>\n<p>2、@Target：指定被修饰的注解能用于哪些程序元素。</p>\n<pre><code class=\"java\">@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Target {\n    ElementType[] value();\n}\n</code></pre>\n<ul>\n<li>ElementType.ANNOTATION_TYPE: 修饰Annotation。</li>\n<li>ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。</li>\n<li>ElementType.FIELD: 修饰成员变量。</li>\n<li>ElementType.METHOD: 修饰方法定义。</li>\n<li>ElementType.PARAMETER: 修饰参数定义。</li>\n<li>ElementType.CONSTRUCTOR: 修饰构造方法。</li>\n<li>ElementType.LOCAL_VARIABLE: 修饰局部变量。</li>\n<li>ElementType.PACKAGE: 修饰包定义。</li>\n</ul>\n<p>在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注</p>\n<ul>\n<li>ElementType.TYPE_PARAMETER:  类型变量</li>\n<li>ElementType.TYPE_USE:  使用类型的任何语句</li>\n</ul>\n<p>TYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：</p>\n<pre><code class=\"java\">@Target(ElementType.TYPE_PARAMETER)\npublic @interface Animal{}\n\npublic class Zoo&lt;@Animal T&gt;{\n    ...\n}\n</code></pre>\n<p>TYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：</p>\n<pre><code class=\"java\">\n定义：\n@Target(ElementType.TYPE_USE)\npublic interface UseTest{}\n\n使用：\n@UseTest String content; 修饰类型，\n此种写法相当于java.lang.@UseTest String content; \n若@UseTest java.lang.String content; 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。\n\nString content = (@UseTest String) obj; //类型转换\nList&lt;@UseTest String&gt; infos = new ArrayList&lt;&gt;();  //泛型\nimplements @UseTest XXXX;  //实现接口\nthrows @UseTest NullPointException;  //声明抛出异常\n</code></pre>\n<p>3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。</p>\n<p>4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。</p>\n<p>5、@Repeatable：重复注解，Java8的新特性。</p>\n<p>在Java8之前，重复注解的解决方案代码如下：</p>\n<pre><code class=\"java\">@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Student{\n    String name();\n}\n\n定义一个容器注解：\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Students{\n    Student[] value();\n}\n\n使用：\n@Students({@Student(name = &quot;Jack&quot;), @Student(name = &quot;Will&quot;)})\npublic class StudentTest{\n    ......\n}\n</code></pre>\n<p>在Java8中的方案则如下：</p>\n<pre><code class=\"java\">//定义如上的容器注解Students，添加Repeatable注解，如下所示\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Repeatable(Students.class)\npublic @interface Student{\n    String name();\n}\n\n使用：\n@Student(name = &quot;Jack&quot;)\n@Student(name = &quot;Will&quot;)\npublic class StudentTest{\n    ......\n}\n</code></pre>\n<h2 id=\"Java反射简介\"><a href=\"#Java反射简介\" class=\"headerlink\" title=\"Java反射简介\"></a>Java反射简介</h2><p>通过Java反射可以获取对象的属性、方法等。</p>\n<p>1、获取类</p>\n<pre><code class=\"java\">\n//第一种方式\nClass stuClazz1 = Class.forName(&quot;com.lauzy.freedom.ReflectDemo.Student&quot;);\n\n//第二种方式\nClass stuClazz2 = Student.class;\n\n//第三种方式\nStudent stu3 = new Student();\nClass stuClazz3 = stu3.getClass();\n</code></pre>\n<p>2、创建对象</p>\n<pre><code class=\"java\">\nClass stuClazz2 = Student.class;\nObject stu = stuClazz2.newInstance();\n</code></pre>\n<p>3、获取属性例子</p>\n<pre><code class=\"java\">\nObject stu = stuClazz2.newInstance();   //获取实例\nField age = stuClazz2.getDeclaredField(&quot;age&quot;);  //获取特定属性\nage.setAccessible(true);    //打破封装性\nage.set(stu, 25);   //设置属性\n</code></pre>\n<p>4、方法总结</p>\n<ul>\n<li>getDeclaredFields(): 获取所有属性。</li>\n<li>getDeclaredField(“<em>*</em>“): 获取特定的属性。</li>\n<li>getModifiers(): 获取属性或方法的修饰符。</li>\n<li>getType(): 获取属性或方法的类型名。</li>\n<li>getDeclaredMethods()：获取所有方法。</li>\n<li>getReturnType()：获取方法的返回类型。</li>\n<li>getParameterTypes()：获取方法的参数类型。</li>\n<li>getDeclaredMethod(“<em>*</em>“,参数类型.class,……): 获取特定的方法。</li>\n<li>getDeclaredConstructors(): 获取所有的构造方法。</li>\n<li>getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。</li>\n<li>getSuperclass()：获取继承的父类。</li>\n<li><p>getInterfaces()：获取实现的所有接口。</p>\n</li>\n<li><p>field.set(Object object, Object value);//设置object对象的value属性</p>\n</li>\n<li>method.invoke(Object object, Object… values); //调用方法，values为方法的参数</li>\n</ul>\n<p>5、代码实例</p>\n<pre><code class=\"java\">\ntry {\n    Class stuClazz1 = Class.forName(&quot;com.lauzy.freedom.ReflectDemo.Student&quot;);\n    Class stuClazz2 = Student.class;\n    Student stu3 = new Student();\n    Class stuClazz3 = stu3.getClass();\n    for (Field field : stuClazz1.getDeclaredFields()) {\n        System.out.println(Modifier.toString(field.getModifiers())  //获取属性修饰符\n                + &quot;-&quot; + field.getType().getSimpleName()     //获取属性类型名\n                + &quot;-&quot; + field.getName());  //获取属性名\n    }\n    System.out.println(&quot;--------&quot;);\n    for (Method method : stuClazz2.getDeclaredMethods()) {\n        System.out.println(Modifier.toString(method.getModifiers())  //获取方法修饰符\n                + &quot;-&quot; + method.getReturnType().toString()   //方法返回类型名\n                + &quot;-&quot; + method.getName());  //方法名\n    }\n    System.out.println(&quot;--------&quot;);\n    System.out.println(stuClazz2.getDeclaredConstructor(String.class, String.class, int.class).toString());\n    System.out.println(&quot;--------&quot;);\n    System.out.println(stuClazz2.getSuperclass().getName().toString());\n    System.out.println(&quot;--------&quot;);\n    for (Class aClass : stuClazz2.getInterfaces()) {\n        System.out.println(aClass.getName());\n    }\n    System.out.println(&quot;--------&quot;);\n    Object stu = stuClazz2.newInstance();   //获取实例\n    Field age = stuClazz2.getDeclaredField(&quot;age&quot;);  //获取特定属性\n    age.setAccessible(true);    //打破封装性\n    age.set(stu, 25);   //设置属性\n    System.out.println(age.get(stu));\n} catch (Exception e) {\n    e.printStackTrace();\n}\n</code></pre>\n<p>输出结果：</p>\n<pre><code class=\"java\">\nprivate-String-name\npublic-String-gender\nprivate-int-age\n--------\npublic-class java.lang.String-getName\npublic-void-setName\npublic-void-setAge\npublic-int-getAge\nprivate-class java.lang.String-getProfile\n--------\npublic com.lauzy.freedom.ReflectDemo.Student(java.lang.String,java.lang.String,int)\n--------\ncom.lauzy.freedom.AnnotationDemo.Person\n--------\njava.io.Serializable\n--------\n25\n</code></pre>\n<h2 id=\"自定义注解、反射获取属性\"><a href=\"#自定义注解、反射获取属性\" class=\"headerlink\" title=\"自定义注解、反射获取属性\"></a>自定义注解、反射获取属性</h2><p>分别定义Name、Gender和SaveMoney注解：</p>\n<pre><code class=\"java\">\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\n@interface Name {\n    String value() default &quot;Will&quot;;\n}\n</code></pre>\n<pre><code class=\"java\">\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface Gender {\n    String value() default &quot;&quot;;\n}\n</code></pre>\n<pre><code class=\"java\">\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface SaveMoney {\n\n    int money() default 10000;\n\n    int term() default 1;\n\n    String platform() default &quot;XXX&quot;;\n}\n</code></pre>\n<p>注解的使用：</p>\n<pre><code class=\"java\">\npublic class Person {\n    @Name(value = &quot;Jack&quot;)\n    @Gender(value = &quot;man&quot;)\n    public String name;\n\n    @SaveMoney(money = 20000, term = 5, platform = &quot;ChinaBank&quot;)\n    public void saveMoney(int money) {\n        System.out.println(&quot;and then he spent &quot; + money  + &quot; on clothes.&quot;);\n    }\n}\n</code></pre>\n<p>利用反射获取注解的属性和方法：</p>\n<pre><code class=\"java\">\npublic class AnnUtils {\n    public static void test(Class&lt;?&gt; clazz) {\n\n        for (Field field : clazz.getFields()) {\n            if (field.isAnnotationPresent(Name.class) &amp;&amp; field.isAnnotationPresent(Gender.class)) {\n                Name name = field.getAnnotation(Name.class);\n                Gender gender = field.getAnnotation(Gender.class);\n                System.out.print(&quot;A &quot; + gender.value() + &quot; called &quot; + name.value());\n            }\n        }\n\n        try {\n            Class&lt;Person&gt; personClass = Person.class;\n            Method[] methods = personClass.getMethods();\n            for (Method method : methods) {\n                if (method.isAnnotationPresent(SaveMoney.class)) {\n                    SaveMoney saveMoney = method.getAnnotation(SaveMoney.class);\n                    System.out.print(&quot; deposited &quot; + saveMoney.money() + &quot;RMB to &quot; +\n                            saveMoney.platform() + &quot; for &quot; + saveMoney.term() + &quot; months, &quot;);\n\n                    method.invoke(personClass.newInstance(), 1000);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>\n<p>执行 </p>\n<pre><code class=\"java\">AnnUtils.test(Person.class);\n</code></pre>\n<p>此时的输出结果为：</p>\n<pre><code class=\"java\">A man named Jack deposited 20000RMB to ChinaBank for 5 months, and then he spent 1000 on clothes.\n</code></pre>\n<p>此篇博客为基础用法及实例，下一篇<a href=\"http://lauzy.me/2017/05/09/201706IOC2/\">Java注解、反射，安卓IOC（二）</a>会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。</p>"},{"title":"Java注解、反射，安卓IOC（二）","date":"2017-05-09T16:00:00.000Z","toc":false,"_content":"\n在上一篇[Java注解、反射，安卓IOC（一）](http://lauzy.me/2017/05/09/201706IOC1/)中我们知道了注解及反射的用法。\n在项目开发中，大部分Android开发者都使用过ButterKnife这个通过注解简化代码的框架。部分Android开发者也使用过xUtils这种快速开发的框架。\n两者均使用到了注解。本篇会分别介绍下其实现机制。\n\n## 运行时注解\n\n首先我们自己简单实现类似xUtils这种运行时注解框架。\n\n###  绑定View控件\n\n创建注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)//运行时注解\n@Target(ElementType.FIELD)//Target为属性\npublic @interface FindView {\n    int value() default -1;\n}\n\n```\n\nView解析代码：\n\n```java\n\npublic class ViewInject {\n\n    public static void bind(Activity activity) {\n        inject(new ViewFinder(activity), activity);\n    }\n\n    public static void bind(View view) {\n        inject(new ViewFinder(view), view);\n    }\n\n    public static void bind(View view, Object obj) {\n        inject(new ViewFinder(view), obj);\n    }\n\n    private static void inject(ViewFinder finder, Object obj) {\n        injectFields(finder, obj);\n        injectMethods(finder, obj);\n    }\n\n    private static void injectFields(ViewFinder finder, Object obj) {\n        Class<?> clazz = obj.getClass();\n        Field[] fields = clazz.getDeclaredFields();//获取所有变量\n        for (Field field : fields) {\n            if (field.isAnnotationPresent(FindView.class)) {\n                FindView findView = field.getAnnotation(FindView.class);//获取注解\n                if (findView.value() < 0) {\n                    throw new IllegalArgumentException(\"The id can't be -1.\");\n                } else {\n                    View view = finder.findViewById(findView.value());\n                    try {\n                        field.setAccessible(true);//破坏封装\n                        field.set(obj, view); //设置属性\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n\n```\n\n主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的ID赋值给指定方法并调用。\n\n\n### 绑定OnClick事件\n\n创建注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD) //Target为方法\npublic @interface OnClick {\n    int[] id();\n}\n\n```\n\nOnClick事件注入：\n\n```java\n\nprivate static void injectMethods(ViewFinder finder, final Object obj) {\n    Method[] methods = obj.getClass().getDeclaredMethods();\n    for (final Method method : methods) {\n        if (method.isAnnotationPresent(OnClick.class)) {\n            OnClick onClick = method.getAnnotation(OnClick.class);\n            if (onClick.id().length != 0) {\n                for (int i : onClick.id()) {\n                    View view = finder.findViewById(i);\n                    method.setAccessible(true);\n                    view.setOnClickListener(new View.OnClickListener() {\n                        @Override\n                        public void onClick(View v) {\n                            try {\n                                method.invoke(obj, v);\n                            } catch (IllegalAccessException e) {\n                                e.printStackTrace();\n                            } catch (InvocationTargetException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n\n```\n\n主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的ID，将注解的ID赋值给findViewById方法，然后在setOnClickListener调用method方法。\n\n在Activity中的使用：\n\n```java\n\npublic class IocActivity extends AppCompatActivity {\n\n    @FindView(R.id.txt_ioc_test)\n    private TextView mTxtTest;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_ioc);\n        ViewInject.bind(this);\n        mTxtTest.setText(\"测试\");\n    }\n\n    @OnClick(id = {R.id.btn_ioc_test, R.id.btn_ioc_test2})\n    public void onClick(View view) {\n        switch (view.getId()) {\n            case R.id.btn_ioc_test:\n                Toast.makeText(this, \"Click1\", Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.btn_ioc_test2:\n                Toast.makeText(this, \"Click2\", Toast.LENGTH_SHORT).show();\n                break;\n        }\n    }\n}\n\n```\n\n以上为运行时注解的简单实现，但是这种方法因为通过一系列反射获取属性、方法等，对性能还是有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。\n\n## 编译时注解\n\nButterKnife源码解析网上已经有很多不错的文章了，例如这篇[ButterKnife源码分析](http://www.jianshu.com/p/0f3f4f7ca505)讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在Android Studio中的使用。\n\n首先介绍下大概的项目结构，如下图所示：\n\n<img src = \"http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png\">\n\n- annotation module: Java library  定义一系列注解。\n- injetc module: Android library  定义注解的接口及调用方法。\n- compiler module: Java library  自定义编译时注解AbstractProcessor在编译期间生成java代码。\n- app: 使用方法。\n\n本篇文章主要为介绍及学习，所以此处仅实现setContentView的编译时注解。\n\n1、声明注解\n\n```java\n\n@Retention(RetentionPolicy.CLASS) //编译时注解\n@Target(ElementType.TYPE) //修饰类\npublic @interface ContentView {\n    int value();\n}\n\n```\n\n2、声明外界接口及方法\n\n声明接口：\n```java\n\npublic interface ContentInjector<T> {\n    void injectContent(T obj, Activity activity); //此处仅用 Activity 参数即可实现文章的 demo\n}\n\n```\n\n提供方法：\n\n```java\n\npublic class ContentViewInject {\n    public static void bind(Activity activity) {//绑定\n        injectContentView(activity);\n    }\n    private static void injectContentView(Activity activity) {\n        Class<? extends Activity> clazz = activity.getClass();\n        try {\n            ContentInjector injector = (ContentInjector) Class.forName(clazz.getName()\n                    + \"$$ViewBinder\").newInstance();\n            injector.injectContent(activity, activity);\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n此处仅为简单的使用，butterknife中的UnBinder解绑，使用Map缓存等暂不考虑。\n\n3、自定义AbstractProcessor，此处需将module设置为Java module才可继承AbstractProcessor。\n\n```java\n\n@AutoService(Processor.class)\n@SupportedAnnotationTypes(\"com.lauzy.ContentView\")\n@SupportedSourceVersion(value = SourceVersion.RELEASE_7)\npublic class ContentViewInjectProcessor extends AbstractProcessor {\n\n    @Override\n    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        String packageName;\n        String className;\n        //遍历每个被ContentView修饰的class文件\n        for (Element element : roundEnvironment.getElementsAnnotatedWith(ContentView.class)) {\n            if (element.getKind() == ElementKind.CLASS) {\n                TypeElement typeElement = (TypeElement) element;\n                PackageElement packageEle = (PackageElement) element.getEnclosingElement();\n                packageName = packageEle.getQualifiedName().toString();//获取包名\n                //因为是ElementKind.CLASS类型，所以可以直接强制转换，获取类名\n                className = typeElement.getSimpleName().toString();\n\n                int layoutId = typeElement.getAnnotation(ContentView.class).value();//获取注解的id\n\t\t\t\t\n\t\t\t\t//拼接Java类的字符串\n                StringBuilder builder = new StringBuilder();\n                builder.append(\"package \").append(packageName).append(\";\\n\");\n                builder.append(\"import android.view.View;\\n\");\n                builder.append(\"import android.app.Activity;\\n\");\n                builder.append(\"import com.freedom.lauzy.inject.ContentInjector;\\n\");\n                builder.append('\\n');\n\n                builder.append(\"public class \").append(className + \"$$ViewBinder\");\n                builder.append(\"<T extends \").append(className).append(\">\");\n                builder.append(\" implements ContentInjector<T>\");\n                builder.append(\" {\\n\");\n                builder.append(\"@Override\\n\")\n                        .append(\"public void injectContent(final T source, Activity activity) {\\n\");\n                builder.append(\"    ((Activity) source).setContentView(\" + layoutId);\n                builder.append(\");\\n\");\n                builder.append(\"}\\n\\n}\\n\");\n\n\n\t\t\t\t//写入Java文件\n                try {\n                    JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(\n                            packageName + \".\" + className + \"$$ViewBinder\",\n                            typeElement);\n                    Writer writer = fileObject.openWriter();\n                    writer.write(builder.toString());\n                    writer.flush();\n                    writer.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.out.println(\"error\");\n                }\n            }\n        }\n        return true;\n    }\n}\n\n```\n\nbutterknife中使用了[javapoet](https://github.com/square/javapoet) 生成Java代码文件\n\n此module的gradle配置如下：\n\n```java\n\napply plugin: 'java'\n\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    compile 'com.google.auto.service:auto-service:1.0-rc2' //google的生成源代码库\n    compile project(':annotation')\n}\n\nsourceCompatibility = \"1.7\"\ntargetCompatibility = \"1.7\"\n\n```\n\n4、app使用\n\napp的gradle配置如下：\n\n```java\n\ndependencies {\n\t...\n    annotationProcessor project(':compiler')\n    compile project(':annotation')\n    compile project(':inject')\n}\n\n```\n\nactivity中使用：\n\n```java\n\n@ContentView(R.layout.activity_ioc)\npublic class IocActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ContentViewInject.bind(this);\n    }\n}\n\n```\n\n这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个\nIocActivity$$ViewBinder 的 Java 文件，代码如下：\n\n```java\n\npackage com.lauzy.freedom.lauzycode.IOC;\nimport android.app.Activity;\nimport com.freedom.lauzy.inject.ContentInjector;\n\npublic class IocActivity$$ViewBinder<T extends IocActivity> implements ContentInjector<T> {\n@Override\npublic void injectContent(final T source, Activity activity) {\n    ((Activity) source).setContentView(2130968606);\n}\n}\n\n```\n\n可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。\n\n1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。\n需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，\n文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。\n\n如下图所示：\n<img src = \"http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png\">\n\n\n\n","source":"_posts/201706IOC2.md","raw":"---\ntitle: Java注解、反射，安卓IOC（二）\ndate: 2017-05-10\ntags: Android 框架\ntoc: false\ncategory: Android\n---\n\n在上一篇[Java注解、反射，安卓IOC（一）](http://lauzy.me/2017/05/09/201706IOC1/)中我们知道了注解及反射的用法。\n在项目开发中，大部分Android开发者都使用过ButterKnife这个通过注解简化代码的框架。部分Android开发者也使用过xUtils这种快速开发的框架。\n两者均使用到了注解。本篇会分别介绍下其实现机制。\n\n## 运行时注解\n\n首先我们自己简单实现类似xUtils这种运行时注解框架。\n\n###  绑定View控件\n\n创建注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)//运行时注解\n@Target(ElementType.FIELD)//Target为属性\npublic @interface FindView {\n    int value() default -1;\n}\n\n```\n\nView解析代码：\n\n```java\n\npublic class ViewInject {\n\n    public static void bind(Activity activity) {\n        inject(new ViewFinder(activity), activity);\n    }\n\n    public static void bind(View view) {\n        inject(new ViewFinder(view), view);\n    }\n\n    public static void bind(View view, Object obj) {\n        inject(new ViewFinder(view), obj);\n    }\n\n    private static void inject(ViewFinder finder, Object obj) {\n        injectFields(finder, obj);\n        injectMethods(finder, obj);\n    }\n\n    private static void injectFields(ViewFinder finder, Object obj) {\n        Class<?> clazz = obj.getClass();\n        Field[] fields = clazz.getDeclaredFields();//获取所有变量\n        for (Field field : fields) {\n            if (field.isAnnotationPresent(FindView.class)) {\n                FindView findView = field.getAnnotation(FindView.class);//获取注解\n                if (findView.value() < 0) {\n                    throw new IllegalArgumentException(\"The id can't be -1.\");\n                } else {\n                    View view = finder.findViewById(findView.value());\n                    try {\n                        field.setAccessible(true);//破坏封装\n                        field.set(obj, view); //设置属性\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n\n```\n\n主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的ID赋值给指定方法并调用。\n\n\n### 绑定OnClick事件\n\n创建注解：\n\n```java\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD) //Target为方法\npublic @interface OnClick {\n    int[] id();\n}\n\n```\n\nOnClick事件注入：\n\n```java\n\nprivate static void injectMethods(ViewFinder finder, final Object obj) {\n    Method[] methods = obj.getClass().getDeclaredMethods();\n    for (final Method method : methods) {\n        if (method.isAnnotationPresent(OnClick.class)) {\n            OnClick onClick = method.getAnnotation(OnClick.class);\n            if (onClick.id().length != 0) {\n                for (int i : onClick.id()) {\n                    View view = finder.findViewById(i);\n                    method.setAccessible(true);\n                    view.setOnClickListener(new View.OnClickListener() {\n                        @Override\n                        public void onClick(View v) {\n                            try {\n                                method.invoke(obj, v);\n                            } catch (IllegalAccessException e) {\n                                e.printStackTrace();\n                            } catch (InvocationTargetException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n\n```\n\n主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的ID，将注解的ID赋值给findViewById方法，然后在setOnClickListener调用method方法。\n\n在Activity中的使用：\n\n```java\n\npublic class IocActivity extends AppCompatActivity {\n\n    @FindView(R.id.txt_ioc_test)\n    private TextView mTxtTest;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_ioc);\n        ViewInject.bind(this);\n        mTxtTest.setText(\"测试\");\n    }\n\n    @OnClick(id = {R.id.btn_ioc_test, R.id.btn_ioc_test2})\n    public void onClick(View view) {\n        switch (view.getId()) {\n            case R.id.btn_ioc_test:\n                Toast.makeText(this, \"Click1\", Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.btn_ioc_test2:\n                Toast.makeText(this, \"Click2\", Toast.LENGTH_SHORT).show();\n                break;\n        }\n    }\n}\n\n```\n\n以上为运行时注解的简单实现，但是这种方法因为通过一系列反射获取属性、方法等，对性能还是有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。\n\n## 编译时注解\n\nButterKnife源码解析网上已经有很多不错的文章了，例如这篇[ButterKnife源码分析](http://www.jianshu.com/p/0f3f4f7ca505)讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在Android Studio中的使用。\n\n首先介绍下大概的项目结构，如下图所示：\n\n<img src = \"http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png\">\n\n- annotation module: Java library  定义一系列注解。\n- injetc module: Android library  定义注解的接口及调用方法。\n- compiler module: Java library  自定义编译时注解AbstractProcessor在编译期间生成java代码。\n- app: 使用方法。\n\n本篇文章主要为介绍及学习，所以此处仅实现setContentView的编译时注解。\n\n1、声明注解\n\n```java\n\n@Retention(RetentionPolicy.CLASS) //编译时注解\n@Target(ElementType.TYPE) //修饰类\npublic @interface ContentView {\n    int value();\n}\n\n```\n\n2、声明外界接口及方法\n\n声明接口：\n```java\n\npublic interface ContentInjector<T> {\n    void injectContent(T obj, Activity activity); //此处仅用 Activity 参数即可实现文章的 demo\n}\n\n```\n\n提供方法：\n\n```java\n\npublic class ContentViewInject {\n    public static void bind(Activity activity) {//绑定\n        injectContentView(activity);\n    }\n    private static void injectContentView(Activity activity) {\n        Class<? extends Activity> clazz = activity.getClass();\n        try {\n            ContentInjector injector = (ContentInjector) Class.forName(clazz.getName()\n                    + \"$$ViewBinder\").newInstance();\n            injector.injectContent(activity, activity);\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n此处仅为简单的使用，butterknife中的UnBinder解绑，使用Map缓存等暂不考虑。\n\n3、自定义AbstractProcessor，此处需将module设置为Java module才可继承AbstractProcessor。\n\n```java\n\n@AutoService(Processor.class)\n@SupportedAnnotationTypes(\"com.lauzy.ContentView\")\n@SupportedSourceVersion(value = SourceVersion.RELEASE_7)\npublic class ContentViewInjectProcessor extends AbstractProcessor {\n\n    @Override\n    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        String packageName;\n        String className;\n        //遍历每个被ContentView修饰的class文件\n        for (Element element : roundEnvironment.getElementsAnnotatedWith(ContentView.class)) {\n            if (element.getKind() == ElementKind.CLASS) {\n                TypeElement typeElement = (TypeElement) element;\n                PackageElement packageEle = (PackageElement) element.getEnclosingElement();\n                packageName = packageEle.getQualifiedName().toString();//获取包名\n                //因为是ElementKind.CLASS类型，所以可以直接强制转换，获取类名\n                className = typeElement.getSimpleName().toString();\n\n                int layoutId = typeElement.getAnnotation(ContentView.class).value();//获取注解的id\n\t\t\t\t\n\t\t\t\t//拼接Java类的字符串\n                StringBuilder builder = new StringBuilder();\n                builder.append(\"package \").append(packageName).append(\";\\n\");\n                builder.append(\"import android.view.View;\\n\");\n                builder.append(\"import android.app.Activity;\\n\");\n                builder.append(\"import com.freedom.lauzy.inject.ContentInjector;\\n\");\n                builder.append('\\n');\n\n                builder.append(\"public class \").append(className + \"$$ViewBinder\");\n                builder.append(\"<T extends \").append(className).append(\">\");\n                builder.append(\" implements ContentInjector<T>\");\n                builder.append(\" {\\n\");\n                builder.append(\"@Override\\n\")\n                        .append(\"public void injectContent(final T source, Activity activity) {\\n\");\n                builder.append(\"    ((Activity) source).setContentView(\" + layoutId);\n                builder.append(\");\\n\");\n                builder.append(\"}\\n\\n}\\n\");\n\n\n\t\t\t\t//写入Java文件\n                try {\n                    JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(\n                            packageName + \".\" + className + \"$$ViewBinder\",\n                            typeElement);\n                    Writer writer = fileObject.openWriter();\n                    writer.write(builder.toString());\n                    writer.flush();\n                    writer.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.out.println(\"error\");\n                }\n            }\n        }\n        return true;\n    }\n}\n\n```\n\nbutterknife中使用了[javapoet](https://github.com/square/javapoet) 生成Java代码文件\n\n此module的gradle配置如下：\n\n```java\n\napply plugin: 'java'\n\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    compile 'com.google.auto.service:auto-service:1.0-rc2' //google的生成源代码库\n    compile project(':annotation')\n}\n\nsourceCompatibility = \"1.7\"\ntargetCompatibility = \"1.7\"\n\n```\n\n4、app使用\n\napp的gradle配置如下：\n\n```java\n\ndependencies {\n\t...\n    annotationProcessor project(':compiler')\n    compile project(':annotation')\n    compile project(':inject')\n}\n\n```\n\nactivity中使用：\n\n```java\n\n@ContentView(R.layout.activity_ioc)\npublic class IocActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ContentViewInject.bind(this);\n    }\n}\n\n```\n\n这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个\nIocActivity$$ViewBinder 的 Java 文件，代码如下：\n\n```java\n\npackage com.lauzy.freedom.lauzycode.IOC;\nimport android.app.Activity;\nimport com.freedom.lauzy.inject.ContentInjector;\n\npublic class IocActivity$$ViewBinder<T extends IocActivity> implements ContentInjector<T> {\n@Override\npublic void injectContent(final T source, Activity activity) {\n    ((Activity) source).setContentView(2130968606);\n}\n}\n\n```\n\n可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。\n\n1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。\n需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，\n文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。\n\n如下图所示：\n<img src = \"http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png\">\n\n\n\n","slug":"201706IOC2","published":1,"updated":"2017-06-26T14:23:14.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4e8hilv0001n0v119ijcaq3","content":"<p>在上一篇<a href=\"http://lauzy.me/2017/05/09/201706IOC1/\" target=\"_blank\" rel=\"external\">Java注解、反射，安卓IOC（一）</a>中我们知道了注解及反射的用法。<br>在项目开发中，大部分Android开发者都使用过ButterKnife这个通过注解简化代码的框架。部分Android开发者也使用过xUtils这种快速开发的框架。<br>两者均使用到了注解。本篇会分别介绍下其实现机制。</p>\n<h2 id=\"运行时注解\"><a href=\"#运行时注解\" class=\"headerlink\" title=\"运行时注解\"></a>运行时注解</h2><p>首先我们自己简单实现类似xUtils这种运行时注解框架。</p>\n<h3 id=\"绑定View控件\"><a href=\"#绑定View控件\" class=\"headerlink\" title=\"绑定View控件\"></a>绑定View控件</h3><p>创建注解：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//运行时注解</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//Target为属性</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">FindView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>View解析代码：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewInject</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewFinder</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>View view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewFinder</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>View view<span class=\"token punctuation\">,</span> Object obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewFinder</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>ViewFinder finder<span class=\"token punctuation\">,</span> Object obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">injectFields</span><span class=\"token punctuation\">(</span>finder<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">injectMethods</span><span class=\"token punctuation\">(</span>finder<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">injectFields</span><span class=\"token punctuation\">(</span>ViewFinder finder<span class=\"token punctuation\">,</span> Object obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> clazz <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Field<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取所有变量</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Field field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>FindView<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                FindView findView <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>FindView<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取注解</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>findView<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The id can't be -1.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    View view <span class=\"token operator\">=</span> finder<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>findView<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//破坏封装</span>\n                        field<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//设置属性</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的ID赋值给指定方法并调用。</p>\n<h3 id=\"绑定OnClick事件\"><a href=\"#绑定OnClick事件\" class=\"headerlink\" title=\"绑定OnClick事件\"></a>绑定OnClick事件</h3><p>创建注解：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//Target为方法</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">OnClick</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>OnClick事件注入：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">injectMethods</span><span class=\"token punctuation\">(</span>ViewFinder finder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> Object obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Method<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> Method method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>OnClick<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            OnClick onClick <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>OnClick<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> onClick<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    View view <span class=\"token operator\">=</span> finder<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    method<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    view<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token annotation punctuation\">@Override</span>\n                        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>View v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                                method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的ID，将注解的ID赋值给findViewById方法，然后在setOnClickListener调用method方法。</p>\n<p>在Activity中的使用：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IocActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@FindView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>txt_ioc_test<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> TextView mTxtTest<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_ioc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ViewInject<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mTxtTest<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@OnClick</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>btn_ioc_test<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>btn_ioc_test2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>View view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>btn_ioc_test<span class=\"token operator\">:</span>\n                Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Click1\"</span><span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>btn_ioc_test2<span class=\"token operator\">:</span>\n                Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Click2\"</span><span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上为运行时注解的简单实现，但是这种方法因为通过一系列反射获取属性、方法等，对性能还是有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。</p>\n<h2 id=\"编译时注解\"><a href=\"#编译时注解\" class=\"headerlink\" title=\"编译时注解\"></a>编译时注解</h2><p>ButterKnife源码解析网上已经有很多不错的文章了，例如这篇<a href=\"http://www.jianshu.com/p/0f3f4f7ca505\" target=\"_blank\" rel=\"external\">ButterKnife源码分析</a>讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在Android Studio中的使用。</p>\n<p>首先介绍下大概的项目结构，如下图所示：</p>\n<p><img src=\"http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png\"></p>\n<ul>\n<li>annotation module: Java library  定义一系列注解。</li>\n<li>injetc module: Android library  定义注解的接口及调用方法。</li>\n<li>compiler module: Java library  自定义编译时注解AbstractProcessor在编译期间生成java代码。</li>\n<li>app: 使用方法。</li>\n</ul>\n<p>本篇文章主要为介绍及学习，所以此处仅实现setContentView的编译时注解。</p>\n<p>1、声明注解</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>CLASS<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//编译时注解</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//修饰类</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ContentView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2、声明外界接口及方法</p>\n<p>声明接口：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ContentInjector</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">injectContent</span><span class=\"token punctuation\">(</span>T obj<span class=\"token punctuation\">,</span> Activity activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//此处仅用 Activity 参数即可实现文章的 demo</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>提供方法：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContentViewInject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//绑定</span>\n        <span class=\"token function\">injectContentView</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">injectContentView</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span><span class=\"token operator\">></span> clazz <span class=\"token operator\">=</span> activity<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            ContentInjector injector <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ContentInjector<span class=\"token punctuation\">)</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"$$ViewBinder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            injector<span class=\"token punctuation\">.</span><span class=\"token function\">injectContent</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此处仅为简单的使用，butterknife中的UnBinder解绑，使用Map缓存等暂不考虑。</p>\n<p>3、自定义AbstractProcessor，此处需将module设置为Java module才可继承AbstractProcessor。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@AutoService</span><span class=\"token punctuation\">(</span>Processor<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SupportedAnnotationTypes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.lauzy.ContentView\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SupportedSourceVersion</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> SourceVersion<span class=\"token punctuation\">.</span>RELEASE_7<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContentViewInjectProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractProcessor</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>Set<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TypeElement</span><span class=\"token operator\">></span> set<span class=\"token punctuation\">,</span> RoundEnvironment roundEnvironment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String packageName<span class=\"token punctuation\">;</span>\n        String className<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//遍历每个被ContentView修饰的class文件</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Element element <span class=\"token operator\">:</span> roundEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsAnnotatedWith</span><span class=\"token punctuation\">(</span>ContentView<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">getKind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ElementKind<span class=\"token punctuation\">.</span>CLASS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                TypeElement typeElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>TypeElement<span class=\"token punctuation\">)</span> element<span class=\"token punctuation\">;</span>\n                PackageElement packageEle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PackageElement<span class=\"token punctuation\">)</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">getEnclosingElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                packageName <span class=\"token operator\">=</span> packageEle<span class=\"token punctuation\">.</span><span class=\"token function\">getQualifiedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取包名</span>\n                <span class=\"token comment\" spellcheck=\"true\">//因为是ElementKind.CLASS类型，所以可以直接强制转换，获取类名</span>\n                className <span class=\"token operator\">=</span> typeElement<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">int</span> layoutId <span class=\"token operator\">=</span> typeElement<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>ContentView<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取注解的id</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//拼接Java类的字符串</span>\n                StringBuilder builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"package \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>packageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\";\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"import android.view.View;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"import android.app.Activity;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"import com.freedom.lauzy.inject.ContentInjector;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public class \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>className <span class=\"token operator\">+</span> <span class=\"token string\">\"$$ViewBinder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;T extends \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" implements ContentInjector&lt;T>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" {\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@Override\\n\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public void injectContent(final T source, Activity activity) {\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    ((Activity) source).setContentView(\"</span> <span class=\"token operator\">+</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\");\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\\n\\n}\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n                <span class=\"token comment\" spellcheck=\"true\">//写入Java文件</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    JavaFileObject fileObject <span class=\"token operator\">=</span> processingEnv<span class=\"token punctuation\">.</span><span class=\"token function\">getFiler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSourceFile</span><span class=\"token punctuation\">(</span>\n                            packageName <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> className <span class=\"token operator\">+</span> <span class=\"token string\">\"$$ViewBinder\"</span><span class=\"token punctuation\">,</span>\n                            typeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Writer writer <span class=\"token operator\">=</span> fileObject<span class=\"token punctuation\">.</span><span class=\"token function\">openWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    writer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    writer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>butterknife中使用了<a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"external\">javapoet</a> 生成Java代码文件</p>\n<p>此module的gradle配置如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\napply plugin<span class=\"token operator\">:</span> <span class=\"token string\">'java'</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    compile <span class=\"token function\">fileTree</span><span class=\"token punctuation\">(</span>include<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*.jar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dir<span class=\"token operator\">:</span> <span class=\"token string\">'libs'</span><span class=\"token punctuation\">)</span>\n    compile <span class=\"token string\">'com.google.auto.service:auto-service:1.0-rc2'</span> <span class=\"token comment\" spellcheck=\"true\">//google的生成源代码库</span>\n    compile <span class=\"token function\">project</span><span class=\"token punctuation\">(</span><span class=\"token string\">':annotation'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nsourceCompatibility <span class=\"token operator\">=</span> <span class=\"token string\">\"1.7\"</span>\ntargetCompatibility <span class=\"token operator\">=</span> <span class=\"token string\">\"1.7\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4、app使用</p>\n<p>app的gradle配置如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    annotationProcessor <span class=\"token function\">project</span><span class=\"token punctuation\">(</span><span class=\"token string\">':compiler'</span><span class=\"token punctuation\">)</span>\n    compile <span class=\"token function\">project</span><span class=\"token punctuation\">(</span><span class=\"token string\">':annotation'</span><span class=\"token punctuation\">)</span>\n    compile <span class=\"token function\">project</span><span class=\"token punctuation\">(</span><span class=\"token string\">':inject'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>activity中使用：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@ContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_ioc<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IocActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ContentViewInject<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个<br>IocActivity$$ViewBinder 的 Java 文件，代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>lauzy<span class=\"token punctuation\">.</span>freedom<span class=\"token punctuation\">.</span>lauzycode<span class=\"token punctuation\">.</span>IOC<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>Activity<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>freedom<span class=\"token punctuation\">.</span>lauzy<span class=\"token punctuation\">.</span>inject<span class=\"token punctuation\">.</span>ContentInjector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IocActivity</span>$$ViewBinder<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IocActivity</span><span class=\"token operator\">></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ContentInjector</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">injectContent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> T source<span class=\"token punctuation\">,</span> Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Activity<span class=\"token punctuation\">)</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token number\">2130968606</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。</p>\n<p>1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。<br>需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，<br>文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。</p>\n<p>如下图所示：<br><img src=\"http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png\"></p>\n","excerpt":"","more":"<p>在上一篇<a href=\"http://lauzy.me/2017/05/09/201706IOC1/\">Java注解、反射，安卓IOC（一）</a>中我们知道了注解及反射的用法。<br>在项目开发中，大部分Android开发者都使用过ButterKnife这个通过注解简化代码的框架。部分Android开发者也使用过xUtils这种快速开发的框架。<br>两者均使用到了注解。本篇会分别介绍下其实现机制。</p>\n<h2 id=\"运行时注解\"><a href=\"#运行时注解\" class=\"headerlink\" title=\"运行时注解\"></a>运行时注解</h2><p>首先我们自己简单实现类似xUtils这种运行时注解框架。</p>\n<h3 id=\"绑定View控件\"><a href=\"#绑定View控件\" class=\"headerlink\" title=\"绑定View控件\"></a>绑定View控件</h3><p>创建注解：</p>\n<pre><code class=\"java\">\n@Retention(RetentionPolicy.RUNTIME)//运行时注解\n@Target(ElementType.FIELD)//Target为属性\npublic @interface FindView {\n    int value() default -1;\n}\n</code></pre>\n<p>View解析代码：</p>\n<pre><code class=\"java\">\npublic class ViewInject {\n\n    public static void bind(Activity activity) {\n        inject(new ViewFinder(activity), activity);\n    }\n\n    public static void bind(View view) {\n        inject(new ViewFinder(view), view);\n    }\n\n    public static void bind(View view, Object obj) {\n        inject(new ViewFinder(view), obj);\n    }\n\n    private static void inject(ViewFinder finder, Object obj) {\n        injectFields(finder, obj);\n        injectMethods(finder, obj);\n    }\n\n    private static void injectFields(ViewFinder finder, Object obj) {\n        Class&lt;?&gt; clazz = obj.getClass();\n        Field[] fields = clazz.getDeclaredFields();//获取所有变量\n        for (Field field : fields) {\n            if (field.isAnnotationPresent(FindView.class)) {\n                FindView findView = field.getAnnotation(FindView.class);//获取注解\n                if (findView.value() &lt; 0) {\n                    throw new IllegalArgumentException(&quot;The id can&#39;t be -1.&quot;);\n                } else {\n                    View view = finder.findViewById(findView.value());\n                    try {\n                        field.setAccessible(true);//破坏封装\n                        field.set(obj, view); //设置属性\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<p>主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的ID赋值给指定方法并调用。</p>\n<h3 id=\"绑定OnClick事件\"><a href=\"#绑定OnClick事件\" class=\"headerlink\" title=\"绑定OnClick事件\"></a>绑定OnClick事件</h3><p>创建注解：</p>\n<pre><code class=\"java\">\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD) //Target为方法\npublic @interface OnClick {\n    int[] id();\n}\n</code></pre>\n<p>OnClick事件注入：</p>\n<pre><code class=\"java\">\nprivate static void injectMethods(ViewFinder finder, final Object obj) {\n    Method[] methods = obj.getClass().getDeclaredMethods();\n    for (final Method method : methods) {\n        if (method.isAnnotationPresent(OnClick.class)) {\n            OnClick onClick = method.getAnnotation(OnClick.class);\n            if (onClick.id().length != 0) {\n                for (int i : onClick.id()) {\n                    View view = finder.findViewById(i);\n                    method.setAccessible(true);\n                    view.setOnClickListener(new View.OnClickListener() {\n                        @Override\n                        public void onClick(View v) {\n                            try {\n                                method.invoke(obj, v);\n                            } catch (IllegalAccessException e) {\n                                e.printStackTrace();\n                            } catch (InvocationTargetException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<p>主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的ID，将注解的ID赋值给findViewById方法，然后在setOnClickListener调用method方法。</p>\n<p>在Activity中的使用：</p>\n<pre><code class=\"java\">\npublic class IocActivity extends AppCompatActivity {\n\n    @FindView(R.id.txt_ioc_test)\n    private TextView mTxtTest;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_ioc);\n        ViewInject.bind(this);\n        mTxtTest.setText(&quot;测试&quot;);\n    }\n\n    @OnClick(id = {R.id.btn_ioc_test, R.id.btn_ioc_test2})\n    public void onClick(View view) {\n        switch (view.getId()) {\n            case R.id.btn_ioc_test:\n                Toast.makeText(this, &quot;Click1&quot;, Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.btn_ioc_test2:\n                Toast.makeText(this, &quot;Click2&quot;, Toast.LENGTH_SHORT).show();\n                break;\n        }\n    }\n}\n</code></pre>\n<p>以上为运行时注解的简单实现，但是这种方法因为通过一系列反射获取属性、方法等，对性能还是有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。</p>\n<h2 id=\"编译时注解\"><a href=\"#编译时注解\" class=\"headerlink\" title=\"编译时注解\"></a>编译时注解</h2><p>ButterKnife源码解析网上已经有很多不错的文章了，例如这篇<a href=\"http://www.jianshu.com/p/0f3f4f7ca505\">ButterKnife源码分析</a>讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在Android Studio中的使用。</p>\n<p>首先介绍下大概的项目结构，如下图所示：</p>\n<p><img src = \"http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png\"></p>\n<ul>\n<li>annotation module: Java library  定义一系列注解。</li>\n<li>injetc module: Android library  定义注解的接口及调用方法。</li>\n<li>compiler module: Java library  自定义编译时注解AbstractProcessor在编译期间生成java代码。</li>\n<li>app: 使用方法。</li>\n</ul>\n<p>本篇文章主要为介绍及学习，所以此处仅实现setContentView的编译时注解。</p>\n<p>1、声明注解</p>\n<pre><code class=\"java\">\n@Retention(RetentionPolicy.CLASS) //编译时注解\n@Target(ElementType.TYPE) //修饰类\npublic @interface ContentView {\n    int value();\n}\n</code></pre>\n<p>2、声明外界接口及方法</p>\n<p>声明接口：</p>\n<pre><code class=\"java\">\npublic interface ContentInjector&lt;T&gt; {\n    void injectContent(T obj, Activity activity); //此处仅用 Activity 参数即可实现文章的 demo\n}\n</code></pre>\n<p>提供方法：</p>\n<pre><code class=\"java\">\npublic class ContentViewInject {\n    public static void bind(Activity activity) {//绑定\n        injectContentView(activity);\n    }\n    private static void injectContentView(Activity activity) {\n        Class&lt;? extends Activity&gt; clazz = activity.getClass();\n        try {\n            ContentInjector injector = (ContentInjector) Class.forName(clazz.getName()\n                    + &quot;$$ViewBinder&quot;).newInstance();\n            injector.injectContent(activity, activity);\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>\n<p>此处仅为简单的使用，butterknife中的UnBinder解绑，使用Map缓存等暂不考虑。</p>\n<p>3、自定义AbstractProcessor，此处需将module设置为Java module才可继承AbstractProcessor。</p>\n<pre><code class=\"java\">\n@AutoService(Processor.class)\n@SupportedAnnotationTypes(&quot;com.lauzy.ContentView&quot;)\n@SupportedSourceVersion(value = SourceVersion.RELEASE_7)\npublic class ContentViewInjectProcessor extends AbstractProcessor {\n\n    @Override\n    public boolean process(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment) {\n        String packageName;\n        String className;\n        //遍历每个被ContentView修饰的class文件\n        for (Element element : roundEnvironment.getElementsAnnotatedWith(ContentView.class)) {\n            if (element.getKind() == ElementKind.CLASS) {\n                TypeElement typeElement = (TypeElement) element;\n                PackageElement packageEle = (PackageElement) element.getEnclosingElement();\n                packageName = packageEle.getQualifiedName().toString();//获取包名\n                //因为是ElementKind.CLASS类型，所以可以直接强制转换，获取类名\n                className = typeElement.getSimpleName().toString();\n\n                int layoutId = typeElement.getAnnotation(ContentView.class).value();//获取注解的id\n\n                //拼接Java类的字符串\n                StringBuilder builder = new StringBuilder();\n                builder.append(&quot;package &quot;).append(packageName).append(&quot;;\\n&quot;);\n                builder.append(&quot;import android.view.View;\\n&quot;);\n                builder.append(&quot;import android.app.Activity;\\n&quot;);\n                builder.append(&quot;import com.freedom.lauzy.inject.ContentInjector;\\n&quot;);\n                builder.append(&#39;\\n&#39;);\n\n                builder.append(&quot;public class &quot;).append(className + &quot;$$ViewBinder&quot;);\n                builder.append(&quot;&lt;T extends &quot;).append(className).append(&quot;&gt;&quot;);\n                builder.append(&quot; implements ContentInjector&lt;T&gt;&quot;);\n                builder.append(&quot; {\\n&quot;);\n                builder.append(&quot;@Override\\n&quot;)\n                        .append(&quot;public void injectContent(final T source, Activity activity) {\\n&quot;);\n                builder.append(&quot;    ((Activity) source).setContentView(&quot; + layoutId);\n                builder.append(&quot;);\\n&quot;);\n                builder.append(&quot;}\\n\\n}\\n&quot;);\n\n\n                //写入Java文件\n                try {\n                    JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(\n                            packageName + &quot;.&quot; + className + &quot;$$ViewBinder&quot;,\n                            typeElement);\n                    Writer writer = fileObject.openWriter();\n                    writer.write(builder.toString());\n                    writer.flush();\n                    writer.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.out.println(&quot;error&quot;);\n                }\n            }\n        }\n        return true;\n    }\n}\n</code></pre>\n<p>butterknife中使用了<a href=\"https://github.com/square/javapoet\">javapoet</a> 生成Java代码文件</p>\n<p>此module的gradle配置如下：</p>\n<pre><code class=\"java\">\napply plugin: &#39;java&#39;\n\ndependencies {\n    compile fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;)\n    compile &#39;com.google.auto.service:auto-service:1.0-rc2&#39; //google的生成源代码库\n    compile project(&#39;:annotation&#39;)\n}\n\nsourceCompatibility = &quot;1.7&quot;\ntargetCompatibility = &quot;1.7&quot;\n</code></pre>\n<p>4、app使用</p>\n<p>app的gradle配置如下：</p>\n<pre><code class=\"java\">\ndependencies {\n    ...\n    annotationProcessor project(&#39;:compiler&#39;)\n    compile project(&#39;:annotation&#39;)\n    compile project(&#39;:inject&#39;)\n}\n</code></pre>\n<p>activity中使用：</p>\n<pre><code class=\"java\">\n@ContentView(R.layout.activity_ioc)\npublic class IocActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ContentViewInject.bind(this);\n    }\n}\n</code></pre>\n<p>这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个<br>IocActivity$$ViewBinder 的 Java 文件，代码如下：</p>\n<pre><code class=\"java\">\npackage com.lauzy.freedom.lauzycode.IOC;\nimport android.app.Activity;\nimport com.freedom.lauzy.inject.ContentInjector;\n\npublic class IocActivity$$ViewBinder&lt;T extends IocActivity&gt; implements ContentInjector&lt;T&gt; {\n@Override\npublic void injectContent(final T source, Activity activity) {\n    ((Activity) source).setContentView(2130968606);\n}\n}\n</code></pre>\n<p>可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。</p>\n<p>1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。<br>需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，<br>文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。</p>\n<p>如下图所示：<br><img src = \"http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj4ds1cbr00002kr6cfdco90b","category_id":"cj42wmfc70004zov1m79tmz8y","_id":"cj4ds1cc600042kr69srzsg4a"},{"post_id":"cj4ds1cbr00012kr6d9sds8n1","category_id":"cj42wmfc70004zov1m79tmz8y","_id":"cj4ds1cc600072kr6tjei6rt2"},{"post_id":"cj4ds1cbr00032kr6u6hsldvv","category_id":"cj42wmfc70004zov1m79tmz8y","_id":"cj4ds1cc600092kr6ic3rzzdn"},{"post_id":"cj4e8hiln0000n0v1zvymu2fy","category_id":"cj42wmfc70004zov1m79tmz8y","_id":"cj4e8hilz0003n0v154dnjcjr"},{"post_id":"cj4e8hilv0001n0v119ijcaq3","category_id":"cj42wmfc70004zov1m79tmz8y","_id":"cj4e8him00005n0v1r7itt71m"}],"PostTag":[{"post_id":"cj4ds1cbr00002kr6cfdco90b","tag_id":"cj42wmfc70005zov12kec27pj","_id":"cj4ds1cbr00022kr67ne4t5ul"},{"post_id":"cj4ds1cbr00012kr6d9sds8n1","tag_id":"cj42wmfcn000izov19pzf11xi","_id":"cj4ds1cc600052kr611s67s80"},{"post_id":"cj4ds1cbr00032kr6u6hsldvv","tag_id":"cj42wmfcn000ezov1ubi0deuf","_id":"cj4ds1cc600082kr63ho1p2kt"},{"post_id":"cj4e8hiln0000n0v1zvymu2fy","tag_id":"cj42wmfc7000azov1o5c0rejm","_id":"cj4e8hily0002n0v1kdafjers"},{"post_id":"cj4e8hilv0001n0v119ijcaq3","tag_id":"cj42wmfc7000azov1o5c0rejm","_id":"cj4e8hilz0004n0v1avqb2ebe"}],"Tag":[{"name":"自定义View","_id":"cj42wmfc70005zov12kec27pj"},{"name":"Android 框架","_id":"cj42wmfc7000azov1o5c0rejm"},{"name":"Android 交互","_id":"cj42wmfcn000ezov1ubi0deuf"},{"name":"Android Tips","_id":"cj42wmfcn000izov19pzf11xi"}]}}