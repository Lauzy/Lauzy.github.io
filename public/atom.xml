<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lauzy</title>
  <subtitle>叶底藏花一度，梦里踏雪几回。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lauzy.github.io/"/>
  <updated>2017-08-15T02:58:52.575Z</updated>
  <id>http://lauzy.github.io/</id>
  
  <author>
    <name>Lauzy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android自定义View：让播放、暂停按钮优雅的过渡</title>
    <link href="http://lauzy.github.io/2017/08/12/201708PlayPauseView/"/>
    <id>http://lauzy.github.io/2017/08/12/201708PlayPauseView/</id>
    <published>2017-08-12T11:42:27.000Z</published>
    <updated>2017-08-15T02:58:52.575Z</updated>
    
    <content type="html"><![CDATA[<p>最近想写个音乐播放器，偶然看到轻听这款播放器的播放和暂停按钮，在切换过程中的动画很是吸引我。本着造轮子（其实是 github 上边没找到）的想法，就花了点时间撸出来了这个效果。</p>
<p>效果就是下边这个样子：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170812PlayPauseView.gif" width="200" height="210" alt="效果图"></p>
<a id="more"></a>
<p>下边说下实现方法，中间也踩了一些坑。</p>
<h2 id="测量及初始化"><a href="#测量及初始化" class="headerlink" title="测量及初始化"></a>测量及初始化</h2><p>首先要确实View的宽高，在这里由于是圆形按钮，所以设置宽高相等，onMeasure()方法中设置下即可：</p>
<pre class="line-numbers language-java"><code class="language-java">
         mWidth <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mHeight <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> widthMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> heightMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>widthMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token operator">:</span>
                mWidth <span class="token operator">=</span> mHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token operator">:</span>
                <span class="token keyword">float</span> density <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>density<span class="token punctuation">;</span>
                mWidth <span class="token operator">=</span> mHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> density<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认50dp</span>
                <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后画出底部的圆形</p>
<pre class="line-numbers language-java"><code class="language-java">
 canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>mWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> mHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> mRadius<span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="计算Path"><a href="#计算Path" class="headerlink" title="计算Path"></a>计算Path</h2><p>1、初始化完毕后，怎么实现两个竖条到一个三角形的过渡呢？这里首先想到的就是自定义 View 常用的 drawPath 方法，抛开动画不谈，整个 View 变化过程其实就是两个矩形变成两个直角三角形的过程。</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog001.png" alt="实现"></p>
<p>就是这个样子。知道大体的思路，怎么搞呢，当然是开车了。</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/FACE001.gif"></p>
<p>就是 canvas.drawPath();</p>
<p>首先计算暂停时两个矩形的各个坐标位置：</p>
<pre class="line-numbers language-java"><code class="language-java">
         <span class="token keyword">float</span> distance <span class="token operator">=</span> mGapWidth<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//暂停时左右两边矩形距离</span>
        <span class="token keyword">float</span> barWidth <span class="token operator">=</span> mRectWidth <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> distance <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//一个矩形的宽度</span>
        <span class="token keyword">float</span> leftLeftTop <span class="token operator">=</span> barWidth<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//左边矩形左上角</span>

        <span class="token keyword">float</span> rightLeftTop <span class="token operator">=</span> barWidth <span class="token operator">+</span> distance<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//右边矩形左上角</span>
        <span class="token keyword">float</span> rightRightTop <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> barWidth <span class="token operator">+</span> distance<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//右边矩形右上角</span>
        <span class="token keyword">float</span> rightRightBottom <span class="token operator">=</span> rightRightTop<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//右边矩形右下角</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>bottom 的话直接加上矩形的高度即可。</p>
<pre class="line-numbers language-java"><code class="language-java">
            mLeftPath<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mLeftPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>leftLeftTop<span class="token punctuation">,</span> mRectHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mLeftPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>barWidth<span class="token punctuation">,</span> mRectHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mLeftPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>barWidth<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mLeftPath<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            mRightPath<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>rightLeftTop<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mRightPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>rightLeftTop<span class="token punctuation">,</span> mRectHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mRightPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>rightRightBottom<span class="token punctuation">,</span> mRectHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mRightPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>rightRightTop<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mRightPath<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样两个竖条就出来了。</p>
<p>2、在一开始写的时候就写了这么多计算的方法，但是这时候矩形的边角会超出 View 的范围，所以后来计算了一波位置：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog02.png" alt="计算过程2"></p>
<p>如上图所示，这样就需要再更改一些参数：</p>
<p>首先定义出来这个矩形，计算下宽高：</p>
<pre class="line-numbers language-java"><code class="language-java">
         <span class="token keyword">float</span> space <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>mRadius <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        mRectLT <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>mRadius <span class="token operator">-</span> space<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> rectRB <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>mRadius <span class="token operator">+</span> space<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mRect<span class="token punctuation">.</span>top <span class="token operator">=</span> mRectLT<span class="token punctuation">;</span>
        mRect<span class="token punctuation">.</span>bottom <span class="token operator">=</span> rectRB<span class="token punctuation">;</span>
        mRect<span class="token punctuation">.</span>left <span class="token operator">=</span> mRectLT<span class="token punctuation">;</span>
        mRect<span class="token punctuation">.</span>right <span class="token operator">=</span> rectRB<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后只用在 确定 path 的路线时更改下坐标就可以了：</p>
<pre class="line-numbers language-java"><code class="language-java">
             mLeftPath<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>mRectLT<span class="token punctuation">,</span> mRectLT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mLeftPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>leftLeftTop <span class="token operator">+</span> mRectLT<span class="token punctuation">,</span> mRectHeight <span class="token operator">+</span> mRectLT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mLeftPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>barWidth <span class="token operator">+</span> mRectLT<span class="token punctuation">,</span> mRectHeight <span class="token operator">+</span> mRectLT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mLeftPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>barWidth <span class="token operator">+</span> mRectLT<span class="token punctuation">,</span> mRectLT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mLeftPath<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            mRightPath<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>rightLeftTop <span class="token operator">+</span> mRectLT<span class="token punctuation">,</span> mRectLT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mRightPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>rightLeftTop <span class="token operator">+</span> mRectLT<span class="token punctuation">,</span> mRectHeight <span class="token operator">+</span> mRectLT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mRightPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>rightRightBottom <span class="token operator">+</span> mRectLT<span class="token punctuation">,</span> mRectHeight <span class="token operator">+</span> mRectLT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mRightPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>rightRightTop <span class="token operator">+</span> mRectLT<span class="token punctuation">,</span> mRectLT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mRightPath<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这时候画出来两个 Path，暂停按钮就完美的呈现了：</p>
<pre class="line-numbers language-java"><code class="language-java">
        canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>mLeftPath<span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>
        canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>mRightPath<span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如下图这样：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog01.png" alt="计算过程1"></p>
<h2 id="动画实现"><a href="#动画实现" class="headerlink" title="动画实现"></a>动画实现</h2><p>画完暂停按钮后，怎么让他动画变成三角形呢？一开始我想根据一些宽高的属性来指定动画的变化值，然后更新过程中再画出来，但是计算过程中发现涉及动画的矩形宽度都是从原始的大小到0过渡的，那统一的使用一个参数确定会不会更好点呢？当然会了，从1倍到0变化即可。</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/FACE002.jpg"></p>
<p>这时候就可以设置动画属性了：</p>
<pre class="line-numbers language-java"><code class="language-java">
        ValueAnimator valueAnimator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        valueAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        valueAnimator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mProgress <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> animation<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后根据 progress 在更新View的过程中来更改矩形的宽高值：</p>
<pre class="line-numbers language-java"><code class="language-java">
        <span class="token keyword">float</span> distance <span class="token operator">=</span> mGapWidth <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> mProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//暂停时左右两边矩形距离</span>
        <span class="token keyword">float</span> barWidth <span class="token operator">=</span> mRectWidth <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> distance <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//一个矩形的宽度</span>
        <span class="token keyword">float</span> leftLeftTop <span class="token operator">=</span> barWidth <span class="token operator">*</span> mProgress<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//左边矩形左上角</span>

        <span class="token keyword">float</span> rightLeftTop <span class="token operator">=</span> barWidth <span class="token operator">+</span> distance<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//右边矩形左上角</span>
        <span class="token keyword">float</span> rightRightTop <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> barWidth <span class="token operator">+</span> distance<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//右边矩形右上角</span>
        <span class="token keyword">float</span> rightRightBottom <span class="token operator">=</span> rightRightTop <span class="token operator">-</span> barWidth <span class="token operator">*</span> mProgress<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//右边矩形右下角</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样便可以实现两个矩形到三角形的过渡了，执行动画结束后便是这个样子：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog03.png" alt="计算过程3"></p>
<p>两个矩形变成三角形之后，只需要画布旋转一下，两个暂停按钮到播放按钮的动画已经可以执行了：</p>
<pre class="line-numbers language-java"><code class="language-java">
canvas<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>rotation<span class="token punctuation">,</span> mWidth <span class="token operator">/</span> <span class="token number">2f</span><span class="token punctuation">,</span> mHeight <span class="token operator">/</span> <span class="token number">2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>到这里基本上已经结束了，但是写完使用的时候总觉得位置有点不对劲，后来发现确实有问题：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog07.png" alt="计算过程3"></p>
<p>如图所示，旋转过后 A 和 C 本来是紧靠着圆周的，而 B 距离圆周还有一定的距离。所以需要将其位移 x 的距离，让 OC 的长度等于 BO 的长度。此时圆心O也是三角形的外心。那么此时可以计算出OF的距离，公式如下：</p>
<p>√（( r / √2 ) ^ 2 + OF ^ 2） = √2 * r - OF</p>
<p>得出 OF 的长度为： 3 <em> √2 </em> r / 8</p>
<p>那么原矩形宽度的一半减去 OF 的值即为右移的距离，计算可得，右移的距离为 √2 * r / 8 用 Java 表示即</p>
<pre class="line-numbers language-java"><code class="language-java">radius <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8f</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>换算为矩形的高度即</p>
<pre class="line-numbers language-java"><code class="language-java">
mRectHeight <span class="token operator">/</span> <span class="token number">8f</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后在画布位移一下即可：</p>
<pre class="line-numbers language-java"><code class="language-java">
canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>mRectHeight <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8f</span> <span class="token operator">*</span> mProgress<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上边几个步骤写完，整体效果已经实现了。后来又设置了一系列自定义的参数方便使用：</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token operator">&lt;</span>declare<span class="token operator">-</span>styleable name<span class="token operator">=</span><span class="token string">"PlayPauseView"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>attr name<span class="token operator">=</span><span class="token string">"bg_color"</span> format<span class="token operator">=</span><span class="token string">"color"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>attr name<span class="token operator">=</span><span class="token string">"btn_color"</span> format<span class="token operator">=</span><span class="token string">"color"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>attr name<span class="token operator">=</span><span class="token string">"gap_width"</span> format<span class="token operator">=</span><span class="token string">"float"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>attr name<span class="token operator">=</span><span class="token string">"space_padding"</span> format<span class="token operator">=</span><span class="token string">"float"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>attr name<span class="token operator">=</span><span class="token string">"anim_duration"</span> format<span class="token operator">=</span><span class="token string">"integer"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>attr name<span class="token operator">=</span><span class="token string">"anim_direction"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">enum</span> name<span class="token operator">=</span><span class="token string">"positive"</span> value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">enum</span> name<span class="token operator">=</span><span class="token string">"negative"</span> value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>attr<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>declare<span class="token operator">-</span>styleable<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所有代码都已经上传到 <a href="https://github.com/Lauzy" target="_blank" rel="external">我的Github</a> 上边了，<a href="https://github.com/Lauzy/PlayPauseView" target="_blank" rel="external">点击可查看</a>，希望提出问题相互讨论，随便给个 Star 再好不过了。<br>有问题交流可加QQ群 661614986 ，欢迎讨论。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想写个音乐播放器，偶然看到轻听这款播放器的播放和暂停按钮，在切换过程中的动画很是吸引我。本着造轮子（其实是 github 上边没找到）的想法，就花了点时间撸出来了这个效果。&lt;/p&gt;
&lt;p&gt;效果就是下边这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oop6dcmck.bkt.clouddn.com/20170812PlayPauseView.gif&quot; width = &quot;200&quot; height = &quot;210&quot; alt=&quot;效果图&quot;/&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lauzy.github.io/categories/Android/"/>
    
    
      <category term="Android 自定义View" scheme="http://lauzy.github.io/tags/Android-%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>Java注解、反射，安卓IOC（二）</title>
    <link href="http://lauzy.github.io/2017/05/10/201706IOC2/"/>
    <id>http://lauzy.github.io/2017/05/10/201706IOC2/</id>
    <published>2017-05-09T16:00:00.000Z</published>
    <updated>2017-08-15T01:51:00.638Z</updated>
    
    <content type="html"><![CDATA[<p>在项目开发中，大部分 Android 开发者都使用过 ButterKnife 这个通过注解简化代码的框架。部分 Android 开发者也使用过 xUtils 这种快速开发的框架。<br>两者均使用到了注解。在上一篇 <a href="http://lauzy.me/2017/05/09/201706IOC1/" target="_blank" rel="external">Java注解、反射，安卓IOC（一）</a> 中我们知道了注解及反射的用法。本篇会分别介绍下其实现机制。</p>
<h2 id="运行时注解"><a href="#运行时注解" class="headerlink" title="运行时注解"></a>运行时注解</h2><p>首先我们自己简单实现类似 xUtils 这种运行时注解框架。</p>
<h3 id="绑定-View-控件"><a href="#绑定-View-控件" class="headerlink" title="绑定 View 控件"></a>绑定 View 控件</h3><p>创建注解：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//运行时注解</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Target为属性</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">FindView</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>View解析代码：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewInject</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewFinder</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewFinder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewFinder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>ViewFinder finder<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">injectFields</span><span class="token punctuation">(</span>finder<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">injectMethods</span><span class="token punctuation">(</span>finder<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">injectFields</span><span class="token punctuation">(</span>ViewFinder finder<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取所有变量</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>FindView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                FindView findView <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>FindView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取注解</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>findView<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"The id can't be -1."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    View view <span class="token operator">=</span> finder<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>findView<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//破坏封装</span>
                        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置属性</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的 ID 赋值给指定方法并调用。</p>
<h3 id="绑定-OnClick-事件"><a href="#绑定-OnClick-事件" class="headerlink" title="绑定 OnClick 事件"></a>绑定 OnClick 事件</h3><p>创建注解：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Target为方法</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">OnClick</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>OnClick 事件注入：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">injectMethods</span><span class="token punctuation">(</span>ViewFinder finder<span class="token punctuation">,</span> <span class="token keyword">final</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>OnClick<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            OnClick onClick <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>OnClick<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>onClick<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> onClick<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    View view <span class="token operator">=</span> finder<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的 ID ，将注解的 ID 赋值给 findViewById 方法，然后在 setOnClickListener 调用 method 方法。</p>
<p>在 Activity 中的使用：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IocActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@FindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>txt_ioc_test<span class="token punctuation">)</span>
    <span class="token keyword">private</span> TextView mTxtTest<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_ioc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ViewInject<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mTxtTest<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token punctuation">{</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_ioc_test<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_ioc_test2<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_ioc_test<span class="token operator">:</span>
                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Click1"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_ioc_test2<span class="token operator">:</span>
                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Click2"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上为运行时注解的简单实现，即 xUtils 使用的注解方法。但是这种方法因为通过一系列反射获取属性、方法等，对性能会有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。</p>
<h2 id="编译时注解"><a href="#编译时注解" class="headerlink" title="编译时注解"></a>编译时注解</h2><p>ButterKnife 源码解析网上已经有很多不错的文章了，例如这篇 <a href="http://www.jianshu.com/p/0f3f4f7ca505" target="_blank" rel="external">ButterKnife源码分析</a> 讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在 Android Studio 中的使用。</p>
<p>首先介绍下大概的项目结构，如下图所示：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png"></p>
<ul>
<li>annotation module: Java library  - 定义一系列注解。</li>
<li>injetc module: Android library  - 定义注解的接口及调用方法。</li>
<li>compiler module: Java library  - 自定义编译时注解 AbstractProcessor 在编译期间生成 java 代码。</li>
<li>app: 使用方法。</li>
</ul>
<p>本篇文章主要为介绍及学习，所以此处仅实现 setContentView 的编译时注解。</p>
<p>1、声明注解</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//编译时注解</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//修饰类</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ContentView</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、声明外界接口及方法</p>
<p>声明接口：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ContentInjector</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">injectContent</span><span class="token punctuation">(</span>T obj<span class="token punctuation">,</span> Activity activity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处仅用 Activity 参数即可实现文章的 demo</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>提供方法：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContentViewInject</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//绑定</span>
        <span class="token function">injectContentView</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">injectContentView</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token operator">></span> clazz <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            ContentInjector injector <span class="token operator">=</span> <span class="token punctuation">(</span>ContentInjector<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">"$$ViewBinder"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            injector<span class="token punctuation">.</span><span class="token function">injectContent</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上代码为简单使用，butterknife 中的 UnBinder 解绑，使用 Map 缓存等暂不考虑。<br>此处的 Class.forName(“”) 以及 class.newInstance() 会对性能略有影响，butterknife 在此进行了 map 缓存优化。</p>
<p>3、自定义 AbstractProcessor，此处需将 module 设置为 Java library 才可继承 AbstractProcessor。</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token annotation punctuation">@AutoService</span><span class="token punctuation">(</span>Processor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SupportedSourceVersion</span><span class="token punctuation">(</span>value <span class="token operator">=</span> SourceVersion<span class="token punctuation">.</span>RELEASE_7<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContentViewInjectProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProcessor</span> <span class="token punctuation">{</span>


    <span class="token comment" spellcheck="true">//可用 @SupportedAnnotationTypes("com.lauzy.ContentView") 注解 ContentViewInjectProcessor 代替</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getSupportedAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> supportTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        supportTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ContentView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> supportTypes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token operator">></span> set<span class="token punctuation">,</span> RoundEnvironment roundEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String packageName<span class="token punctuation">;</span>
        String className<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//遍历每个被 ContentView 修饰的 class 文件</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element element <span class="token operator">:</span> roundEnvironment<span class="token punctuation">.</span><span class="token function">getElementsAnnotatedWith</span><span class="token punctuation">(</span>ContentView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ElementKind<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                TypeElement typeElement <span class="token operator">=</span> <span class="token punctuation">(</span>TypeElement<span class="token punctuation">)</span> element<span class="token punctuation">;</span>
                PackageElement packageEle <span class="token operator">=</span> <span class="token punctuation">(</span>PackageElement<span class="token punctuation">)</span> element<span class="token punctuation">.</span><span class="token function">getEnclosingElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                packageName <span class="token operator">=</span> packageEle<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取包名</span>
                <span class="token comment" spellcheck="true">//因为是 ElementKind.CLASS 类型，所以可以直接强制转换，获取类名</span>
                className <span class="token operator">=</span> typeElement<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">int</span> layoutId <span class="token operator">=</span> typeElement<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ContentView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取注解的 id</span>

                <span class="token comment" spellcheck="true">//拼接 Jav a类的字符串</span>
                StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"package "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">";\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"import android.view.View;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"import android.app.Activity;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"import com.freedom.lauzy.inject.ContentInjector;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"public class "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>className <span class="token operator">+</span> <span class="token string">"$$ViewBinder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;T extends "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" implements ContentInjector&lt;T>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" {\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"@Override\n"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"public void injectContent(final T source, Activity activity) {\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    ((Activity) source).setContentView("</span> <span class="token operator">+</span> layoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">");\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"}\n\n}\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


                <span class="token comment" spellcheck="true">//写入 Java 文件</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    JavaFileObject fileObject <span class="token operator">=</span> processingEnv<span class="token punctuation">.</span><span class="token function">getFiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createSourceFile</span><span class="token punctuation">(</span>
                            packageName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"$$ViewBinder"</span><span class="token punctuation">,</span>
                            typeElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Writer writer <span class="token operator">=</span> fileObject<span class="token punctuation">.</span><span class="token function">openWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>butterknife 中使用了 <a href="https://github.com/square/javapoet" target="_blank" rel="external">javapoet</a> 生成 Java 代码文件</p>
<p>此 module 的 gradle 配置如下：</p>
<pre class="line-numbers language-java"><code class="language-java">
apply plugin<span class="token operator">:</span> <span class="token string">'java'</span>

dependencies <span class="token punctuation">{</span>
    compile <span class="token function">fileTree</span><span class="token punctuation">(</span>include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dir<span class="token operator">:</span> <span class="token string">'libs'</span><span class="token punctuation">)</span>
    compile <span class="token string">'com.google.auto.service:auto-service:1.0-rc2'</span> <span class="token comment" spellcheck="true">// google 的生成源代码库</span>
    compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':annotation'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

sourceCompatibility <span class="token operator">=</span> <span class="token string">"1.7"</span>
targetCompatibility <span class="token operator">=</span> <span class="token string">"1.7"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4、app 使用</p>
<p>app 的 gradle 配置如下：</p>
<pre class="line-numbers language-java"><code class="language-java">
dependencies <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    annotationProcessor <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':compiler'</span><span class="token punctuation">)</span>
    compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':annotation'</span><span class="token punctuation">)</span>
    compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':inject'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>activity 中使用：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token annotation punctuation">@ContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_ioc<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IocActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ContentViewInject<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个<br>IocActivity$$ViewBinder 的 Java 文件，代码如下：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">package</span> com<span class="token punctuation">.</span>lauzy<span class="token punctuation">.</span>freedom<span class="token punctuation">.</span>lauzycode<span class="token punctuation">.</span>IOC<span class="token punctuation">;</span>
<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>freedom<span class="token punctuation">.</span>lauzy<span class="token punctuation">.</span>inject<span class="token punctuation">.</span>ContentInjector<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IocActivity</span>$$ViewBinder<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">IocActivity</span><span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">ContentInjector</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectContent</span><span class="token punctuation">(</span><span class="token keyword">final</span> T source<span class="token punctuation">,</span> Activity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token number">2130968606</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。</p>
<p>注意事项：</p>
<p>1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。<br>需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，<br>文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。</p>
<p>如下图所示：<br><img src="http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png"></p>
<p>2、本文使用 annotationProcessor 的注解处理器代替 <a href="https://bitbucket.org/hvisser/android-apt" target="_blank" rel="external">android-apt</a> ，Google 内置的注解处理器，建议使用。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>编译时注解的优点 ：在于对性能影响很小的情况下，大量简化程序员的代码，像 butterknife 在首次查找类的时候对性能稍有影响，其他情况下影响微乎其微。<br>编译时注解的缺点 ：build 过程生成更多的代码，增加了类和方法的数量；对性能影响很小，但是多少会有的。</p>
<p>本人认为编译时注解在优化代码，提高效率方面是有很大优势的，远远大于其缺点。</p>
<p>本篇文章主要是分析及梳理大致的实现方式，仅为学习使用，所有代码均托管在 <a href="https://github.com/Lauzy/LauzyCode" target="_blank" rel="external">我的Github</a> 上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目开发中，大部分 Android 开发者都使用过 ButterKnife 这个通过注解简化代码的框架。部分 Android 开发者也使用过 xUtils 这种快速开发的框架。&lt;br&gt;两者均使用到了注解。在上一篇 &lt;a href=&quot;http://lauzy.me/2017
    
    </summary>
    
      <category term="Android" scheme="http://lauzy.github.io/categories/Android/"/>
    
    
      <category term="Android 框架" scheme="http://lauzy.github.io/tags/Android-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java注解、反射，安卓IOC（一）</title>
    <link href="http://lauzy.github.io/2017/05/09/201706IOC1/"/>
    <id>http://lauzy.github.io/2017/05/09/201706IOC1/</id>
    <published>2017-05-09T14:43:44.000Z</published>
    <updated>2017-08-15T01:51:00.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-注解-Annotation"><a href="#Java-注解-Annotation" class="headerlink" title="Java 注解 (Annotation)"></a>Java 注解 (Annotation)</h2><p>Java 注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation 可用于修饰包、类、构造器、方法、变量等。</p>
<a id="more"></a>
<h3 id="Annotation-类型"><a href="#Annotation-类型" class="headerlink" title="Annotation 类型"></a>Annotation 类型</h3><p>此处来一张网上的图 (可在新标签页中放大查看)</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg" width="710" height="670" alt="注解大全"></p>
<p>转自<a href="http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html" target="_blank" rel="external">深入理解Java：注解(Annotation)</a></p>
<h4 id="基本-Annotation"><a href="#基本-Annotation" class="headerlink" title="基本 Annotation"></a>基本 Annotation</h4><p>Java中5个基本的注解分别为：</p>
<ul>
<li>@Override  ————  用来限定子类重写父类的方法。</li>
<li>@Deprecated  ————  标记已经过时的方法。</li>
<li>@SuppressWarnings  ————  抑制编译器的警告。</li>
<li>@SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。</li>
<li>@FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。</li>
</ul>
<h4 id="元-Annotation"><a href="#元-Annotation" class="headerlink" title="元 Annotation"></a>元 Annotation</h4><p>元Annotation是用来修饰其他注解定义，即注解其他注解。<br>Java中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。</p>
<p>1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Retention</span> <span class="token punctuation">{</span>
    RetentionPolicy <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。</li>
<li>RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。</li>
<li>RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。</li>
</ul>
<p>2、@Target：指定被修饰的注解能用于哪些程序元素。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>
    ElementType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>ElementType.ANNOTATION_TYPE: 修饰Annotation。</li>
<li>ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。</li>
<li>ElementType.FIELD: 修饰成员变量。</li>
<li>ElementType.METHOD: 修饰方法定义。</li>
<li>ElementType.PARAMETER: 修饰参数定义。</li>
<li>ElementType.CONSTRUCTOR: 修饰构造方法。</li>
<li>ElementType.LOCAL_VARIABLE: 修饰局部变量。</li>
<li>ElementType.PACKAGE: 修饰包定义。</li>
</ul>
<p>在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注</p>
<ul>
<li>ElementType.TYPE_PARAMETER:  类型变量</li>
<li>ElementType.TYPE_USE:  使用类型的任何语句</li>
</ul>
<p>TYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE_PARAMETER<span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zoo</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@Animal</span> T<span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>TYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：</p>
<pre class="line-numbers language-java"><code class="language-java">
定义：
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE_USE<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UseTest</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

使用：
<span class="token annotation punctuation">@UseTest</span> String content<span class="token punctuation">;</span> 修饰类型，
此种写法相当于java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>@UseTest String content<span class="token punctuation">;</span> 
若<span class="token annotation punctuation">@UseTest</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String content<span class="token punctuation">;</span> 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。

String content <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@UseTest</span> String<span class="token punctuation">)</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类型转换</span>
List<span class="token operator">&lt;</span><span class="token annotation punctuation">@UseTest</span> String<span class="token operator">></span> infos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//泛型</span>
<span class="token keyword">implements</span> <span class="token annotation punctuation">@UseTest</span> XXXX<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//实现接口</span>
<span class="token keyword">throws</span> <span class="token annotation punctuation">@UseTest</span> NullPointException<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//声明抛出异常</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。</p>
<p>4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。</p>
<p>5、@Repeatable：重复注解，Java8的新特性。</p>
<p>在Java8之前，重复注解的解决方案代码如下：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

定义一个容器注解：
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Students</span><span class="token punctuation">{</span>
    Student<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

使用：
<span class="token annotation punctuation">@Students</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Student</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Student</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Will"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在Java8中的方案则如下：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义如上的容器注解Students，添加Repeatable注解，如下所示</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>Students<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

使用：
<span class="token annotation punctuation">@Student</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Student</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Will"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Java-反射简介"><a href="#Java-反射简介" class="headerlink" title="Java 反射简介"></a>Java 反射简介</h2><p>通过Java反射可以获取对象的属性、方法等。</p>
<p>1、获取类</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token comment" spellcheck="true">//第一种方式</span>
Class <span class="token class-name">stuClazz1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lauzy.freedom.ReflectDemo.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//第二种方式</span>
Class <span class="token class-name">stuClazz2</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//第三种方式</span>
Student stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Class <span class="token class-name">stuClazz3</span> <span class="token operator">=</span> stu3<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、创建对象</p>
<pre class="line-numbers language-java"><code class="language-java">
Class <span class="token class-name">stuClazz2</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
Object stu <span class="token operator">=</span> stuClazz2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>3、获取属性例子</p>
<pre class="line-numbers language-java"><code class="language-java">
Object stu <span class="token operator">=</span> stuClazz2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取实例</span>
Field age <span class="token operator">=</span> stuClazz2<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取特定属性</span>
age<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打破封装性</span>
age<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//设置属性</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4、方法总结</p>
<ul>
<li>getDeclaredFields(): 获取所有属性。</li>
<li>getDeclaredField(“<em>*</em>“): 获取特定的属性。</li>
<li>getModifiers(): 获取属性或方法的修饰符。</li>
<li>getType(): 获取属性或方法的类型名。</li>
<li>getDeclaredMethods()：获取所有方法。</li>
<li>getReturnType()：获取方法的返回类型。</li>
<li>getParameterTypes()：获取方法的参数类型。</li>
<li>getDeclaredMethod(“<em>*</em>“,参数类型.class,……): 获取特定的方法。</li>
<li>getDeclaredConstructors(): 获取所有的构造方法。</li>
<li>getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。</li>
<li>getSuperclass()：获取继承的父类。</li>
<li>getInterfaces()：获取实现的所有接口。</li>
<li>field.set(Object object, Object value);//设置object对象的value属性</li>
<li>method.invoke(Object object, Object… values); //调用方法，values为方法的参数</li>
</ul>
<p>5、代码实例</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    Class <span class="token class-name">stuClazz1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lauzy.freedom.ReflectDemo.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Class <span class="token class-name">stuClazz2</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    Student stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Class <span class="token class-name">stuClazz3</span> <span class="token operator">=</span> stu3<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> stuClazz1<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取属性修饰符</span>
                <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//获取属性类型名</span>
                <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取属性名</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> stuClazz2<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取方法修饰符</span>
                <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//方法返回类型名</span>
                <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//方法名</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuClazz2<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuClazz2<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class <span class="token class-name">aClass</span> <span class="token operator">:</span> stuClazz2<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object stu <span class="token operator">=</span> stuClazz2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取实例</span>
    Field name <span class="token operator">=</span> stuClazz2<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取特定属性</span>
    name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打破封装性</span>
    name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//设置属性</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Method profile <span class="token operator">=</span> stuClazz2<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getProfile"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特定方法</span>
    profile<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    profile<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用方法</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">private</span><span class="token operator">-</span>String<span class="token operator">-</span>name
<span class="token keyword">public</span><span class="token operator">-</span>String<span class="token operator">-</span>gender
<span class="token keyword">private</span><span class="token operator">-</span><span class="token keyword">int</span><span class="token operator">-</span>age
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token keyword">public</span><span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String</span><span class="token operator">-</span>getName
<span class="token keyword">public</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token operator">-</span>setName
<span class="token keyword">private</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token operator">-</span>getProfile
<span class="token keyword">public</span><span class="token operator">-</span><span class="token keyword">int</span><span class="token operator">-</span>getAge
<span class="token keyword">public</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token operator">-</span>setAge
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token keyword">public</span> com<span class="token punctuation">.</span>lauzy<span class="token punctuation">.</span>freedom<span class="token punctuation">.</span>ReflectDemo<span class="token punctuation">.</span><span class="token function">Student</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">,</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
com<span class="token punctuation">.</span>lauzy<span class="token punctuation">.</span>freedom<span class="token punctuation">.</span>AnnotationDemo<span class="token punctuation">.</span>Person
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
Jack
Name <span class="token operator">:</span> Jack <span class="token punctuation">;</span> Gender <span class="token operator">:</span> male <span class="token punctuation">;</span> Age <span class="token operator">:</span> <span class="token number">30</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="自定义注解、反射获取属性"><a href="#自定义注解、反射获取属性" class="headerlink" title="自定义注解、反射获取属性"></a>自定义注解、反射获取属性</h2><p>分别定义Name、Gender和SaveMoney注解：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span>
@<span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>
    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"Will"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Gender</span> <span class="token punctuation">{</span>
    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SaveMoney</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> <span class="token function">money</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">10000</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">term</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>

    String <span class="token function">platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"XXX"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注解的使用：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Name</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Gender</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"man"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@SaveMoney</span><span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">,</span> term <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> platform <span class="token operator">=</span> <span class="token string">"ChinaBank"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"and then he spent "</span> <span class="token operator">+</span> money  <span class="token operator">+</span> <span class="token string">" on clothes."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用反射获取注解的属性和方法：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnUtils</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Name<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Gender<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Name name <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Name<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Gender gender <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Gender<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"A "</span> <span class="token operator">+</span> gender<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" called "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Class<span class="token operator">&lt;</span>Person<span class="token operator">></span> personClass <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
            Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>SaveMoney<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    SaveMoney saveMoney <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>SaveMoney<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" deposited "</span> <span class="token operator">+</span> saveMoney<span class="token punctuation">.</span><span class="token function">money</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"RMB to "</span> <span class="token operator">+</span>
                            saveMoney<span class="token punctuation">.</span><span class="token function">platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" for "</span> <span class="token operator">+</span> saveMoney<span class="token punctuation">.</span><span class="token function">term</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" months, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>personClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行 </p>
<pre class="line-numbers language-java"><code class="language-java">AnnUtils<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时的输出结果为：</p>
<pre class="line-numbers language-java"><code class="language-java">A man named Jack deposited 20000RMB to ChinaBank <span class="token keyword">for</span> <span class="token number">5</span> months<span class="token punctuation">,</span> and then he spent <span class="token number">1000</span> on clothes<span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此篇博客为基础用法及实例，下一篇<a href="http://lauzy.me/2017/05/09/201706IOC2/" target="_blank" rel="external">Java注解、反射，安卓IOC（二）</a>会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-注解-Annotation&quot;&gt;&lt;a href=&quot;#Java-注解-Annotation&quot; class=&quot;headerlink&quot; title=&quot;Java 注解 (Annotation)&quot;&gt;&lt;/a&gt;Java 注解 (Annotation)&lt;/h2&gt;&lt;p&gt;Java 注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation 可用于修饰包、类、构造器、方法、变量等。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lauzy.github.io/categories/Android/"/>
    
    
      <category term="Android 框架" scheme="http://lauzy.github.io/tags/Android-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>拖拽图片</title>
    <link href="http://lauzy.github.io/2017/05/05/201706DragImage/"/>
    <id>http://lauzy.github.io/2017/05/05/201706DragImage/</id>
    <published>2017-05-05T07:34:59.000Z</published>
    <updated>2017-08-15T01:51:00.631Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无事，在<a href="https://github.com/Lauzy/GankPro" target="_blank" rel="external">干货集中营</a>里又撸了个效果。</p>
<p>先来一波效果图：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif" width="270" height="450" alt="效果图"></p>
<a id="more"></a>
<p>实现方法当然是手势交互，那自然想到OnTouchListener()，流程还是很简单的，继承OnTouchListener，然后重写onTouch方法，由于效果相对简单，这里直接上代码：</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouch</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">//获取View的LayoutParams，注意此种方法仅适合FrameLayout，这里仅是一种简单的实现思路。</span>
        FrameLayout<span class="token punctuation">.</span>LayoutParams layoutParams <span class="token operator">=</span> <span class="token punctuation">(</span>FrameLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getActionMasked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>
            <span class="token comment" spellcheck="true">//获取手指按下时X和Y轴的坐标</span>
                mOriginalY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getRawY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mOriginalX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getRawX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>
            <span class="token comment" spellcheck="true">//获取移动的距离</span>
                mMotionY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getRawY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mOriginalY<span class="token punctuation">)</span><span class="token punctuation">;</span>
                mMotionX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getRawX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mOriginalX<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//计算缩放比例</span>
                <span class="token keyword">float</span> ratio <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>mMotionY<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0f</span> <span class="token operator">/</span> v<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">float</span> ratioY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>mMotionY<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> v<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>ratio <span class="token operator">&lt;=</span> <span class="token number">0.5f</span> <span class="token operator">?</span> ratio <span class="token operator">:</span> <span class="token number">0.5f</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//根据Y轴变化缩放比例</span>
                v<span class="token punctuation">.</span><span class="token function">setScaleX</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> ratioY<span class="token punctuation">)</span><span class="token punctuation">;</span>
                v<span class="token punctuation">.</span><span class="token function">setScaleY</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> ratioY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//设置layoutParams变化</span>
                layoutParams<span class="token punctuation">.</span>topMargin <span class="token operator">=</span> mMotionY <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
                layoutParams<span class="token punctuation">.</span>leftMargin <span class="token operator">=</span> mMotionX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
                layoutParams<span class="token punctuation">.</span>bottomMargin <span class="token operator">=</span> <span class="token operator">-</span>mMotionY <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
                layoutParams<span class="token punctuation">.</span>rightMargin <span class="token operator">=</span> <span class="token operator">-</span>mMotionX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
                v<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//调用requestLayout 重置布局</span>
                v<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//设置透明度最低值</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>mMotionY<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mContentLayout<span class="token punctuation">.</span><span class="token function">getBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mCurAlpha <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//根据移动距离计算透明度</span>
                    <span class="token keyword">float</span> ratioAlpha <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>mMotionY<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">500.0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mContentLayout<span class="token punctuation">.</span><span class="token function">getBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ratioAlpha<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mCurAlpha <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ratioAlpha<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>
            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token operator">:</span>
            <span class="token comment" spellcheck="true">//手势抬起或者取消时，若移动距离大于400，实现自定义的接口方法</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>mMotionY<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mImageEventListener<span class="token punctuation">.</span><span class="token function">onActionBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//无动画返回原状</span>
                    <span class="token comment" spellcheck="true">/*v.setScaleY(1);
                    v.setScaleX(1);
                    layoutParams.topMargin = 0;
                    layoutParams.bottomMargin = 0;
                    layoutParams.leftMargin = 0;
                    layoutParams.rightMargin = 0;
                    mContentLayout.getBackground().setAlpha(255);*/</span>
                <span class="token comment" spellcheck="true">//通过一系列动画将View复原</span>
                    <span class="token function">setScaleAnim</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">setMarginAnim</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> layoutParams<span class="token punctuation">,</span> Direction<span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">setMarginAnim</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> layoutParams<span class="token punctuation">,</span> Direction<span class="token punctuation">.</span>RIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">setMarginAnim</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> layoutParams<span class="token punctuation">,</span> Direction<span class="token punctuation">.</span>TOP<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">setMarginAnim</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> layoutParams<span class="token punctuation">,</span> Direction<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    v<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                ValueAnimator animator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span>mCurAlpha<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                animator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        mContentLayout<span class="token punctuation">.</span><span class="token function">getBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> animation<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//消费事件</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后在使用的地方直接调用即可：</p>
<pre class="line-numbers language-java"><code class="language-java">        imageView<span class="token punctuation">.</span><span class="token function">setOnTouchListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DragImageOnTouchListener</span><span class="token punctuation">(</span>frameLayout<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DragImageOnTouchListener<span class="token punctuation">.</span>ImageEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActionBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">onBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//可处理具体的逻辑</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：此方法是根据LayoutParams重置布局实现，所以使用FrameLayout可达到图片所示效果。若使用其他布局，如RelativeLayout，则需要先初始化RelativeLayout.LayoutParams，使得视图不便控制。<br>具体代码可参考  <a href="https://github.com/Lauzy/LauzyCode" target="_blank" rel="external">我的Github</a> 的<a href="https://github.com/Lauzy/LauzyCode/tree/master/app/src/main/java/com/lauzy/freedom/lauzycode/DragImage" target="_blank" rel="external">DragImage包下</a>,<br>在我的<a href="https://github.com/Lauzy/GankPro" target="_blank" rel="external">干货集中营</a> 中也有具体的使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲来无事，在&lt;a href=&quot;https://github.com/Lauzy/GankPro&quot;&gt;干货集中营&lt;/a&gt;里又撸了个效果。&lt;/p&gt;
&lt;p&gt;先来一波效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oop6dcmck.bkt.clouddn.com/20170502Gank2.gif&quot; width = &quot;270&quot; height = &quot;450&quot; alt=&quot;效果图&quot;/&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lauzy.github.io/categories/Android/"/>
    
    
      <category term="Android 交互" scheme="http://lauzy.github.io/tags/Android-%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>LBehavior</title>
    <link href="http://lauzy.github.io/2017/04/14/201705Behavior/"/>
    <id>http://lauzy.github.io/2017/04/14/201705Behavior/</id>
    <published>2017-04-14T08:25:46.000Z</published>
    <updated>2017-08-15T01:51:00.626Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href="https://github.com/Lauzy/GankPro" target="_blank" rel="external">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>
</blockquote>
<a id="more"></a>
<h2 id="先来一波效果图："><a href="#先来一波效果图：" class="headerlink" title="先来一波效果图："></a>先来一波效果图：</h2><p><img src="http://oop6dcmck.bkt.clouddn.com/20170420B01.gif" width="270" height="450" alt="效果图1"><img src="http://oop6dcmck.bkt.clouddn.com/20170420B02.gif" width="270" height="450" alt="效果图2"></p>
<h2 id="效果实现思路："><a href="#效果实现思路：" class="headerlink" title="效果实现思路："></a>效果实现思路：</h2><ol>
<li><p>判断手势</p>
</li>
<li><p>计算距离</p>
</li>
<li><p>触发动画</p>
</li>
</ol>
<h2 id="文章目录："><a href="#文章目录：" class="headerlink" title="文章目录："></a>文章目录：</h2><ol>
<li>CoordinatorLayout及Behavior简介</li>
<li>自定义Behavior</li>
<li>仿知乎效果的动画实现及个性化</li>
</ol>
<h2 id="CoordinatorLayout和Behavior简介"><a href="#CoordinatorLayout和Behavior简介" class="headerlink" title="CoordinatorLayout和Behavior简介"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href="http://blog.csdn.net/qibin0506/article/details/50377592" target="_blank" rel="external">源码看CoordinatorLayout.Behavior原理</a>。</p>
<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>
<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>
<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html" target="_blank" rel="external">Behavior官网</a>。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="1-layoutDependsOn"><a href="#1-layoutDependsOn" class="headerlink" title="1.layoutDependsOn"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">layoutDependsOn</span><span class="token punctuation">(</span>CoordinatorLayout parent， View child， View dependency<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> dependency <span class="token keyword">instanceof</span> <span class="token class-name">AppBarLayout</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-onDependentViewChanged"><a href="#2-onDependentViewChanged" class="headerlink" title="2.onDependentViewChanged"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onDependentViewChanged</span><span class="token punctuation">(</span>CoordinatorLayout parent， View child， View dependency<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">offsetChildAsNeeded</span><span class="token punctuation">(</span>parent， child， dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-onStartNestedScroll"><a href="#3-onStartNestedScroll" class="headerlink" title="3.onStartNestedScroll"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token comment" spellcheck="true">//判断是否垂直滑动</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onStartNestedScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class="token keyword">int</span> nestedScrollAxes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>nestedScrollAxes <span class="token operator">&amp;</span> ViewCompat<span class="token punctuation">.</span>SCROLL_AXIS_VERTICAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-onNestedPreScroll"><a href="#4-onNestedPreScroll" class="headerlink" title="4.onNestedPreScroll"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token comment" spellcheck="true">/**
     * 触发滑动嵌套滚动之前调用的方法
     *
     * @param coordinatorLayout coordinatorLayout父布局
     * @param child             使用Behavior的子View
     * @param target            触发滑动嵌套的View(实现NestedScrollingChild接口)
     * @param dx                滑动的X轴距离
     * @param dy                滑动的Y轴距离
     * @param consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNestedPreScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout， View child， View target， 
        <span class="token keyword">int</span> dx， <span class="token keyword">int</span> dy， <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> consumed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onNestedPreScroll</span><span class="token punctuation">(</span>coordinatorLayout， child， target， dx， dy， consumed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-onNestedScroll"><a href="#5-onNestedScroll" class="headerlink" title="5.onNestedScroll"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token comment" spellcheck="true">/**
     * 滑动嵌套滚动时触发的方法
     *
     * @param coordinatorLayout coordinatorLayout父布局
     * @param child             使用Behavior的子View
     * @param target            触发滑动嵌套的View
     * @param dxConsumed        TargetView消费的X轴距离
     * @param dyConsumed        TargetView消费的Y轴距离
     * @param dxUnconsumed      未被TargetView消费的X轴距离
     * @param dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，
     *                而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNestedScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout， View child， View target， 
        <span class="token keyword">int</span> dxConsumed， <span class="token keyword">int</span> dyConsumed， <span class="token keyword">int</span> dxUnconsumed， <span class="token keyword">int</span> dyUnconsumed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onNestedScroll</span><span class="token punctuation">(</span>coordinatorLayout， child， target， 
            dxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="自定义Behavior"><a href="#自定义Behavior" class="headerlink" title="自定义Behavior"></a>自定义Behavior</h2><h3 id="自定义Behavior主要有两种实现方式："><a href="#自定义Behavior主要有两种实现方式：" class="headerlink" title="自定义Behavior主要有两种实现方式："></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token comment" spellcheck="true">//判断垂直滑动</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onStartNestedScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View directTargetChild<span class="token punctuation">,</span> View target<span class="token punctuation">,</span> <span class="token keyword">int</span> nestedScrollAxes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isInit<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 设置标记，防止new Anim导致的parent和child坐标变化</span>
            mCommonAnim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LTitleBehaviorAnim</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
            isInit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>nestedScrollAxes <span class="token operator">&amp;</span> ViewCompat<span class="token punctuation">.</span>SCROLL_AXIS_VERTICAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNestedPreScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View target<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> consumed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCommonAnim <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mCommonAnim<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span>mDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mCommonAnim<span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span>mInterpolator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onNestedPreScroll</span><span class="token punctuation">(</span>coordinatorLayout<span class="token punctuation">,</span> child<span class="token punctuation">,</span> target<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> consumed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNestedScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View target<span class="token punctuation">,</span> <span class="token keyword">int</span> dxConsumed<span class="token punctuation">,</span> <span class="token keyword">int</span> dyConsumed<span class="token punctuation">,</span> <span class="token keyword">int</span> dxUnconsumed<span class="token punctuation">,</span> <span class="token keyword">int</span> dyUnconsumed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onNestedScroll</span><span class="token punctuation">(</span>coordinatorLayout<span class="token punctuation">,</span> child<span class="token punctuation">,</span> target<span class="token punctuation">,</span> dxConsumed<span class="token punctuation">,</span> dyConsumed<span class="token punctuation">,</span> dxUnconsumed<span class="token punctuation">,</span> dyUnconsumed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dyConsumed <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isHide<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mCommonAnim<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                isHide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dyConsumed <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isHide<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mCommonAnim<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                isHide <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="仿知乎效果的动画实现及个性化"><a href="#仿知乎效果的动画实现及个性化" class="headerlink" title="仿知乎效果的动画实现及个性化"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href="https://github.com/Lauzy/GankPro" target="_blank" rel="external">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>
<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token keyword">public</span> <span class="token function">LBottomBehaviorAnim</span><span class="token punctuation">(</span>View bottomView<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mBottomView <span class="token operator">=</span> bottomView<span class="token punctuation">;</span>
        mOriginalY <span class="token operator">=</span> mBottomView<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//显示</span>
        ValueAnimator animator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>mBottomView<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mOriginalY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token function">getDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animator<span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token function">getInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator valueAnimator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mBottomView<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Float<span class="token punctuation">)</span> valueAnimator<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//隐藏</span>
        ValueAnimator animator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>mBottomView<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mOriginalY <span class="token operator">+</span> mBottomView<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token function">getDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animator<span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token function">getInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator valueAnimator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mBottomView<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Float<span class="token punctuation">)</span> valueAnimator<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>
<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dyConsumed<span class="token punctuation">)</span> <span class="token operator">></span> minScrollY<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//onNestedScroll里边的逻辑代码</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>
<pre class="line-numbers language-java"><code class="language-java">
    mTotalScrollY <span class="token operator">+=</span> dyConsumed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//累加消费的距离</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dyConsumed<span class="token punctuation">)</span> <span class="token operator">></span> minScrollY <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>mTotalScrollY<span class="token punctuation">)</span> <span class="token operator">></span> scrollYDistance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//onNestedScroll里边的逻辑代码</span>
        mTotalScrollY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动画执行完毕后重置</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token keyword">public</span> <span class="token keyword">static</span> CommonBehavior <span class="token function">from</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ViewGroup<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>params <span class="token keyword">instanceof</span> <span class="token class-name">CoordinatorLayout<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"The view is not a child of CoordinatorLayout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        CoordinatorLayout<span class="token punctuation">.</span>Behavior behavior <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CoordinatorLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>behavior <span class="token keyword">instanceof</span> <span class="token class-name">CommonBehavior</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>CommonBehavior<span class="token punctuation">)</span> behavior<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后可以设置对象的属性：</p>
<pre class="line-numbers language-java"><code class="language-java">
    <span class="token keyword">public</span> CommonBehavior <span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token keyword">int</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mDuration <span class="token operator">=</span> duration<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> CommonBehavior <span class="token function">setInterpolator</span><span class="token punctuation">(</span>Interpolator interpolator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mInterpolator <span class="token operator">=</span> interpolator<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> CommonBehavior <span class="token function">setMinScrollY</span><span class="token punctuation">(</span><span class="token keyword">int</span> minScrollY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>minScrollY <span class="token operator">=</span> minScrollY<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> CommonBehavior <span class="token function">setScrollYDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> scrollYDistance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scrollYDistance <span class="token operator">=</span> scrollYDistance<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href="https://github.com/Lauzy/LBehavior" target="_blank" rel="external">我的Github</a></p>
<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>
<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>
<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>
<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>
<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>
<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>
<pre class="line-numbers language-java"><code class="language-java">
    allprojects <span class="token punctuation">{</span>
        repositories <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            maven <span class="token punctuation">{</span> url <span class="token string">'https://jitpack.io'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    dependencies <span class="token punctuation">{</span>
        compile <span class="token string">'com.github.Lauzy:LBehavior:1.0.1'</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>具体使用也很简单</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@string/title_view_behavior</td>
<td>顶部标题栏</td>
</tr>
<tr>
<td>@string/bottom_view_behavior</td>
<td>底部导航栏</td>
</tr>
<tr>
<td>@string/fab_scale_behavior</td>
<td>浮动按钮（缩放）</td>
</tr>
<tr>
<td>@string/fab_vertical_behavior</td>
<td>浮动按钮（上下滑动）</td>
</tr>
</tbody>
</table>
<p>自定义(均设有默认值，可不使用)：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>setMinScrollY</td>
<td>int y</td>
<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>
</tr>
<tr>
<td>setScrollYDistance</td>
<td>int y</td>
<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>
</tr>
<tr>
<td>setDuration</td>
<td>int duration</td>
<td>设置动画持续时间.默认为400ms.</td>
</tr>
<tr>
<td>setInterpolator</td>
<td>Interpolator interpolator</td>
<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href="https://developer.android.google.cn/reference/android/view/animation/Interpolator.html" target="_blank" rel="external">Interpolator官方文档</a></td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-java"><code class="language-java">
    CommonBehavior<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mFloatingActionButton<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMinScrollY</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setScrollYDistance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearOutSlowInInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后附上项目的地址，戳  <a href="https://github.com/Lauzy/LBehavior" target="_blank" rel="external">我的Github</a> ，顺便可以看看撸的<a href="https://github.com/Lauzy/GankPro" target="_blank" rel="external">干货集中营客户端</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。&lt;br&gt;本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款&lt;a href=&quot;https://github.com/Lauzy/GankPro&quot;&gt;干货集中营的客户端&lt;/a&gt;，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lauzy.github.io/categories/Android/"/>
    
    
      <category term="自定义View" scheme="http://lauzy.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>沉浸、透明及白底黑字状态栏技巧</title>
    <link href="http://lauzy.github.io/2017/03/30/201705StatusBar/"/>
    <id>http://lauzy.github.io/2017/03/30/201705StatusBar/</id>
    <published>2017-03-30T01:25:46.000Z</published>
    <updated>2017-08-15T01:51:00.628Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png" alt="透明"></p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png" alt="半透明"></p>
<a id="more"></a>
<p>读这篇文章之前建议研读郭神的<a href="http://blog.csdn.net/guolin_blog/article/details/51763825" target="_blank" rel="external">Android状态栏微技巧，带你真正理解沉浸式模式</a>。这里我们坚决不考虑4.4以下的系统，那么基本上可以分为几种情况，4.4、 5.0以上6.0以下、 6.0+。</p>
<p>本篇文章目录：<br>1.透明与半透明状态栏<br>2.结合Toolbar使用技巧<br>3.白底黑字状态栏<br>4.其他注意事项</p>
<h2 id="透明与半透明状态栏"><a href="#透明与半透明状态栏" class="headerlink" title="透明与半透明状态栏"></a>透明与半透明状态栏</h2><p>首先我们实现上边两图的效果，注意下版本的判断，直接上代码：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    View decorView <span class="token operator">=</span> <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> option <span class="token operator">=</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
        <span class="token operator">|</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_STABLE<span class="token punctuation">;</span>
    decorView<span class="token punctuation">.</span><span class="token function">setSystemUiVisibility</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusBarColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//getWindow().setStatusBarColor(Color.parseColor("#40000000"));  //此种效果为类似QQ的半透明状态栏</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>KITKAT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_TRANSLUCENT_STATUS<span class="token punctuation">,</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_TRANSLUCENT_STATUS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>版本号为21以上时，效果便如上边两图所示，4.4系统则如下图所示：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E4.4%E6%95%88%E6%9E%9C.png" alt="4.4效果"></p>
<h2 id="结合标题栏使用的技巧"><a href="#结合标题栏使用的技巧" class="headerlink" title="结合标题栏使用的技巧"></a>结合标题栏使用的技巧</h2><p>上述方法基本上已经实现了透明状态栏的效果，但是我们添加一个Toolbar，设置各种属性后，各种元素都上移了，如下图所示：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170421%E4%B8%8D%E8%AE%BE%E7%BD%AEPadding%E6%95%88%E6%9E%9C.png" alt="上移效果"></p>
<p>部分开发者用android:fitsSystemWindows = “true”，然后给状态栏添加一个View来解决，经本人各种实验后，发现这种方法不太适合自己。<br>这里采用一个比较直接的方式，设置透明后相当于toolbar已经被拉长，所以为其设置一个padding值来解决问题，代码如下，ScreenUtils为获取屏幕属性的一个工具类：</p>
<pre class="line-numbers language-java"><code class="language-java">mToolbar <span class="token operator">=</span> <span class="token punctuation">(</span>Toolbar<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar_common<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>mToolbar <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mToolbar<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>height <span class="token operator">+=</span> ScreenUtils<span class="token punctuation">.</span><span class="token function">getStatusHeight</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mToolbar<span class="token punctuation">.</span><span class="token function">setPadding</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ScreenUtils<span class="token punctuation">.</span><span class="token function">getStatusHeight</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setSupportActionBar</span><span class="token punctuation">(</span>mToolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ActionBar supportActionBar <span class="token operator">=</span> <span class="token function">getSupportActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>supportActionBar <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        supportActionBar<span class="token punctuation">.</span><span class="token function">setDisplayShowTitleEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//此处是为了不显示默认的标题</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置之后，就达到我们想要的效果了。</p>
<h2 id="白底黑字状态栏"><a href="#白底黑字状态栏" class="headerlink" title="白底黑字状态栏"></a>白底黑字状态栏</h2><p>有时候我们的toolbar背景为浅色甚至是白色，如果不加修饰的话，状态栏的文字由于默认白色，导致很难分辨。6.0以上系统直接提供了方法，但是考虑到其他版本，需要具体判断:</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置状态栏文字为暗色</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//6.0以上可以通过直接设置SYSTEM_UI_FLAG_LIGHT_STATUS_BAR属性即可。</span>
    <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSystemUiVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN <span class="token operator">|</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LIGHT_STATUS_BAR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusBarColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//21以上不支持6.0直接设置的方法，可用灰色代替，具体可自己设置</span>
    <span class="token comment" spellcheck="true">//getWindow().setStatusBarColor(Color.parseColor("#40000000"));</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>JELLY_BEAN<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSystemUiVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.4版本本身就含有暗色阴影，不作其他处理即可</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果图如下：<br>6.0效果：<img src="http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B26.0%E6%95%88%E6%9E%9C.png" alt="6.0白色"><br>5.0以上6.0以下： <img src="http://oop6dcmck.bkt.clouddn.com/201704215.0%E4%BB%A5%E4%B8%8A6.0%E4%BB%A5%E4%B8%8B%E7%99%BD%E8%89%B2.png" alt="5.0以上6.0以下"><br>4.4效果： <img src="http://oop6dcmck.bkt.clouddn.com/20170421%E7%99%BD%E8%89%B24.4%E6%95%88%E6%9E%9C.png" alt="4.4效果"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>上述方法基本上已经可以满足大部分需求了，效果都可以称为(半)透明状态栏。下边看看真正的沉浸式状态栏，状态栏文字和导航栏都被隐藏：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170421%E6%B2%89%E6%B5%B8.png" alt="沉浸"></p>
<p>代码如下：</p>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> hasFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasFocus <span class="token operator">&amp;&amp;</span> Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>KITKAT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        View decorView <span class="token operator">=</span> <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        decorView<span class="token punctuation">.</span><span class="token function">setSystemUiVisibility</span><span class="token punctuation">(</span>
        View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_STABLE
        <span class="token operator">|</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
        <span class="token operator">|</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
        <span class="token operator">|</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_HIDE_NAVIGATION
        <span class="token operator">|</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_FULLSCREEN
        <span class="token operator">|</span> View<span class="token punctuation">.</span>SYSTEM_UI_FLAG_IMMERSIVE_STICKY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际开发中，我们当然不可能每个Activity中都写一大堆重复的代码，所以建议讲透明状态栏的代码封装在BaseActivity中，然后Toolbar设置相同的id，或者使用<include>标签公用，自定义的一个布局或者其他View也是同理。<br>Demo中做了一些简单的封装，可以参考下，具体实现还是需要看具体的需求。</include></p>
<p>本文所有代码的地址,戳 <a href="https://github.com/Lauzy/LauzyCode" target="_blank" rel="external">我的Github</a> ，在StatusBar包中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，Android5.0以上已经可以通过设置colorPrimaryDark来改变状态栏的颜色。但是，大多数Android开发者都会遇到让系统状态栏透明或者半透明的需求，如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oop6dcmck.bkt.clouddn.com/20170421%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C.png&quot; alt=&quot;透明&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oop6dcmck.bkt.clouddn.com/20170421%E5%8D%8A%E9%80%8F%E6%98%8E.png&quot; alt=&quot;半透明&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lauzy.github.io/categories/Android/"/>
    
    
      <category term="Android Tips" scheme="http://lauzy.github.io/tags/Android-Tips/"/>
    
  </entry>
  
</feed>
