<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[自定义View：Android 歌词控件]]></title>
      <url>/Lauzy.github.io/2018/05/31/201805TicktockMusic03_LyricView/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>之前做 <a href="https://github.com/Lauzy/TicktockMusic" target="_blank" rel="external">TicktockMusic</a> 音乐播放器，一个必要的需求肯定是歌词，在 github 上找了几个，发现或多或少都有点不满足需求，所以就自己动手写了一个。</p>
<p>先附上项目地址和效果图：</p>
<p>地址：<a href="https://github.com/Lauzy/LyricView" target="_blank" rel="external">https://github.com/Lauzy/LyricView</a></p>
<p>效果图：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20180531LrcViewCompress.gif" width="270" height="450" alt="效果图"></p>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>歌词的需求我想大家都很清楚，简单的话，直接打开一个音乐播放器查看一下。我们打开后分析一下歌词的功能：歌词完整的显示出来、当前歌词变色、可以根据时间而进行定位、可以手动滑动、滑动后显示一个指示器、点击指示器播放进度跳转、滑动时指示器变色等等。OK，我们自己写歌词控件，这些功能也是必不可少的，接下来就逐步分析下实现的过程。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>歌词解析</li>
<li>歌词显示</li>
<li>滑动处理</li>
</ul>
<p>基本实现就是这三个过程，接下来一步步的分析。</p>
<h4 id="歌词解析"><a href="#歌词解析" class="headerlink" title="歌词解析"></a>歌词解析</h4><p>首先，我们在网上下载一个歌词，即以 lrc 为后缀的文件。比如海阔天空这首歌的歌词，我们用记事本或者其他工具打开后就可以看到具体的歌词内容，如下：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[ti: 海阔天空]</div><div class="line">[ar:黄家驹]</div><div class="line">[al:乐与怒]</div><div class="line">[by:mp3.50004.com]</div><div class="line">[00:00.00]Beyond：海阔天空 </div><div class="line">[<span class="string">01:40.00</span>][<span class="symbol">00:16.00</span>]今天我寒夜里看雪飘过 </div><div class="line">[<span class="string">01:48.00</span>][<span class="symbol">00:24.00</span>]怀著冷却了的心窝飘远方 </div><div class="line">[<span class="string">01:53.00</span>][<span class="symbol">00:29.00</span>]风雨里追赶 </div><div class="line">...</div><div class="line"></div><div class="line">[00:42.00]多少次迎著冷眼与嘲笑 </div><div class="line">[00:49.00]从没有放弃过心中的理想 </div><div class="line">[00:54.00]一刹那恍惚 </div><div class="line">...</div></pre></td></tr></table></figure>
<p>可以看到，歌词主要包含歌名、歌手、专辑、作者等头元素，以及歌词的主体内容，我们需要处理的就是主体的歌词内容。首先，歌词是一行一行的文本，其次，每行的文本都包含时间标签和具体的一行歌词，我们首先将歌词解析为一行行的数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">InputStreamReader isr = <span class="keyword">null</span>;</div><div class="line">BufferedReader br = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    isr = <span class="keyword">new</span> InputStreamReader(inputStream, CHARSET);</div><div class="line">    br = <span class="keyword">new</span> BufferedReader(isr);</div><div class="line">    String line;</div><div class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//此处的 line 即为一行行的文本</span></div><div class="line">        <span class="comment">//parseLrc 方法为解析单行</span></div><div class="line">        List&lt;Lrc&gt; lrcList = parseLrc(line);</div><div class="line">        <span class="keyword">if</span> (lrcList != <span class="keyword">null</span> &amp;&amp; lrcList.size() != <span class="number">0</span>) &#123;</div><div class="line">            lrcs.addAll(lrcList);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sortLrcs(lrcs);</div><div class="line">    <span class="keyword">return</span> lrcs;</div><div class="line">&#125;<span class="keyword">catch</span> ...</div></pre></td></tr></table></figure>
<p>解析为一行行的文字后，就需要具体的处理单行的文字了，我们可以看到，大部分歌词包含两种格式，即单个时间标签和多个时间标签，这里可以采用正则表达式来匹配文字，正则表达式为 (([\d{2}:\d{2}.\d{2}])+)(.*) </p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[<span class="string">01:53.00</span>][<span class="symbol">00:29.00</span>]风雨里追赶    //多个时间标签</div><div class="line"></div><div class="line">[00:42.00]多少次迎著冷眼与嘲笑     //单个时间标签</div></pre></td></tr></table></figure>
<p>接下来根据正则表达式来解析单行歌词</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Lrc&gt; <span class="title">parseLrc</span><span class="params">(String lrcLine)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (lrcLine.trim().isEmpty()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    List&lt;Lrc&gt; lrcs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    Matcher matcher = Pattern.compile(LINE_REGEX).matcher(lrcLine);</div><div class="line">    <span class="keyword">if</span> (!matcher.matches()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String time = matcher.group(<span class="number">1</span>);</div><div class="line">    String content = matcher.group(<span class="number">3</span>);</div><div class="line">    Matcher timeMatcher = Pattern.compile(TIME_REGEX).matcher(time);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (timeMatcher.find()) &#123;</div><div class="line">        String min = timeMatcher.group(<span class="number">1</span>);</div><div class="line">        String sec = timeMatcher.group(<span class="number">2</span>);</div><div class="line">        String mil = timeMatcher.group(<span class="number">3</span>);</div><div class="line">        Lrc lrc = <span class="keyword">new</span> Lrc();</div><div class="line">        <span class="keyword">if</span> (content != <span class="keyword">null</span> &amp;&amp; content.length() != <span class="number">0</span>) &#123;</div><div class="line">            lrc.setTime(Long.parseLong(min) * <span class="number">60</span> * <span class="number">1000</span> + Long.parseLong(sec) * <span class="number">1000</span></div><div class="line">                    + Long.parseLong(mil) * <span class="number">10</span>);</div><div class="line">            lrc.setText(content);</div><div class="line">            lrcs.add(lrc);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> lrcs;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，第一步就完成了，歌词解析完成后得到歌词的数据集合，每个元素都包括时间和内容。</p>
<h4 id="歌词显示"><a href="#歌词显示" class="headerlink" title="歌词显示"></a>歌词显示</h4><p>歌词显示的思路就是将歌词一行行的画出来，我们首先假设屏幕足够大，那么只需要定位第一行歌词的位置，画出来第一行歌词，然后逐行下移一个固定的距离，再画出下一行歌词，依次类推，整个歌词内容就会全部花在画布上了。依照这个思路，我们可以先画出来文字。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//此处为伪代码</span></div><div class="line"></div><div class="line"><span class="keyword">float</span> y = getLrcHeight() / <span class="number">2</span>;</div><div class="line"><span class="keyword">float</span> x = getLrcWidth() / <span class="number">2</span> + getPaddingLeft();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getLrcCount(); i++) &#123;</div><div class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line">          y += textHeight  + mLrcLineSpaceHeight;</div><div class="line">      &#125;</div><div class="line">    ...</div><div class="line">     canvas.drawText(text, x, y, mPaint);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>画出来文字的思路就是这样，首先从屏幕的中间开始，然后纵坐标每次增加文字的高度与距离之和，依次画出来每行文字。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android自定义View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android项目篇（二）：开源库及工具的封装]]></title>
      <url>/Lauzy.github.io/2018/05/28/201805TicktockMusic02_Library/</url>
      <content type="html"><![CDATA[<p>在我们的项目中，总会不可避免的用到三方的开源项目。在开源库的选择上，我们一般会选择成熟稳定，不断更新，作者及时解决 issue 的项目。而且大部分开源项目开放的 api 已经非常方便，使用简单，容易入手。但是，在我们做项目的过程中，最好再将开源项目进行封装。本文以图片加载框架和工具的封装为例来讨论下封装的好处。</p>
<h3 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h3><p>1、统一入口，逻辑改动方便。<br>2、若三方库停止维护或者业务不满足需求需要更换三方库时，封装后方便改动。</p>
<h2 id="图片加载框架的封装"><a href="#图片加载框架的封装" class="headerlink" title="图片加载框架的封装"></a>图片加载框架的封装</h2><p>Android 项目中常用的图片加载框架基本上都是 Picasso、Glide、Fresco、android-universal-image-loader，就近年来说，Picasso 和 Glide 由于其便捷性，更为受欢迎。本文就介绍下 Glide 的封装。</p>
<p>首先，最简单的封装如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Context context, String imageUrl, ImageView imageView)</span> </span>&#123; </div><div class="line">        Glide.with(context).load(imageUrl).into(imageView);  </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实这样已经可以应对一般的场景了，但是业务相对复杂的话，比如改变图片的缓存策略、仅在wifi下加载图片、图片圆角等，这种简单的封装就无法满足了。 接下来我们采用策略模式进行封装。</p>
<p>1、 创建基础策略接口，所有的策略均实现此接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseImageStrategy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(Context context, ImageConfig imageConfig)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">(Context context, ImageView imageView)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、 图片加载配置类，此类包含用到的图片加载参数，采用 Build 模式进行参数的配置，这样使用更加灵活。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object url;</div><div class="line">    <span class="keyword">private</span> ImageView imageView;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageConfig</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = builder.url;</div><div class="line">        <span class="keyword">this</span>.imageView = builder.imageView;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ... <span class="comment">//getter and setter</span></div><div class="line">   </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> Object url;</div><div class="line">        <span class="keyword">private</span> ImageView imageView;</div><div class="line">       </div><div class="line">        ...       </div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> ImageConfig <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ImageConfig(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、具体的策略，比如我们采用 Glide ，则创建 GlideImageLoaderStrategy，可以根据 config 的属性作为参数，来配置 Glide 具体的加载参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlideImageLoaderStrategy</span> <span class="keyword">implements</span> <span class="title">IBaseImageStrategy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Context context, ImageConfig imageConfig)</span> </span>&#123;</div><div class="line">        RequestOptions options = getOptions(context, imageConfig);</div><div class="line">        Object url = getPath(imageConfig);</div><div class="line">        <span class="keyword">if</span> (!imageConfig.isAsBitmap()) &#123;</div><div class="line">            RequestBuilder&lt;Drawable&gt; requestBuilder = Glide.with(context)</div><div class="line">                    .load(url)</div><div class="line">                    .apply(options);</div><div class="line">            <span class="keyword">if</span> (!imageConfig.isRound() &amp;&amp; imageConfig.getDuration() != <span class="number">0</span>) &#123;</div><div class="line">                requestBuilder = requestBuilder.transition(<span class="keyword">new</span> DrawableTransitionOptions()</div><div class="line">                        .crossFade(imageConfig.getDuration()));</div><div class="line">            &#125;</div><div class="line">            requestBuilder.into(imageConfig.getImageView());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            RequestBuilder&lt;Bitmap&gt; requestBuilder = Glide.with(context)</div><div class="line">                    .asBitmap()</div><div class="line">                    .load(url)</div><div class="line">                    .apply(options);</div><div class="line">            <span class="keyword">if</span> (!imageConfig.isRound() &amp;&amp; imageConfig.getDuration() != <span class="number">0</span>) &#123;</div><div class="line">                requestBuilder = requestBuilder.transition(<span class="keyword">new</span> BitmapTransitionOptions()</div><div class="line">                        .crossFade(imageConfig.getDuration()));</div><div class="line">            &#125;</div><div class="line">            requestBuilder.into(imageConfig.getTarget());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Glide 配置</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> context     context</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> imageConfig 配置</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> Glide配置</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> RequestOptions <span class="title">getOptions</span><span class="params">(Context context, ImageConfig imageConfig)</span> </span>&#123;</div><div class="line">        RequestOptions options = <span class="keyword">new</span> RequestOptions()</div><div class="line">                .placeholder(imageConfig.getDefaultRes())</div><div class="line">                .error(imageConfig.getErrorRes());</div><div class="line">        ...</div><div class="line">        <span class="keyword">return</span> options;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">(Context context, ImageView imageView)</span> </span>&#123;</div><div class="line">        Glide.with(context).clear(imageView);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>4、统一入口，此处采用单例模式。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> <span class="keyword">implements</span> <span class="title">IBaseImageStrategy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ImageLoader INSTANCE;</div><div class="line">    <span class="keyword">private</span> IBaseImageStrategy mImageStrategy;</div><div class="line"></div><div class="line"></div><div class="line">    &#123;</div><div class="line">        mImageStrategy = <span class="keyword">new</span> GlideImageLoaderStrategy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageLoader <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (ImageLoader.class) &#123;</div><div class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</div><div class="line">                    INSTANCE = <span class="keyword">new</span> ImageLoader();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Context context, ImageConfig imageConfig)</span> </span>&#123;</div><div class="line">        mImageStrategy.display(context, imageConfig);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">(Context context, ImageView imageView)</span> </span>&#123;</div><div class="line">        mImageStrategy.clean(context, imageView);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、使用，所有的加载均使用统一的 ImageLoader 进行加载。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ImageLoader.getInstance().display(context, <span class="keyword">new</span> ImageConfig.Builder()</div><div class="line">               .url(url)</div><div class="line">               .placeholder(R.drawable.ic_placeholder)</div><div class="line">               .into(imageView)</div><div class="line">               .build());</div></pre></td></tr></table></figure>
<p>6、当我们因为一些原因需要切换图片加载库，比如之前用的 Picasso（策略类为 PicassoImageLoaderStrategy）,由于要加载 gif 图片，所以切换到 Glide，这样我们只用新建一个 GlideImageLoaderStrategy，在 ImageLoader 中改变 IBaseImageStrategy 的实例类即可切换。</p>
<h4 id="图片加载框架封装总结"><a href="#图片加载框架封装总结" class="headerlink" title="图片加载框架封装总结"></a>图片加载框架封装总结</h4><p>综上，这种封装模式的好处就是便于根据业务及其他需求进行扩展和维护。当然封装并不是万能的，比如使用 Glide 可能用到的 Target ，在 Picasso 中并没有此类，所以用到 Target 的地方我们仍然需要一个个手动的更改。另外，Fresco 由于使用时涉及 xml 文件等，用法相对特殊，所以使用 Fresco 的话，封装很难顾及到。本文的封装主要是提供思路，以一种相对维护性高的方式进行封装。</p>
<h2 id="工具的封装"><a href="#工具的封装" class="headerlink" title="工具的封装"></a>工具的封装</h2><p>上边以 Glide 为例介绍了开源项目的封装。我们在项目过程中，也会用到各种工具，接下来介绍下 SharedPrefrences 的封装。 SharedPrefrences 经常用来保存一些简单的信息，如各种状态，部分缓存等。由于其特殊性，所以很多人会写一个工具类来简单处理下 SharedPrefrences 的使用，但是 SharedPrefrences 作为一种数据存储的手段，我觉得还是需要重视起来，以便处理后续的需求。接下来就介绍下 SharedPrefrences 的封装。</p>
<p>1、定义数据仓库的接口，所有的数据仓库接口都继承此接口，并且创建此接口的实现类。</p>
<p>数据仓库接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataRepo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, String value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, <span class="keyword">int</span> value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, <span class="keyword">boolean</span> value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, <span class="keyword">long</span> value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getString</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getString</span><span class="params">(String key, String defaultValue)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key, <span class="keyword">int</span> defaultValue)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getLong</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key, <span class="keyword">boolean</span> defaultValue)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">    Map&lt;String, ?&gt; getAll();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedPreferenceDataRepo</span> <span class="keyword">implements</span> <span class="title">DataRepo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SharedPreferences mSharedPreferences;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SharedPreferenceDataRepo</span><span class="params">(Context context, String fileName, <span class="keyword">int</span> mode)</span> </span>&#123;</div><div class="line">        mSharedPreferences = context.getSharedPreferences(fileName, mode);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        mSharedPreferences.edit().putString(key, value).commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        mSharedPreferences.edit().clear().commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、定义具体的仓库接口，如 CacheRepo，并创建此接口的实现类。</p>
<p>仓库接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CacheRepo</span> <span class="keyword">extends</span> <span class="title">DataRepo</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCache</span><span class="params">(String key, String value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getCache</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheRepoImpl</span> <span class="keyword">extends</span> <span class="title">SharedPreferenceDataRepo</span> <span class="keyword">implements</span> <span class="title">CacheRepo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_NAME = <span class="string">"cache_sp"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheRepoImpl</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, FILE_NAME, Context.MODE_PRIVATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCache</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        put(key, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCache</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getString(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、统一入口，这里类似一个工厂方法，根据需要来获取不同的数据仓库。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheRepo mCacheRepo;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigRepo mConfigRepo;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DataManager INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mCacheRepo = <span class="keyword">new</span> CacheRepoImpl(context);</div><div class="line">        mConfigRepo = <span class="keyword">new</span> ConfigRepoImpl(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (DataManager.class) &#123;</div><div class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</div><div class="line">                    INSTANCE = <span class="keyword">new</span> DataManager(context);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> CacheRepo <span class="title">getCacheRepo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mCacheRepo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConfigRepo <span class="title">getConfigRepo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mConfigRepo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用，统一通过 DataManager 进行加载：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">DataManager.getInstance(mContext).getCacheRepo().getCache(<span class="string">"key"</span>);</div></pre></td></tr></table></figure>
<h4 id="SharedPrefrences-封装总结"><a href="#SharedPrefrences-封装总结" class="headerlink" title="SharedPrefrences 封装总结"></a>SharedPrefrences 封装总结</h4><p>SharedPrefrences 的封装和 Glide 类似，其实也都是为了提高可维护性。假如 SharedPrefrences 缓存的内容偏多不再合适时，我们可以很方便的转化为数据库，文件等其他的存储方式。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于封装，也要考虑开源项目的本身因素，假如侵入性比较强或者作者更新及时、项目比较复杂之类的，也可以根据人力考虑是否封装及如何封装。<br>本文以 Glide 和 SharedPrefrences 为例分别介绍了开源项目和工具的封装，封装的好处是为了提高代码的可维护性和扩展性等，以便应付不断变化的需求及其他因素。所有的代码都在 <a href="https://github.com/Lauzy/TicktockMusic" target="_blank" rel="external">TicktockMusic</a>  中，欢迎讨论。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android Project </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android项目篇（一）：项目架构-Clean Architecture]]></title>
      <url>/Lauzy.github.io/2018/04/12/201710TicktockMusic01_ProjectArchitecture%20/</url>
      <content type="html"><![CDATA[<p>去年开始写一个音乐播放器 <a href="https://github.com/Lauzy/TicktockMusic" target="_blank" rel="external">TicktockMusic</a> ，当时计划是年前把项目和博客都写完，但是由于公司项目开启，平时比较累，加上项目期间的收获部分也应用到 <a href="https://github.com/Lauzy/TicktockMusic" target="_blank" rel="external">TicktockMusic</a>上边，功能写的较少，原有的东西改动较多，所以进度比较缓慢，直到年后才把剩余的部分功能写完（此项目主要用于学习交流，部分功能可能有所缺失），现在将项目的心得及体会写几篇博客来分享。本文先从项目的搭建及架构开始写起。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>在项目创建之初，考虑了诸多架构，众所周知，Android 项目架构有 MVC，MVP，MVVM，Flux或者相互结合等，各个架构的优缺点网上有很多优秀的文章，此处不再介绍。在参考了诸多文章后，我选择了 <a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android Clean Architecture</a> ，此架构分为三层，分别为 领域层 (Domain Layer)、数据层 (Data Layer)、表现层 (Presentation Layer)。</p>
<p>Clean Architecture 有许多文章分析：</p>
<ul>
<li><a href="https://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/" target="_blank" rel="external">Architecting Android…The clean way?</a></li>
<li><a href="https://zhuanlan.zhihu.com/tech-frontier/20001838" target="_blank" rel="external">一种更清晰的Android架构（Architecting Android…The clean way?译文）</a></li>
<li><a href="https://fernandocejas.com/2015/07/18/architecting-android-the-evolution/" target="_blank" rel="external">Architecting Android…The evolution</a></li>
<li><a href="https://fernandocejas.com/2016/12/24/clean-architecture-dynamic-parameters-in-use-cases/" target="_blank" rel="external">Clean Architecture: Dynamic Parameters in Use Cases</a></li>
</ul>
<p>本文简单介绍下 Clean 架构的分层。</p>
<p>1、 Domain Layer</p>
<p>简单来说，领域层就是处理业务逻辑的一层，主要包含了 UseCase(Interactor) 、Repository 等接口。本层为 Java Library ，不包含 Android 的依赖，具体来说，就是控制数据层，通过接口对数据进行增删改查等业务交互。 例如 <a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android Clean Architecture</a> 中的 interactor 与 repository 的交互。</p>
<p>2、 Data Layer</p>
<p>顾名思义，Data 层提供了整个 App 所需要的数据，主要是通过实现 Domain Layer 的接口，根据不同的场景来获取需求的数据。 <a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android Clean Architecture</a> 项目中主要是通过一个工厂方法，来根据不同的条件从不同的数据源中获取数据。实体类的映射转换，cache缓存，数据相关的自定义异常等，均在数据层实现。</p>
<p>3、 Presentation Layer</p>
<p>表现层则主要负责 UI 的逻辑，与数据层完全隔离，根据 Domain Layer 的反馈进行界面展示等。本层即为传统的 UI 层，Activity、Fragment 等都在此层处理 UI 相关的逻辑。<br>本层可以采用 MVP 架构（MVC,MVVM等均可）进行开发，M层可处理一些数据转换，如 Mapper 转换等。P层则主要根据 Domain 的 use case 反馈来进行视图层的业务处理，<a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android Clean Architecture</a> 项目通过 Dagger 注入进行 use case 接口等的实例化，分层更加明确；V层则为 Activity 或 Fragment，主要用户数据展示，UI控制等。</p>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>Clean架构有很明确的优点，最主要则为层级分明，各个层级分工明确且只需关注结果。其次，易于测试和代码迭代更新。但是每个架构都不是完美的，clean架构分工明确但视图层可能也采用MVP等模式，这就造成了业务复杂的时候，P 和 V 的接口量是巨大的。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="1、domain-层"><a href="#1、domain-层" class="headerlink" title="1、domain 层"></a>1、domain 层</h3><p>通俗来讲就是业务的接口层。如何定义接口需要根据具体的业务来确定，拿我的音乐类App来讲，用到的数据有本地音乐（包括专辑、歌手等）、网络音乐、增删改查喜欢的音乐和最近播放等。 实际项目中用到最多的就是网络的数据获取，此处就拿网络数据来举例：</p>
<p>首先确定数据模型，也就是实体类 NetSongBean；</p>
<p>其次定义一个数据仓库的接口NetSongRepository：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SongRepository</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取网络数据</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> method method</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> type 类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> offset 页数</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> size 页面加载量</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> ob</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    Observable&lt;List&lt;NetSongBean&gt;&gt; getSongList(String method, <span class="keyword">int</span> type, <span class="keyword">int</span> offset, <span class="keyword">int</span> size);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取缓存数据</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> type 类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> ob</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    Observable&lt;List&lt;NetSongBean&gt;&gt; getCacheSongList(<span class="keyword">int</span> type);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就可以写好用例，此处的业务为获取网络数据和缓存的数据，得到 Observable<netsongbean> 即可：</netsongbean></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetSongListUseCase</span> <span class="keyword">extends</span> <span class="title">UseCase</span>&lt;<span class="title">List</span>&lt;<span class="title">NetSongBean</span>&gt;, <span class="title">GetSongListUseCase</span>.<span class="title">Params</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SongRepository mSongRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    GetSongListUseCase(SongRepository songRepository, ThreadExecutor threadExecutor,</div><div class="line">                       PostExecutionThread postExecutionThread) &#123;</div><div class="line">        <span class="keyword">super</span>(threadExecutor, postExecutionThread);</div><div class="line">        mSongRepository = songRepository;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    Observable&lt;List&lt;NetSongBean&gt;&gt; buildUseCaseObservable(GetSongListUseCase.Params params) &#123;</div><div class="line">        <span class="keyword">return</span> mSongRepository.getSongList(params.method, params.type, params.offset, params.size);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取缓存数据 Observable</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> param 类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> Observable</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> Observable&lt;List&lt;NetSongBean&gt;&gt; buildCacheObservable(<span class="keyword">int</span> param) &#123;</div><div class="line">        <span class="keyword">return</span> mSongRepository.getCacheSongList(param);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样domain层的一个业务接口及用例便写好了，接下来我们需要实现 data 层。</p>
<h3 id="2、data-层"><a href="#2、data-层" class="headerlink" title="2、data 层"></a>2、data 层</h3><p>data 层的任务就是获取数据，具体实现业务所需数据及数据处理。 这一层做的工作相对比较多，上一步我们写好了业务接口，此处便要具体的实现从网络中获取数据。<br>首先我们需要根据网络数据来定义数据模型（如果数据模型和 domain 层的 NetSongBean 一样则无需多此一举）；<br>其次利用封装好的网络框架来实现网络操作， <a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">https://github.com/android10/Android-CleanArchitecture</a> 此项目还区分了数据源，我这里相对简化了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SongRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">SongRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Observable&lt;List&lt;NetSongBean&gt;&gt; getSongList(<span class="keyword">final</span> String method, <span class="keyword">final</span> <span class="keyword">int</span> type,</div><div class="line">                                                     <span class="keyword">final</span> <span class="keyword">int</span> offset, <span class="keyword">final</span> <span class="keyword">int</span> size) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> RetrofitHelper.getInstance().createApi(SongService.class)</div><div class="line">                .getMusicData(method, type, offset, size)</div><div class="line">truetruetruetrue.map(<span class="keyword">new</span> Function&lt;MusicEntity, List&lt;NetSongBean&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> List&lt;NetSongBean&gt; <span class="title">apply</span><span class="params">(@NonNull MusicEntity musicEntity)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        SongListMapper mapper = <span class="keyword">new</span> SongListMapper();</div><div class="line">                        <span class="keyword">return</span> mapper.transform(musicEntity.song_list);</div><div class="line">                    &#125;</div><div class="line">                &#125;).doOnNext(...);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Observable&lt;List&lt;NetSongBean&gt;&gt; getCacheSongList(<span class="keyword">final</span> <span class="keyword">int</span> type) &#123;</div><div class="line">        <span class="keyword">return</span> Observable.create(...);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里说明一下 SongListMapper ，由于我从百度音乐获取到的数据直接转换为 bean 类后属性极多而且大部分无用，所以此处采用数据模型映射来转换为具体需要的业务模型，即 NetSongBean。此方面可以参考 <a href="https://www.jianshu.com/p/c9384eef179e" target="_blank" rel="external">https://www.jianshu.com/p/c9384eef179e</a>,根据需要来取舍。</p>
<p>这一层实现了具体的网络数据获取，所以接下来我们就可以处理 UI 显示了。</p>
<h3 id="3、presentation-层"><a href="#3、presentation-层" class="headerlink" title="3、presentation 层"></a>3、presentation 层</h3><p>这一层主要用于 UI 展示及 Android 的业务处理，在这一层我才用了结构相对清晰的 MVP ，这一层和 domain 及 data 层的连接主要是通过 dagger2 来构建对象，然后 presenter 中进行处理 UI 的逻辑。</p>
<p>dagger2 构建对象:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="function">SongRepository <span class="title">provideSongRepository</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SongRepositoryImpl(mApplication);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 presenter 中注入对象并使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Inject</span></div><div class="line">NetMusicPresenter(GetSongListUseCase songListUseCase) &#123;</div><div class="line">    mSongListUseCase = songListUseCase;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadNetMusicList</span><span class="params">()</span> </span>&#123;</div><div class="line">    GetSongListUseCase.Params params = GetSongListUseCase.Params.forSongList(METHOD, mType, <span class="number">0</span>, SIZE);</div><div class="line">    mSongListUseCase.buildCacheObservable(mType)</div><div class="line">            .flatMap(songListBeen -&gt; mSongListUseCase.buildObservable(params))</div><div class="line">            .compose(RxHelper.ioMain())</div><div class="line">            .subscribeWith(...);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，presenter 处理完逻辑，activity 或者 fragment 控制视图显示，便完成了一个流程。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章简单介绍了在项目创建之初架构的选择。在开发过程中，架构不可能满足所有需求，所以我们也不能拘泥于架构。实际项目中，我们可能会因不同的业务进行组件化、模块化等，选择合适的方案，才能更加有效率的解决问题。 </p>
<p>最后，附上项目地址  <a href="https://github.com/Lauzy/TicktockMusic" target="_blank" rel="external">TicktockMusic</a> 。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android Project </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android自定义View：让播放、暂停按钮优雅的过渡]]></title>
      <url>/Lauzy.github.io/2017/08/12/201708PlayPauseView/</url>
      <content type="html"><![CDATA[<p>最近想写个音乐播放器，偶然看到轻听这款播放器的播放和暂停按钮，在切换过程中的动画很是吸引我。本着造轮子（其实是 github 上边没找到）的想法，就花了点时间撸出来了这个效果。</p>
<p>效果就是下边这个样子：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170812PlayPauseView.gif" width="200" height="210" alt="效果图"></p>
<a id="more"></a>
<p>下边说下实现方法，中间也踩了一些坑。</p>
<h2 id="测量及初始化"><a href="#测量及初始化" class="headerlink" title="测量及初始化"></a>测量及初始化</h2><p>首先要确实View的宽高，在这里由于是圆形按钮，所以设置宽高相等，onMeasure()方法中设置下即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">     mHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">     <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">     <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">     <span class="keyword">switch</span> (widthMode) &#123;</div><div class="line">         <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">             mWidth = mHeight = Math.min(mWidth, mHeight);</div><div class="line">             setMeasuredDimension(mWidth, mHeight);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">             <span class="keyword">float</span> density = getResources().getDisplayMetrics().density;</div><div class="line">             mWidth = mHeight = (<span class="keyword">int</span>) (<span class="number">50</span> * density); <span class="comment">//默认50dp</span></div><div class="line">             setMeasuredDimension(mWidth, mHeight);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>然后画出底部的圆形</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">canvas.drawCircle(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>, mRadius, mPaint);</div></pre></td></tr></table></figure>
<h2 id="计算Path"><a href="#计算Path" class="headerlink" title="计算Path"></a>计算Path</h2><p>1、初始化完毕后，怎么实现两个竖条到一个三角形的过渡呢？这里首先想到的就是自定义 View 常用的 drawPath 方法，抛开动画不谈，整个 View 变化过程其实就是两个矩形变成两个直角三角形的过程。</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog001.png" alt="实现"></p>
<p>就是这个样子。知道大体的思路，怎么搞呢，当然是开车了。</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/FACE001.gif"></p>
<p>就是 canvas.drawPath();</p>
<p>首先计算暂停时两个矩形的各个坐标位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">float</span> distance = mGapWidth;  <span class="comment">//暂停时左右两边矩形距离</span></div><div class="line">     <span class="keyword">float</span> barWidth = mRectWidth / <span class="number">2</span> - distance / <span class="number">2</span>;     <span class="comment">//一个矩形的宽度</span></div><div class="line">     <span class="keyword">float</span> leftLeftTop = barWidth;       <span class="comment">//左边矩形左上角</span></div><div class="line"></div><div class="line">     <span class="keyword">float</span> rightLeftTop = barWidth + distance;       <span class="comment">//右边矩形左上角</span></div><div class="line">     <span class="keyword">float</span> rightRightTop = <span class="number">2</span> * barWidth + distance;  <span class="comment">//右边矩形右上角</span></div><div class="line">     <span class="keyword">float</span> rightRightBottom = rightRightTop; <span class="comment">//右边矩形右下角</span></div></pre></td></tr></table></figure>
<p>bottom 的话直接加上矩形的高度即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mLeftPath.moveTo(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">         mLeftPath.lineTo(leftLeftTop, mRectHeight);</div><div class="line">         mLeftPath.lineTo(barWidth, mRectHeight);</div><div class="line">         mLeftPath.lineTo(barWidth, <span class="number">0</span>);</div><div class="line">         mLeftPath.close();</div><div class="line"></div><div class="line">         mRightPath.moveTo(rightLeftTop, <span class="number">0</span>);</div><div class="line">         mRightPath.lineTo(rightLeftTop, mRectHeight);</div><div class="line">         mRightPath.lineTo(rightRightBottom, mRectHeight);</div><div class="line">         mRightPath.lineTo(rightRightTop, <span class="number">0</span>);</div><div class="line">         mRightPath.close();</div></pre></td></tr></table></figure>
<p>这样两个竖条就出来了。</p>
<p>2、在一开始写的时候就写了这么多计算的方法，但是这时候矩形的边角会超出 View 的范围，所以后来计算了一波位置：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog02.png" alt="计算过程2"></p>
<p>如上图所示，这样就需要再更改一些参数：</p>
<p>首先定义出来这个矩形，计算下宽高：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">float</span> space = (<span class="keyword">float</span>) (mRadius / Math.sqrt(<span class="number">2</span>)); </div><div class="line">     mRectLT = (<span class="keyword">int</span>) (mRadius - space);</div><div class="line">     <span class="keyword">int</span> rectRB = (<span class="keyword">int</span>) (mRadius + space);</div><div class="line">     mRect.top = mRectLT;</div><div class="line">     mRect.bottom = rectRB;</div><div class="line">     mRect.left = mRectLT;</div><div class="line">     mRect.right = rectRB;</div></pre></td></tr></table></figure>
<p>然后只用在 确定 path 的路线时更改下坐标就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mLeftPath.moveTo(mRectLT, mRectLT);</div><div class="line">        mLeftPath.lineTo(leftLeftTop + mRectLT, mRectHeight + mRectLT);</div><div class="line">        mLeftPath.lineTo(barWidth + mRectLT, mRectHeight + mRectLT);</div><div class="line">        mLeftPath.lineTo(barWidth + mRectLT, mRectLT);</div><div class="line">        mLeftPath.close();</div><div class="line"></div><div class="line">        mRightPath.moveTo(rightLeftTop + mRectLT, mRectLT);</div><div class="line">        mRightPath.lineTo(rightLeftTop + mRectLT, mRectHeight + mRectLT);</div><div class="line">        mRightPath.lineTo(rightRightBottom + mRectLT, mRectHeight + mRectLT);</div><div class="line">        mRightPath.lineTo(rightRightTop + mRectLT, mRectLT);</div><div class="line">        mRightPath.close();</div></pre></td></tr></table></figure>
<p>这时候画出来两个 Path，暂停按钮就完美的呈现了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">canvas.drawPath(mLeftPath, mPaint);</div><div class="line">      canvas.drawPath(mRightPath, mPaint);</div></pre></td></tr></table></figure>
<p>如下图这样：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog01.png" alt="计算过程1"></p>
<h2 id="动画实现"><a href="#动画实现" class="headerlink" title="动画实现"></a>动画实现</h2><p>画完暂停按钮后，怎么让他动画变成三角形呢？一开始我想根据一些宽高的属性来指定动画的变化值，然后更新过程中再画出来，但是计算过程中发现涉及动画的矩形宽度都是从原始的大小到0过渡的，那统一的使用一个参数确定会不会更好点呢？当然会了，从1倍到0变化即可。</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/FACE002.jpg"></p>
<p>这时候就可以设置动画属性了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class="number">0</span> , <span class="number">1</span>);</div><div class="line">      valueAnimator.setDuration(<span class="number">200</span>);</div><div class="line">      valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">              mProgress = (<span class="keyword">float</span>) animation.getAnimatedValue();</div><div class="line">              invalidate();</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>然后根据 progress 在更新View的过程中来更改矩形的宽高值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">float</span> distance = mGapWidth * (<span class="number">1</span> - mProgress);  <span class="comment">//暂停时左右两边矩形距离</span></div><div class="line">      <span class="keyword">float</span> barWidth = mRectWidth / <span class="number">2</span> - distance / <span class="number">2</span>;     <span class="comment">//一个矩形的宽度</span></div><div class="line">      <span class="keyword">float</span> leftLeftTop = barWidth * mProgress;       <span class="comment">//左边矩形左上角</span></div><div class="line"></div><div class="line">      <span class="keyword">float</span> rightLeftTop = barWidth + distance;       <span class="comment">//右边矩形左上角</span></div><div class="line">      <span class="keyword">float</span> rightRightTop = <span class="number">2</span> * barWidth + distance;  <span class="comment">//右边矩形右上角</span></div><div class="line">      <span class="keyword">float</span> rightRightBottom = rightRightTop - barWidth * mProgress; <span class="comment">//右边矩形右下角</span></div></pre></td></tr></table></figure>
<p>这样便可以实现两个矩形到三角形的过渡了，执行动画结束后便是这个样子：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog03.png" alt="计算过程3"></p>
<p>两个矩形变成三角形之后，只需要画布旋转一下，两个暂停按钮到播放按钮的动画已经可以执行了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">canvas.rotate(rotation, mWidth / <span class="number">2f</span>, mHeight / <span class="number">2f</span>);</div></pre></td></tr></table></figure>
<p>到这里基本上已经结束了，但是写完使用的时候总觉得位置有点不对劲，后来发现确实有问题：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170813PlayPauseViewBlog07.png" alt="计算过程3"></p>
<p>如图所示，旋转过后 A 和 C 本来是紧靠着圆周的，而 B 距离圆周还有一定的距离。所以需要将其位移 x 的距离，让 OC 的长度等于 BO 的长度。此时圆心O也是三角形的外心。那么此时可以计算出OF的距离，公式如下：</p>
<p>√（( r / √2 ) ^ 2 + OF ^ 2） = √2 * r - OF</p>
<p>得出 OF 的长度为： 3 <em> √2 </em> r / 8</p>
<p>那么原矩形宽度的一半减去 OF 的值即为右移的距离，计算可得，右移的距离为 √2 * r / 8 用 Java 表示即<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">radius * Math.sqrt(<span class="number">2</span>) / <span class="number">8f</span></div></pre></td></tr></table></figure></p>
<p>换算为矩形的高度即</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mRectHeight / <span class="number">8f</span></div></pre></td></tr></table></figure>
<p>然后在画布位移一下即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">canvas.translate((<span class="keyword">float</span>) (mRectHeight * Math.sqrt(<span class="number">2</span>) / <span class="number">8f</span> * mProgress), <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上边几个步骤写完，整体效果已经实现了。后来又设置了一系列自定义的参数方便使用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;declare-styleable name=<span class="string">"PlayPauseView"</span>&gt;</div><div class="line">       &lt;attr name=<span class="string">"bg_color"</span> format=<span class="string">"color"</span>/&gt;</div><div class="line">       &lt;attr name=<span class="string">"btn_color"</span> format=<span class="string">"color"</span>/&gt;</div><div class="line">       &lt;attr name=<span class="string">"gap_width"</span> format=<span class="string">"float"</span>/&gt;</div><div class="line">       &lt;attr name=<span class="string">"space_padding"</span> format=<span class="string">"float"</span>/&gt;</div><div class="line">       &lt;attr name=<span class="string">"anim_duration"</span> format=<span class="string">"integer"</span>/&gt;</div><div class="line">       &lt;attr name=<span class="string">"anim_direction"</span>&gt;</div><div class="line">           &lt;<span class="keyword">enum</span> name=<span class="string">"positive"</span> value=<span class="string">"1"</span>/&gt;</div><div class="line">           &lt;<span class="keyword">enum</span> name=<span class="string">"negative"</span> value=<span class="string">"2"</span>/&gt;</div><div class="line">       &lt;/attr&gt;</div><div class="line">   &lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>
<p>所有代码都已经上传到 <a href="https://github.com/Lauzy" target="_blank" rel="external">我的Github</a> 上边了，<a href="https://github.com/Lauzy/PlayPauseView" target="_blank" rel="external">点击可查看</a>，希望提出问题相互讨论，随便给个 Star 再好不过了。<br>有问题交流可加QQ群 661614986 ，欢迎讨论。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android 自定义View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java注解、反射，安卓IOC（二）]]></title>
      <url>/Lauzy.github.io/2017/05/10/201706IOC2/</url>
      <content type="html"><![CDATA[<p>在项目开发中，大部分 Android 开发者都使用过 ButterKnife 这个通过注解简化代码的框架。部分 Android 开发者也使用过 xUtils 这种快速开发的框架。<br>两者均使用到了注解。在上一篇 <a href="http://lauzy.me/2017/05/09/201706IOC1/" target="_blank" rel="external">Java注解、反射，安卓IOC（一）</a> 中我们知道了注解及反射的用法。本篇会分别介绍下其实现机制。</p>
<h2 id="运行时注解"><a href="#运行时注解" class="headerlink" title="运行时注解"></a>运行时注解</h2><p>首先我们自己简单实现类似 xUtils 这种运行时注解框架。</p>
<h3 id="绑定-View-控件"><a href="#绑定-View-控件" class="headerlink" title="绑定 View 控件"></a>绑定 View 控件</h3><p>创建注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//运行时注解</span></div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)<span class="comment">//Target为属性</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FindView &#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>View解析代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewInject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        inject(<span class="keyword">new</span> ViewFinder(activity), activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        inject(<span class="keyword">new</span> ViewFinder(view), view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(View view, Object obj)</span> </span>&#123;</div><div class="line">        inject(<span class="keyword">new</span> ViewFinder(view), obj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(ViewFinder finder, Object obj)</span> </span>&#123;</div><div class="line">        injectFields(finder, obj);</div><div class="line">        injectMethods(finder, obj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectFields</span><span class="params">(ViewFinder finder, Object obj)</span> </span>&#123;</div><div class="line">        Class&lt;?&gt; clazz = obj.getClass();</div><div class="line">        Field[] fields = clazz.getDeclaredFields();<span class="comment">//获取所有变量</span></div><div class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(FindView.class)) &#123;</div><div class="line">                FindView findView = field.getAnnotation(FindView.class);<span class="comment">//获取注解</span></div><div class="line">                <span class="keyword">if</span> (findView.value() &lt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The id can't be -1."</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    View view = finder.findViewById(findView.value());</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        field.setAccessible(<span class="keyword">true</span>);<span class="comment">//破坏封装</span></div><div class="line">                        field.set(obj, view); <span class="comment">//设置属性</span></div><div class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要流程为通过反射获取并遍历所有变量，若变量被注解修饰，则将注解的 ID 赋值给指定方法并调用。</p>
<h3 id="绑定-OnClick-事件"><a href="#绑定-OnClick-事件" class="headerlink" title="绑定 OnClick 事件"></a>绑定 OnClick 事件</h3><p>创建注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD) <span class="comment">//Target为方法</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OnClick &#123;</div><div class="line">    <span class="keyword">int</span>[] id();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OnClick 事件注入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectMethods</span><span class="params">(ViewFinder finder, <span class="keyword">final</span> Object obj)</span> </span>&#123;</div><div class="line">    Method[] methods = obj.getClass().getDeclaredMethods();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> Method method : methods) &#123;</div><div class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(OnClick.class)) &#123;</div><div class="line">            OnClick onClick = method.getAnnotation(OnClick.class);</div><div class="line">            <span class="keyword">if</span> (onClick.id().length != <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i : onClick.id()) &#123;</div><div class="line">                    View view = finder.findViewById(i);</div><div class="line">                    method.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    view.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                            <span class="keyword">try</span> &#123;</div><div class="line">                                method.invoke(obj, v);</div><div class="line">                            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                                e.printStackTrace();</div><div class="line">                            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">                                e.printStackTrace();</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要流程为通过反射获取并遍历所有方法，若方法被注解修饰，遍历所有的 ID ，将注解的 ID 赋值给 findViewById 方法，然后在 setOnClickListener 调用 method 方法。</p>
<p>在 Activity 中的使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@FindView</span>(R.id.txt_ioc_test)</div><div class="line">    <span class="keyword">private</span> TextView mTxtTest;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_ioc);</div><div class="line">        ViewInject.bind(<span class="keyword">this</span>);</div><div class="line">        mTxtTest.setText(<span class="string">"测试"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(id = &#123;R.id.btn_ioc_test, R.id.btn_ioc_test2&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.btn_ioc_test:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"Click1"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.btn_ioc_test2:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"Click2"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上为运行时注解的简单实现，即 xUtils 使用的注解方法。但是这种方法因为通过一系列反射获取属性、方法等，对性能会有所影响，所以不建议在实际项目中使用，下边介绍下轻量级的编译时注解。</p>
<h2 id="编译时注解"><a href="#编译时注解" class="headerlink" title="编译时注解"></a>编译时注解</h2><p>ButterKnife 源码解析网上已经有很多不错的文章了，例如这篇 <a href="http://www.jianshu.com/p/0f3f4f7ca505" target="_blank" rel="external">ButterKnife源码分析</a> 讲的就很好。这里主要介绍下自己的大致实现以及编译时注解在 Android Studio 中的使用。</p>
<p>首先介绍下大概的项目结构，如下图所示：</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170626APT%E7%BB%93%E6%9E%84.png"></p>
<ul>
<li>annotation module: Java library  - 定义一系列注解。</li>
<li>injetc module: Android library  - 定义注解的接口及调用方法。</li>
<li>compiler module: Java library  - 自定义编译时注解 AbstractProcessor 在编译期间生成 java 代码。</li>
<li>app: 使用方法。</li>
</ul>
<p>本篇文章主要为介绍及学习，所以此处仅实现 setContentView 的编译时注解。</p>
<p>1、声明注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS) <span class="comment">//编译时注解</span></div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE) <span class="comment">//修饰类</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ContentView &#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、声明外界接口及方法</p>
<p>声明接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ContentInjector</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectContent</span><span class="params">(T obj, Activity activity)</span></span>; <span class="comment">//此处仅用 Activity 参数即可实现文章的 demo</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提供方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentViewInject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Activity activity)</span> </span>&#123;<span class="comment">//绑定</span></div><div class="line">        injectContentView(activity);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectContentView</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        Class&lt;? extends Activity&gt; clazz = activity.getClass();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ContentInjector injector = (ContentInjector) Class.forName(clazz.getName()</div><div class="line">                    + <span class="string">"$$ViewBinder"</span>).newInstance();</div><div class="line">            injector.injectContent(activity, activity);</div><div class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码为简单使用，butterknife 中的 UnBinder 解绑，使用 Map 缓存等暂不考虑。<br>此处的 Class.forName(“”) 以及 class.newInstance() 会对性能略有影响，butterknife 在此进行了 map 缓存优化。</p>
<p>3、自定义 AbstractProcessor，此处需将 module 设置为 Java library 才可继承 AbstractProcessor。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@AutoService</span>(Processor.class)</div><div class="line"><span class="meta">@SupportedSourceVersion</span>(value = SourceVersion.RELEASE_7)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentViewInjectProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//可用 @SupportedAnnotationTypes("com.lauzy.ContentView") 注解 ContentViewInjectProcessor 代替</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;String&gt; supportTypes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">        supportTypes.add(ContentView.class.getCanonicalName());</div><div class="line">        <span class="keyword">return</span> supportTypes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</div><div class="line">        String packageName;</div><div class="line">        String className;</div><div class="line">        <span class="comment">//遍历每个被 ContentView 修饰的 class 文件</span></div><div class="line">        <span class="keyword">for</span> (Element element : roundEnvironment.getElementsAnnotatedWith(ContentView.class)) &#123;</div><div class="line">            <span class="keyword">if</span> (element.getKind() == ElementKind.CLASS) &#123;</div><div class="line">                TypeElement typeElement = (TypeElement) element;</div><div class="line">                PackageElement packageEle = (PackageElement) element.getEnclosingElement();</div><div class="line">                packageName = packageEle.getQualifiedName().toString();<span class="comment">//获取包名</span></div><div class="line">                <span class="comment">//因为是 ElementKind.CLASS 类型，所以可以直接强制转换，获取类名</span></div><div class="line">                className = typeElement.getSimpleName().toString();</div><div class="line"></div><div class="line">                <span class="keyword">int</span> layoutId = typeElement.getAnnotation(ContentView.class).value();<span class="comment">//获取注解的 id</span></div><div class="line">                </div><div class="line">                <span class="comment">//拼接 Java 类的字符串</span></div><div class="line">                StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">                builder.append(<span class="string">"package "</span>).append(packageName).append(<span class="string">";\n"</span>);</div><div class="line">                builder.append(<span class="string">"import android.view.View;\n"</span>);</div><div class="line">                builder.append(<span class="string">"import android.app.Activity;\n"</span>);</div><div class="line">                builder.append(<span class="string">"import com.freedom.lauzy.inject.ContentInjector;\n"</span>);</div><div class="line">                builder.append(<span class="string">'\n'</span>);</div><div class="line"></div><div class="line">                builder.append(<span class="string">"public class "</span>).append(className + <span class="string">"$$ViewBinder"</span>);</div><div class="line">                builder.append(<span class="string">"&lt;T extends "</span>).append(className).append(<span class="string">"&gt;"</span>);</div><div class="line">                builder.append(<span class="string">" implements ContentInjector&lt;T&gt;"</span>);</div><div class="line">                builder.append(<span class="string">" &#123;\n"</span>);</div><div class="line">                builder.append(<span class="string">"@Override\n"</span>)</div><div class="line">                        .append(<span class="string">"public void injectContent(final T source, Activity activity) &#123;\n"</span>);</div><div class="line">                builder.append(<span class="string">"    ((Activity) source).setContentView("</span> + layoutId);</div><div class="line">                builder.append(<span class="string">");\n"</span>);</div><div class="line">                builder.append(<span class="string">"&#125;\n\n&#125;\n"</span>);</div><div class="line"></div><div class="line"></div><div class="line">                <span class="comment">//写入 Java 文件</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    JavaFileObject fileObject = processingEnv.getFiler().createSourceFile(</div><div class="line">                            packageName + <span class="string">"."</span> + className + <span class="string">"$$ViewBinder"</span>,</div><div class="line">                            typeElement);</div><div class="line">                    Writer writer = fileObject.openWriter();</div><div class="line">                    writer.write(builder.toString());</div><div class="line">                    writer.flush();</div><div class="line">                    writer.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                    System.out.println(<span class="string">"error"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>butterknife 中使用了 <a href="https://github.com/square/javapoet" target="_blank" rel="external">javapoet</a> 生成 Java 代码文件</p>
<p>此 module 的 gradle 配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(include: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</span></span></div><div class="line"><span class="function">    compile 'com.google.auto.service:auto-service:1.0-rc2' <span class="comment">// google 的生成源代码库</span></span></div><div class="line"><span class="function">    compile <span class="title">project</span><span class="params">(<span class="string">':annotation'</span>)</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">sourceCompatibility </span>= <span class="string">"1.7"</span></div><div class="line">targetCompatibility = <span class="string">"1.7"</span></div></pre></td></tr></table></figure></p>
<p>4、app 使用</p>
<p>app 的 gradle 配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    <span class="function">annotationProcessor <span class="title">project</span><span class="params">(<span class="string">':compiler'</span>)</span></span></div><div class="line"><span class="function">    compile <span class="title">project</span><span class="params">(<span class="string">':annotation'</span>)</span></span></div><div class="line"><span class="function">    compile <span class="title">project</span><span class="params">(<span class="string">':inject'</span>)</span></span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure></p>
<p>activity 中使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@ContentView</span>(R.layout.activity_ioc)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        ContentViewInject.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，整个流程就结束了。此时 build 整个项目则会在 app/build/generated/source/apt/debug/com.lauzy.freedom.lauzycode/IOC 文件夹下生成一个<br>IocActivity$$ViewBinder 的 Java 文件，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.lauzy.freedom.lauzycode.IOC;</div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> com.freedom.lauzy.inject.ContentInjector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocActivity</span>$$<span class="title">ViewBinder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">IocActivity</span>&gt; <span class="keyword">implements</span> <span class="title">ContentInjector</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectContent</span><span class="params">(<span class="keyword">final</span> T source, Activity activity)</span> </span>&#123;</div><div class="line">    ((Activity) source).setContentView(<span class="number">2130968606</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，其实是在编译时生成了一个 Java 文件，并在 activity 的 onCreate 方法中调用了 setContentView 方法。</p>
<p>注意事项：</p>
<p>1、若不使用 com.google.auto.service:auto-service:1.0-rc2 这个 google 的生成源代码库，则需要手动创建一个 META_INF 文件来指定注解。<br>需要在 compiler 中创建 compiler/src/main/resources/META-INF/services 目录(注意 META-INF 中间不是下划线，减号即可)，并新建 text 文件 javax.annotation.processing.Processor，<br>文件中写入自定义 AbstractProcessor 的全名称，如： com.lauzy.ContentViewInjectProcessor 。多个的话换行写入。</p>
<p>如下图所示：<br><img src="http://oop6dcmck.bkt.clouddn.com/20170626META_INF.png"></p>
<p>2、本文使用 annotationProcessor 的注解处理器代替 <a href="https://bitbucket.org/hvisser/android-apt" target="_blank" rel="external">android-apt</a> ，Google 内置的注解处理器，建议使用。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>编译时注解的优点 ：在于对性能影响很小的情况下，大量简化程序员的代码，像 butterknife 在首次查找类的时候对性能稍有影响，其他情况下影响微乎其微。<br>编译时注解的缺点 ：build 过程生成更多的代码，增加了类和方法的数量；对性能影响很小，但是多少会有的。</p>
<p>本人认为编译时注解在优化代码，提高效率方面是有很大优势的，远远大于其缺点。</p>
<p>本篇文章主要是分析及梳理大致的实现方式，仅为学习使用，所有代码均托管在 <a href="https://github.com/Lauzy/LauzyCode" target="_blank" rel="external">我的Github</a> 上。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android 解析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java注解、反射，安卓IOC（一）]]></title>
      <url>/Lauzy.github.io/2017/05/09/201706IOC1/</url>
      <content type="html"><![CDATA[<h2 id="Java-注解-Annotation"><a href="#Java-注解-Annotation" class="headerlink" title="Java 注解 (Annotation)"></a>Java 注解 (Annotation)</h2><p>Java 注解，指的是代码里边的特殊标记，可以在编译、运行时被读取，并执行相应的处理。Annotation 可用于修饰包、类、构造器、方法、变量等。</p>
<a id="more"></a>
<h3 id="Annotation-类型"><a href="#Annotation-类型" class="headerlink" title="Annotation 类型"></a>Annotation 类型</h3><p>此处来一张网上的图 (可在新标签页中放大查看)</p>
<p><img src="http://oop6dcmck.bkt.clouddn.com/20170626Java%E6%B3%A8%E8%A7%A3.jpg" width="710" height="670" alt="注解大全"></p>
<p>转自<a href="http://www.cnblogs.com/peida/archive/2013/04/26/3038503.html" target="_blank" rel="external">深入理解Java：注解(Annotation)</a></p>
<h4 id="基本-Annotation"><a href="#基本-Annotation" class="headerlink" title="基本 Annotation"></a>基本 Annotation</h4><p>Java中5个基本的注解分别为：</p>
<ul>
<li>@Override  ————  用来限定子类重写父类的方法。</li>
<li>@Deprecated  ————  标记已经过时的方法。</li>
<li>@SuppressWarnings  ————  抑制编译器的警告。</li>
<li>@SafeVarargs  ————  Java7 抑制“堆污染”警告，可变参数与泛型类一起使用会出现类型安全警告，若开发人员确信不会出现问题，可用此注解进行声明。</li>
<li>@FunctionalInterface  ————  Java8 函数式接口，检测指定某个接口中只有一个抽象方法。</li>
</ul>
<h4 id="元-Annotation"><a href="#元-Annotation" class="headerlink" title="元 Annotation"></a>元 Annotation</h4><p>元Annotation是用来修饰其他注解定义，即注解其他注解。<br>Java中有6种元注解，其中@Native注解一般用于给IDE工具做提示用。下边具体介绍其他几种注解。</p>
<p>1、@Retention：指定本修饰的注解可以保留多长时间。包含了一个RetentionPolicy类的value值，所以需指定该value的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</div><div class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>RetentionPolicy.CLASS  ————  默认值，编译器将注解记录在字节码文件中，程序运行时，JVM不保留注解信息。</li>
<li>RetentionPolicy.RUNTIME  ————  编译器将注解记录在字节码文件中，程序运行时，JVM可以获得注解信息，可通过反射获取该注解的信息。</li>
<li>RetentionPolicy.SOURCE  ————  注解只保留在源代码中，编译器直接丢弃。</li>
</ul>
<p>2、@Target：指定被修饰的注解能用于哪些程序元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</div><div class="line">    ElementType[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ElementType.ANNOTATION_TYPE: 修饰Annotation。</li>
<li>ElementType.TYPE: 修饰类、接口（包括注解类型）、枚举。</li>
<li>ElementType.FIELD: 修饰成员变量。</li>
<li>ElementType.METHOD: 修饰方法定义。</li>
<li>ElementType.PARAMETER: 修饰参数定义。</li>
<li>ElementType.CONSTRUCTOR: 修饰构造方法。</li>
<li>ElementType.LOCAL_VARIABLE: 修饰局部变量。</li>
<li>ElementType.PACKAGE: 修饰包定义。</li>
</ul>
<p>在Java8中新增了两个ElementType参数，用来限定哪些类型可以标注</p>
<ul>
<li>ElementType.TYPE_PARAMETER:  类型变量</li>
<li>ElementType.TYPE_USE:  使用类型的任何语句</li>
</ul>
<p>TYPE_PARAMETER举例，若要对泛型进行标注，则定义注解时需设定Target为TYPE_PARAMETER：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE_PARAMETER)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Animal&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zoo</span>&lt;@<span class="title">Animal</span> <span class="title">T</span>&gt;</span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TYPE_USE可用于标注各种使用到类型的地方，举例如下(上述例子可以将TYPE_PARAMETER改为TYPE_USE)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">定义：</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE_USE)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UseTest</span></span>&#123;&#125;</div><div class="line"></div><div class="line">使用：</div><div class="line"><span class="meta">@UseTest</span> String content; 修饰类型，</div><div class="line">此种写法相当于java.lang.<span class="meta">@UseTest</span> String content; </div><div class="line">若<span class="meta">@UseTest</span> java.lang.String content; 此为定义局部变量，写法不合法，UseTest需指定Target为LOCAL_VARIABLE。</div><div class="line"></div><div class="line">String content = (<span class="meta">@UseTest</span> String) obj; <span class="comment">//类型转换</span></div><div class="line">List&lt;<span class="meta">@UseTest</span> String&gt; infos = <span class="keyword">new</span> ArrayList&lt;&gt;();  <span class="comment">//泛型</span></div><div class="line">implements <span class="meta">@UseTest</span> XXXX;  <span class="comment">//实现接口</span></div><div class="line"><span class="keyword">throws</span> <span class="meta">@UseTest</span> NullPointException;  <span class="comment">//声明抛出异常</span></div></pre></td></tr></table></figure>
<p>3、@Documented：被该注解修饰的注解会被javadoc工具提取成文档。如果一个注解由@Documented修饰，则使用该注解的程序api文档中会包含该注解的说明。</p>
<p>4、@Inherited: 此注解修饰的注解具有继承性。若@XXX被@Inherited修饰，则使用@XXX注解的类具有继承性，其子类自动被@XXX修饰。</p>
<p>5、@Repeatable：重复注解，Java8的新特性。</p>
<p>在Java8之前，重复注解的解决方案代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Student&#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">定义一个容器注解：</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Students&#123;</div><div class="line">    Student[] value();</div><div class="line">&#125;</div><div class="line"></div><div class="line">使用：</div><div class="line"><span class="meta">@Students</span>(&#123;<span class="meta">@Student</span>(name = <span class="string">"Jack"</span>), <span class="meta">@Student</span>(name = <span class="string">"Will"</span>)&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span></span>&#123;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Java8中的方案则如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义如上的容器注解Students，添加Repeatable注解，如下所示</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Repeatable</span>(Students.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Student&#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">使用：</div><div class="line"><span class="meta">@Student</span>(name = <span class="string">"Jack"</span>)</div><div class="line"><span class="meta">@Student</span>(name = <span class="string">"Will"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span></span>&#123;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java-反射简介"><a href="#Java-反射简介" class="headerlink" title="Java 反射简介"></a>Java 反射简介</h2><p>通过Java反射可以获取对象的属性、方法等。</p>
<p>1、获取类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//第一种方式</span></div><div class="line">Class stuClazz1 = Class.forName(<span class="string">"com.lauzy.freedom.ReflectDemo.Student"</span>);</div><div class="line"></div><div class="line"><span class="comment">//第二种方式</span></div><div class="line">Class stuClazz2 = Student.class;</div><div class="line"></div><div class="line"><span class="comment">//第三种方式</span></div><div class="line">Student stu3 = <span class="keyword">new</span> Student();</div><div class="line">Class stuClazz3 = stu3.getClass();</div></pre></td></tr></table></figure>
<p>2、创建对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Class stuClazz2 = Student.class;</div><div class="line">Object stu = stuClazz2.newInstance();</div></pre></td></tr></table></figure>
<p>3、获取属性例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Object stu = stuClazz2.newInstance();   <span class="comment">//获取实例</span></div><div class="line">Field age = stuClazz2.getDeclaredField(<span class="string">"age"</span>);  <span class="comment">//获取特定属性</span></div><div class="line">age.setAccessible(<span class="keyword">true</span>);    <span class="comment">//打破封装性</span></div><div class="line">age.set(stu, <span class="number">25</span>);   <span class="comment">//设置属性</span></div></pre></td></tr></table></figure>
<p>4、方法总结</p>
<ul>
<li>getDeclaredFields(): 获取所有属性。</li>
<li>getDeclaredField(“<em>*</em>“): 获取特定的属性。</li>
<li>getModifiers(): 获取属性或方法的修饰符。</li>
<li>getType(): 获取属性或方法的类型名。</li>
<li>getDeclaredMethods()：获取所有方法。</li>
<li>getReturnType()：获取方法的返回类型。</li>
<li>getParameterTypes()：获取方法的参数类型。</li>
<li>getDeclaredMethod(“<em>*</em>“,参数类型.class,……): 获取特定的方法。</li>
<li>getDeclaredConstructors(): 获取所有的构造方法。</li>
<li>getDeclaredConstructor(参数类型.class,……): 获取特定的构造方法。</li>
<li>getSuperclass()：获取继承的父类。</li>
<li>getInterfaces()：获取实现的所有接口。</li>
<li>field.set(Object object, Object value);//设置object对象的value属性</li>
<li>method.invoke(Object object, Object… values); //调用方法，values为方法的参数</li>
</ul>
<p>5、代码实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Class stuClazz1 = Class.forName(<span class="string">"com.lauzy.freedom.ReflectDemo.Student"</span>);</div><div class="line">    Class stuClazz2 = Student.class;</div><div class="line">    Student stu3 = <span class="keyword">new</span> Student();</div><div class="line">    Class stuClazz3 = stu3.getClass();</div><div class="line">    <span class="keyword">for</span> (Field field : stuClazz1.getDeclaredFields()) &#123;</div><div class="line">        System.out.println(Modifier.toString(field.getModifiers())  <span class="comment">//获取属性修饰符</span></div><div class="line">                + <span class="string">"-"</span> + field.getType().getSimpleName()     <span class="comment">//获取属性类型名</span></div><div class="line">                + <span class="string">"-"</span> + field.getName());  <span class="comment">//获取属性名</span></div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"--------"</span>);</div><div class="line">    <span class="keyword">for</span> (Method method : stuClazz2.getDeclaredMethods()) &#123;</div><div class="line">        System.out.println(Modifier.toString(method.getModifiers())  <span class="comment">//获取方法修饰符</span></div><div class="line">                + <span class="string">"-"</span> + method.getReturnType().toString()   <span class="comment">//方法返回类型名</span></div><div class="line">                + <span class="string">"-"</span> + method.getName());  <span class="comment">//方法名</span></div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"--------"</span>);</div><div class="line">    System.out.println(stuClazz2.getDeclaredConstructor(String.class, String.class, <span class="keyword">int</span>.class).toString());</div><div class="line">    System.out.println(<span class="string">"--------"</span>);</div><div class="line">    System.out.println(stuClazz2.getSuperclass().getName().toString());</div><div class="line">    System.out.println(<span class="string">"--------"</span>);</div><div class="line">    <span class="keyword">for</span> (Class aClass : stuClazz2.getInterfaces()) &#123;</div><div class="line">        System.out.println(aClass.getName());</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"--------"</span>);</div><div class="line">    Object stu = stuClazz2.newInstance();   <span class="comment">//获取实例</span></div><div class="line">    Field name = stuClazz2.getDeclaredField(<span class="string">"name"</span>);  <span class="comment">//获取特定属性</span></div><div class="line">    name.setAccessible(<span class="keyword">true</span>);    <span class="comment">//打破封装性</span></div><div class="line">    name.set(stu, <span class="string">"Jack"</span>);   <span class="comment">//设置属性</span></div><div class="line">    System.out.println(name.get(stu));</div><div class="line"></div><div class="line">    Method profile = stuClazz2.getDeclaredMethod(<span class="string">"getProfile"</span>, String.class, <span class="keyword">int</span>.class);<span class="comment">//特定方法</span></div><div class="line">    profile.setAccessible(<span class="keyword">true</span>);</div><div class="line">    profile.invoke(stu, <span class="string">"male"</span>, <span class="number">30</span>);<span class="comment">//调用方法</span></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span>-String-name</div><div class="line"><span class="keyword">public</span>-String-gender</div><div class="line"><span class="keyword">private</span>-<span class="keyword">int</span>-age</div><div class="line">--------</div><div class="line"><span class="keyword">public</span>-<span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span>-<span class="title">getName</span></span></div><div class="line"><span class="class"><span class="title">public</span>-<span class="title">void</span>-<span class="title">setName</span></span></div><div class="line"><span class="class"><span class="title">private</span>-<span class="title">void</span>-<span class="title">getProfile</span></span></div><div class="line"><span class="class"><span class="title">public</span>-<span class="title">int</span>-<span class="title">getAge</span></span></div><div class="line"><span class="class"><span class="title">public</span>-<span class="title">void</span>-<span class="title">setAge</span></span></div><div class="line"><span class="class">--------</span></div><div class="line"><span class="class"><span class="title">public</span> <span class="title">com</span>.<span class="title">lauzy</span>.<span class="title">freedom</span>.<span class="title">ReflectDemo</span>.<span class="title">Student</span>(<span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span>,<span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span>,<span class="title">int</span>)</span></div><div class="line"><span class="class">--------</span></div><div class="line"><span class="class"><span class="title">com</span>.<span class="title">lauzy</span>.<span class="title">freedom</span>.<span class="title">AnnotationDemo</span>.<span class="title">Person</span></span></div><div class="line"><span class="class">--------</span></div><div class="line"><span class="class"><span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></div><div class="line"><span class="class">--------</span></div><div class="line"><span class="class"><span class="title">Jack</span></span></div><div class="line">Name : Jack ; Gender : male ; Age : 30</div></pre></td></tr></table></figure>
<h2 id="自定义注解、反射获取属性"><a href="#自定义注解、反射获取属性" class="headerlink" title="自定义注解、反射获取属性"></a>自定义注解、反射获取属性</h2><p>分别定义Name、Gender和SaveMoney注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@interface</span> Name &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "Will"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Gender &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SaveMoney &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">money</span><span class="params">()</span> <span class="keyword">default</span> 10000</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">term</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">platform</span><span class="params">()</span> <span class="keyword">default</span> "XXX"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注解的使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="meta">@Name</span>(value = <span class="string">"Jack"</span>)</div><div class="line">    <span class="meta">@Gender</span>(value = <span class="string">"man"</span>)</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@SaveMoney</span>(money = <span class="number">20000</span>, term = <span class="number">5</span>, platform = <span class="string">"ChinaBank"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"and then he spent "</span> + money  + <span class="string">" on clothes."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>利用反射获取注解的属性和方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnUtils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Field field : clazz.getFields()) &#123;</div><div class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(Name.class) &amp;&amp; field.isAnnotationPresent(Gender.class)) &#123;</div><div class="line">                Name name = field.getAnnotation(Name.class);</div><div class="line">                Gender gender = field.getAnnotation(Gender.class);</div><div class="line">                System.out.print(<span class="string">"A "</span> + gender.value() + <span class="string">" called "</span> + name.value());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;Person&gt; personClass = Person.class;</div><div class="line">            Method[] methods = personClass.getMethods();</div><div class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">                <span class="keyword">if</span> (method.isAnnotationPresent(SaveMoney.class)) &#123;</div><div class="line">                    SaveMoney saveMoney = method.getAnnotation(SaveMoney.class);</div><div class="line">                    System.out.print(<span class="string">" deposited "</span> + saveMoney.money() + <span class="string">"RMB to "</span> +</div><div class="line">                            saveMoney.platform() + <span class="string">" for "</span> + saveMoney.term() + <span class="string">" months, "</span>);</div><div class="line"></div><div class="line">                    method.invoke(personClass.newInstance(), <span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AnnUtils.test(Person.class);</div></pre></td></tr></table></figure>
<p>此时的输出结果为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A man named Jack deposited <span class="number">20000</span>RMB to ChinaBank <span class="keyword">for</span> <span class="number">5</span> months, and then he spent <span class="number">1000</span> on clothes.</div></pre></td></tr></table></figure>
<p>此篇博客为基础用法及实例，下一篇<a href="http://lauzy.me/2017/05/09/201706IOC2/" target="_blank" rel="external">Java注解、反射，安卓IOC（二）</a>会介绍注解和反射在Android中的使用，运行时注解及butterknife的简单实现。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android 解析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LBehavior]]></title>
      <url>/Lauzy.github.io/2017/04/14/201705Behavior/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Android Design包下的CoordinatorLayout是相当重要的一个控件，它让许多动画的实现变为可能，而且更加简便。按照官方解释CoordinatorLayout是用来协调子View交互动作的父view，Behavior可以看做CoordinatorLayout的子view实现交互的组件。<br>本篇博客主要用来实现仿知乎的Android客户端首页的滑动嵌套动画，前段时间利用空闲时间撸了一款<a href="https://github.com/Lauzy/GankPro" target="_blank" rel="external">干货集中营的客户端</a>，做的时候采用自定义Behavior实现了整个嵌套滑动，并抽离了出来作为一个lib方便使用。</p>
</blockquote>
<a id="more"></a>
<h2 id="先来一波效果图："><a href="#先来一波效果图：" class="headerlink" title="先来一波效果图："></a>先来一波效果图：</h2><p><img src="http://oop6dcmck.bkt.clouddn.com/20170420B01.gif" width="270" height="450" alt="效果图1"><img src="http://oop6dcmck.bkt.clouddn.com/20170420B02.gif" width="270" height="450" alt="效果图2"></p>
<h2 id="效果实现思路："><a href="#效果实现思路：" class="headerlink" title="效果实现思路："></a>效果实现思路：</h2><ol>
<li><p>判断手势</p>
</li>
<li><p>计算距离</p>
</li>
<li><p>触发动画</p>
</li>
</ol>
<h2 id="文章目录："><a href="#文章目录：" class="headerlink" title="文章目录："></a>文章目录：</h2><ol>
<li>CoordinatorLayout及Behavior简介</li>
<li>自定义Behavior</li>
<li>仿知乎效果的动画实现及个性化</li>
</ol>
<h2 id="CoordinatorLayout和Behavior简介"><a href="#CoordinatorLayout和Behavior简介" class="headerlink" title="CoordinatorLayout和Behavior简介"></a>CoordinatorLayout和Behavior简介</h2><p>Android滑动嵌套的原理及Behavior分析已经有很多大神讲解过了，推荐Loader大神的<a href="http://blog.csdn.net/qibin0506/article/details/50377592" target="_blank" rel="external">源码看CoordinatorLayout.Behavior原理</a>。</p>
<p>这里简单介绍下，嵌套滑动时父View(需实现NestedScrollingParent接口)和子View(需实现NestedScrollingChild接口)之间的交互是由NestedScrolling两个接口控制，NestedScrollingParentHelper和NestedScrollingChildHelper两个辅助类分别处理了父布局和子View的大量逻辑。</p>
<p>滑动嵌套的简单流程为：控制子View(如RecyclerView)的onInterceptTouchEvent和onTouchEvent的事件分发 -&gt; 调用NestedScrollingChildHelper不同的方法 -&gt; 处理与NestedScrollingParent交互的逻辑 -&gt; 父布局(如CoordinatorLayout)实现NestedScrollingParent处理具体的逻辑<br> (-&gt; 而Behavior的事件处理方法则主要由CoordinatorLayout的各种事件处理方法来调用，返回值控制了父布局的事件消费情况)。</p>
<p>具体方法的调用大家可以再研读Loader大神的博客。下边简单介绍下自定义Behavior实现的具体方法<a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html" target="_blank" rel="external">Behavior官网</a>。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="1-layoutDependsOn"><a href="#1-layoutDependsOn" class="headerlink" title="1.layoutDependsOn"></a>1.layoutDependsOn</h4><p>确定提供的子视图是否具有另一个特定的兄弟视图作为布局依赖关系。即用来确定依赖关系，如果某个控件需要依赖控件，则重写该方法<br>如AppBarLayout</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> AppBarLayout;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-onDependentViewChanged"><a href="#2-onDependentViewChanged" class="headerlink" title="2.onDependentViewChanged"></a>2.onDependentViewChanged</h4><p>依赖视图的大小、位置发生变化时调用此方法，重写此方法可以处理child的响应。如常用的AppBarLayout，当其发生变化时，childView会根据重写的方法作出响应。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent， View child， View dependency)</span> </span>&#123;</div><div class="line">       offsetChildAsNeeded(parent， child， dependency);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-onStartNestedScroll"><a href="#3-onStartNestedScroll" class="headerlink" title="3.onStartNestedScroll"></a>3.onStartNestedScroll</h4><p>当CoordinatorLayout的子View开始嵌套滑动时（此处的滑动View必须实现NestedScrollingChild接口），触发此方法。添加Behavior的控件需要为CoordinatorLayout的直接子View，否则不会继续流程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//判断是否垂直滑动</span></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout， View child， View directTargetChild， View target， <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class="number">0</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="4-onNestedPreScroll"><a href="#4-onNestedPreScroll" class="headerlink" title="4.onNestedPreScroll"></a>4.onNestedPreScroll</h4><p>此方法中consumed，指的是父布局要消费的滚动距离，consumed[0]为水平方向消耗的距离，consumed[1]为垂直方向消耗的距离，可控制此参数作出相应的调整。<br>如垂直滑动时，若设置consumed[1]=dy，则代表父布局全部消耗了滑动的距离，类似AppBarLayout这种效果，当其由展开到折叠过渡时，通过consumed控制其中的嵌套滑动。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 触发滑动嵌套滚动之前调用的方法</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> coordinatorLayout coordinatorLayout父布局</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> child             使用Behavior的子View</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> target            触发滑动嵌套的View(实现NestedScrollingChild接口)</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> dx                滑动的X轴距离</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> dy                滑动的Y轴距离</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> consumed          父布局消费的滑动距离，consumed[0]和consumed[1]代表X和Y方向父布局消费的距离，默认为0</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(CoordinatorLayout coordinatorLayout， View child， View target， </span></span></div><div class="line"><span class="function"><span class="params">    <span class="keyword">int</span> dx， <span class="keyword">int</span> dy， <span class="keyword">int</span>[] consumed)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onNestedPreScroll(coordinatorLayout， child， target， dx， dy， consumed);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-onNestedScroll"><a href="#5-onNestedScroll" class="headerlink" title="5.onNestedScroll"></a>5.onNestedScroll</h4><p>此方法中dyConsumed代表TargetView消费的距离，如RecyclerView滑动的距离，可通过控制NestScrollingChild的滑动来指定一些动画，<br>本篇博客实现的效果主要就是重写此方法，若根据onNestedPreScroll中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故选择了重写此方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * 滑动嵌套滚动时触发的方法</span></div><div class="line"><span class="comment">    *</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> coordinatorLayout coordinatorLayout父布局</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> child             使用Behavior的子View</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> target            触发滑动嵌套的View</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> dxConsumed        TargetView消费的X轴距离</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> dyConsumed        TargetView消费的Y轴距离</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> dxUnconsumed      未被TargetView消费的X轴距离</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> dyUnconsumed      未被TargetView消费的Y轴距离(如RecyclerView已经到达顶部或底部，</span></div><div class="line"><span class="comment"> *				而用户继续滑动，此时dyUnconsumed的值不为0，可处理一些越界事件)</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout， View child， View target， </span></span></div><div class="line"><span class="function"><span class="params">	<span class="keyword">int</span> dxConsumed， <span class="keyword">int</span> dyConsumed， <span class="keyword">int</span> dxUnconsumed， <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onNestedScroll(coordinatorLayout， child， target， </div><div class="line">           dxConsumed， dyConsumed， dxUnconsumed， dyUnconsumed);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="自定义Behavior"><a href="#自定义Behavior" class="headerlink" title="自定义Behavior"></a>自定义Behavior</h2><h3 id="自定义Behavior主要有两种实现方式："><a href="#自定义Behavior主要有两种实现方式：" class="headerlink" title="自定义Behavior主要有两种实现方式："></a>自定义Behavior主要有两种实现方式：</h3><p>第一种为layoutDependsOn和onDependentViewChanged，child需要依赖于dependency，当dependency View发生变化时，onDependentViewChanged会被调用，child可作出响应的响应。<br>第二种为onStartNestedScroll 等嵌套滑动的流程，首先在onStartNestedScroll方法中判断是否垂直滑动等，然后在onNestedPreScroll、onNestedScroll等方法中实现效果。<br>由于第一种方式会导致child必须依赖于某个特定的View，这样就导致灵活性不太强，所以本文采用第二种实现方式。</p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>在嵌套滑动开始之前，可以判断是否垂直滑动，做一些初始化工作，比如获取childView的初始坐标。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//判断垂直滑动</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (isInit) &#123;<span class="comment">// 设置标记，防止new Anim导致的parent和child坐标变化</span></div><div class="line">           mCommonAnim = <span class="keyword">new</span> LTitleBehaviorAnim(child);</div><div class="line">           isInit = <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class="number">0</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>触发嵌套滑动之前，可以在此处判断一些滑动手势，以及父布局的消费情况。由于若根据此方法中dy来判断，则当RecyclerView条目很少时，也会触发逻辑代码，故本文只是在此方法中给动画做一些自定义操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mCommonAnim != <span class="keyword">null</span>) &#123;</div><div class="line">           mCommonAnim.setDuration(mDuration);</div><div class="line">           mCommonAnim.setInterpolator(mInterpolator);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>滑动嵌套滚动时触发的方法，以Title(Toolbar)为例，若向上滑动，则隐藏Toolbar，反之显示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class="line">       <span class="keyword">if</span> (dyConsumed &lt; <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (isHide) &#123;</div><div class="line">               mCommonAnim.show();</div><div class="line">               isHide = <span class="keyword">false</span>;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dyConsumed &gt; <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (!isHide) &#123;</div><div class="line">               mCommonAnim.hide();</div><div class="line">               isHide = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="仿知乎效果的动画实现及个性化"><a href="#仿知乎效果的动画实现及个性化" class="headerlink" title="仿知乎效果的动画实现及个性化"></a>仿知乎效果的动画实现及个性化</h2><p>大家都知道知乎客户端的各种动画非常优雅，网上仿写其动画的博客也是层出不穷，之前利用空闲时间撸了一款<a href="https://github.com/Lauzy/GankPro" target="_blank" rel="external">干货集中营客户端</a>，突然想到了采用知乎的首页效果，然后就拿起键盘，复制粘贴搞了起来。<br>开个玩笑，其实大致实现效果还是比较容易的，这里主要分享下实现的思路以及需要注意的细节。</p>
<p>首先大致流程就如上边几个方法介绍，动画效果的实现也非常简单，这里以显示和隐藏BottomView为例，直接上代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LBottomBehaviorAnim</span><span class="params">(View bottomView)</span> </span>&#123;</div><div class="line">    mBottomView = bottomView;</div><div class="line">       mOriginalY = mBottomView.getY();<span class="comment">//因为Y值随动画会发生变化，嵌套滑动开始之前先记录初始的坐标。</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;<span class="comment">//显示</span></div><div class="line">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY);</div><div class="line">       animator.setDuration(getDuration());</div><div class="line">       animator.setInterpolator(getInterpolator());</div><div class="line">       animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class="line">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       animator.start();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hide</span><span class="params">()</span> </span>&#123;<span class="comment">//隐藏</span></div><div class="line">       ValueAnimator animator = ValueAnimator.ofFloat(mBottomView.getY(), mOriginalY + mBottomView.getHeight());</div><div class="line">       animator.setDuration(getDuration());</div><div class="line">       animator.setInterpolator(getInterpolator());</div><div class="line">       animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class="line">               mBottomView.setY((Float) valueAnimator.getAnimatedValue());</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       animator.start();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>整个大致流程这样其实已经结束了，但是还达不到我们预期的效果。再次打开知乎客户端，以很缓慢的速度滑一滑，这时候你会发现竟然没有触发动画，OK，先记录下这个问题；再以很缓慢的速度向下滑，突然又触发动画了。整体来看，知乎的动画有种分层嵌套的效果。</p>
<p>先来解决第一个问题，只用加一行代码，即dyConsumed距离大于一定值的时候才允许滑动。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span>(Math.abs(dyConsumed) &gt; minScrollY)&#123;</div><div class="line">    ...<span class="comment">//onNestedScroll里边的逻辑代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于第二个问题，我一开始想，滑动一定的距离，难道要根据判断RecyclerView滑动的距离来判断是否触发动画？其实思路是正确的，但是我们不可能再去实现addOnScrollListener的一系列方法。这时候再想一想嵌套滑动，dyConsumed不就是recyclerView消费的距离吗，想到这里，那就很好实现了，只用将dyConsumed相加，相加的和大于一定值，就触发动画，代码也是很简单，结合第一个问题，知乎的效果就实现了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mTotalScrollY += dyConsumed;<span class="comment">//累加消费的距离</span></div><div class="line">   <span class="keyword">if</span> (Math.abs(dyConsumed) &gt; minScrollY || Math.abs(mTotalScrollY) &gt; scrollYDistance) &#123;</div><div class="line">    ...<span class="comment">//onNestedScroll里边的逻辑代码</span></div><div class="line">       mTotalScrollY = <span class="number">0</span>;<span class="comment">//动画执行完毕后重置</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>接下来我们可以自定义设置一些属性值。首先要获取这个Behavior对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonBehavior <span class="title">from</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">       ViewGroup.LayoutParams params = view.getLayoutParams();</div><div class="line">       <span class="keyword">if</span> (!(params <span class="keyword">instanceof</span> CoordinatorLayout.LayoutParams)) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The view is not a child of CoordinatorLayout"</span>);</div><div class="line">       &#125;</div><div class="line">       CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();</div><div class="line">       <span class="keyword">if</span> (!(behavior <span class="keyword">instanceof</span> CommonBehavior)) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The view's behavior isn't an instance of CommonBehavior. Try to check the [app:layout_behavior]"</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> (CommonBehavior) behavior;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>然后可以设置对象的属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> CommonBehavior <span class="title">setDuration</span><span class="params">(<span class="keyword">int</span> duration)</span> </span>&#123;</div><div class="line">       mDuration = duration;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> CommonBehavior <span class="title">setInterpolator</span><span class="params">(Interpolator interpolator)</span> </span>&#123;</div><div class="line">       mInterpolator = interpolator;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> CommonBehavior <span class="title">setMinScrollY</span><span class="params">(<span class="keyword">int</span> minScrollY)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.minScrollY = minScrollY;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> CommonBehavior <span class="title">setScrollYDistance</span><span class="params">(<span class="keyword">int</span> scrollYDistance)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.scrollYDistance = scrollYDistance;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>至此，整个流程已经实现了，其他TitleView及悬浮按钮的动画也是类似的规则，我又给Behavior和动画设置了Common类剔除掉一些重复代码，这里就不贴出来了。具体可以参考<a href="https://github.com/Lauzy/LBehavior" target="_blank" rel="external">我的Github</a></p>
<p>动画已经实现，但是写代码的时候坑貌似永远是填不完的。</p>
<p>当我使用写出来的动画时，就发现了一个问题，由于是CoordinatorLayout作为根布局，所以RecyclerView顶部的item被toolbar遮挡了，<br>我们再看看知乎，轻轻滑动一小段距离，发现他的顶部Toolbar遮挡的地方其实是空白，可以发现知乎其实也是有这个问题的，不过人家处理的很好，所以用户基本上不会发现。<br>不过这个问题还是可以解决的，比如判断item为第一个时，可以加一个View填充，个人采用的自定义ItemDecoration，判断下若为第一个item，outRect.set(0, titleHeight, 0, 0)，设置titleHeight的大小即可。BottomView也是同理，解决方法也是有不少的。</p>
<p>还有一个问题是写demo的时候发现的，我用LinearLayout作为BottomView，发现浮动按钮竟然是在LinearLayout上层执行各种动画，看起来不太和谐，后来发现FloatingActionButton的elevation若大于BottomView的elevation，则FloatingActionButton动画覆盖在BottomView上层，反之则在下层。之前却一直没有注意。</p>
<p>此外，当知乎的RecyclerView滑动到底部的时候，BottomView是会自动显示的，个人觉得可以根据dyUnconsumed的值或者onStopNestedScroll来判断RecyclerView是否滑动到底部来处理，全部加载完毕后再处理最后一个item的ItemDecoration，本文并没有具体实现，只是提供思路。</p>
<p>我们再来整理下解决问题的思路：首先想好做什么，然后研究原理，选择方案，再初步实现，继续优化细节，最后应用到项目。我想我们写程序的时候都应该这样，知其然知其所以然，做到举一反三。</p>
<p>整个流程就是这样，实现后再封装，然后呢，抽离出来提交到Github。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">           ...</div><div class="line">           maven &#123; url <span class="string">'https://jitpack.io'</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   dependencies &#123;</div><div class="line">    compile <span class="string">'com.github.Lauzy:LBehavior:1.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体使用也很简单</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@string/title_view_behavior</td>
<td>顶部标题栏</td>
</tr>
<tr>
<td>@string/bottom_view_behavior</td>
<td>底部导航栏</td>
</tr>
<tr>
<td>@string/fab_scale_behavior</td>
<td>浮动按钮（缩放）</td>
</tr>
<tr>
<td>@string/fab_vertical_behavior</td>
<td>浮动按钮（上下滑动）</td>
</tr>
</tbody>
</table>
<p>自定义(均设有默认值，可不使用)：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>setMinScrollY</td>
<td>int y</td>
<td>设置触发动画的最小滑动距离，如 setMinScrollY(10)为滑动10像素才可触发动画，默认为5.</td>
</tr>
<tr>
<td>setScrollYDistance</td>
<td>int y</td>
<td>设置触发动画的滑动距离，防止用户缓慢滑动时单次滑动距离一直小于setMinScrollY的最小滑动距离导致无法触发动画.如设置此值为100，则用户即便缓慢滑动，当滑动距离达到100时也可触发动画.默认为40.</td>
</tr>
<tr>
<td>setDuration</td>
<td>int duration</td>
<td>设置动画持续时间.默认为400ms.</td>
</tr>
<tr>
<td>setInterpolator</td>
<td>Interpolator interpolator</td>
<td>设置动画插补器，修饰动画效果.默认模式为LinearOutSlowInInterpolator. <a href="https://developer.android.google.cn/reference/android/view/animation/Interpolator.html" target="_blank" rel="external">Interpolator官方文档</a></td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">CommonBehavior.from(mFloatingActionButton)</div><div class="line">    .setMinScrollY(<span class="number">20</span>)</div><div class="line">       .setScrollYDistance(<span class="number">100</span>)</div><div class="line">       .setDuration(<span class="number">1000</span>)</div><div class="line">       .setInterpolator(<span class="keyword">new</span> LinearOutSlowInInterpolator());</div></pre></td></tr></table></figure>
<p>最后附上项目的地址，戳  <a href="https://github.com/Lauzy/LBehavior" target="_blank" rel="external">我的Github</a> ，顺便可以看看撸的<a href="https://github.com/Lauzy/GankPro" target="_blank" rel="external">干货集中营客户端</a>。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android 手势交互 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
